
DHT22_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08001770  08001770  00002770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001848  08001848  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001848  08001848  00002848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001850  08001850  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001850  08001850  00002850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001854  08001854  00002854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001858  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  080018b8  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080018b8  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011f7  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000590  00000000  00000000  00004287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000104  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a93f  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d8a  00000000  00000000  0001f3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090eae  00000000  00000000  0002115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b200b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  000b2050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b2ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001758 	.word	0x08001758

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001758 	.word	0x08001758

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
char buffer[50];
void TIM2_Init(void);
void Delay_us(uint16_t us);
uint8_t Read_DHT22_Byte(void);

int main(void) {
 80002b0:	b5b0      	push	{r4, r5, r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af02      	add	r7, sp, #8


    // Initialize UART and Timer
    uart_rxtx_init(); // Initialize UART2 for TX/RX
 80002b6:	f000 f9f5 	bl	80006a4 <uart_rxtx_init>
    printf("UART Initialized!\r\n");
 80002ba:	485f      	ldr	r0, [pc, #380]	@ (8000438 <main+0x188>)
 80002bc:	f000 fbea 	bl	8000a94 <puts>
    TIM2_Init();
 80002c0:	f000 f8d0 	bl	8000464 <TIM2_Init>

    // Enable GPIOA clock
    RCC->AHB1ENR |= GPIOAEN;
 80002c4:	4b5d      	ldr	r3, [pc, #372]	@ (800043c <main+0x18c>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a5c      	ldr	r2, [pc, #368]	@ (800043c <main+0x18c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA5 (DHT22 data pin)
    GPIOA->MODER |= (1 << 10);     // PA5 as output
 80002d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000440 <main+0x190>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a5a      	ldr	r2, [pc, #360]	@ (8000440 <main+0x190>)
 80002d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002da:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 5);    // Push-pull
 80002dc:	4b58      	ldr	r3, [pc, #352]	@ (8000440 <main+0x190>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a57      	ldr	r2, [pc, #348]	@ (8000440 <main+0x190>)
 80002e2:	f023 0320 	bic.w	r3, r3, #32
 80002e6:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~(3 << 10);    // Disable internal pull-up
 80002e8:	4b55      	ldr	r3, [pc, #340]	@ (8000440 <main+0x190>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a54      	ldr	r2, [pc, #336]	@ (8000440 <main+0x190>)
 80002ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002f2:	60d3      	str	r3, [r2, #12]

    while (1) {
        printf("Starting sensor read...\r\n"); // Add this line
 80002f4:	4853      	ldr	r0, [pc, #332]	@ (8000444 <main+0x194>)
 80002f6:	f000 fbcd 	bl	8000a94 <puts>

        // Send start signal to DHT22
        GPIOA->ODR &= ~DHT22_PIN;
 80002fa:	4b51      	ldr	r3, [pc, #324]	@ (8000440 <main+0x190>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a50      	ldr	r2, [pc, #320]	@ (8000440 <main+0x190>)
 8000300:	f023 0320 	bic.w	r3, r3, #32
 8000304:	6153      	str	r3, [r2, #20]
        Delay_us(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800030a:	f000 f8cb 	bl	80004a4 <Delay_us>
        GPIOA->ODR |= DHT22_PIN;
 800030e:	4b4c      	ldr	r3, [pc, #304]	@ (8000440 <main+0x190>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a4b      	ldr	r2, [pc, #300]	@ (8000440 <main+0x190>)
 8000314:	f043 0320 	orr.w	r3, r3, #32
 8000318:	6153      	str	r3, [r2, #20]
        GPIOA->MODER &= ~(3 << 10);
 800031a:	4b49      	ldr	r3, [pc, #292]	@ (8000440 <main+0x190>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a48      	ldr	r2, [pc, #288]	@ (8000440 <main+0x190>)
 8000320:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000324:	6013      	str	r3, [r2, #0]
        Delay_us(30);
 8000326:	201e      	movs	r0, #30
 8000328:	f000 f8bc 	bl	80004a4 <Delay_us>

        printf("Waiting for sensor response...\r\n"); // Add this line
 800032c:	4846      	ldr	r0, [pc, #280]	@ (8000448 <main+0x198>)
 800032e:	f000 fbb1 	bl	8000a94 <puts>

        // Wait for DHT22 response
        uint32_t timeout = 1000000;
 8000332:	4b46      	ldr	r3, [pc, #280]	@ (800044c <main+0x19c>)
 8000334:	617b      	str	r3, [r7, #20]
        while ((GPIOA->IDR & DHT22_PIN) && timeout--);
 8000336:	bf00      	nop
 8000338:	4b41      	ldr	r3, [pc, #260]	@ (8000440 <main+0x190>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	2b00      	cmp	r3, #0
 8000342:	d004      	beq.n	800034e <main+0x9e>
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	1e5a      	subs	r2, r3, #1
 8000348:	617a      	str	r2, [r7, #20]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f4      	bne.n	8000338 <main+0x88>
        if (!timeout) {
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d103      	bne.n	800035c <main+0xac>
            printf("Sensor error: No response!\r\n"); // Enhanced error message
 8000354:	483e      	ldr	r0, [pc, #248]	@ (8000450 <main+0x1a0>)
 8000356:	f000 fb9d 	bl	8000a94 <puts>
            continue;
 800035a:	e06b      	b.n	8000434 <main+0x184>
        }
        timeout = 1000000;
 800035c:	4b3b      	ldr	r3, [pc, #236]	@ (800044c <main+0x19c>)
 800035e:	617b      	str	r3, [r7, #20]
        while (!(GPIOA->IDR & DHT22_PIN) && timeout--); // Wait until high
 8000360:	bf00      	nop
 8000362:	4b37      	ldr	r3, [pc, #220]	@ (8000440 <main+0x190>)
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f003 0320 	and.w	r3, r3, #32
 800036a:	2b00      	cmp	r3, #0
 800036c:	d104      	bne.n	8000378 <main+0xc8>
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	1e5a      	subs	r2, r3, #1
 8000372:	617a      	str	r2, [r7, #20]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f4      	bne.n	8000362 <main+0xb2>

        // Read data
        uint8_t data[5];
        for (int i = 0; i < 5; i++) data[i] = Read_DHT22_Byte();
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	e00b      	b.n	8000396 <main+0xe6>
 800037e:	f000 f8a9 	bl	80004d4 <Read_DHT22_Byte>
 8000382:	4603      	mov	r3, r0
 8000384:	4619      	mov	r1, r3
 8000386:	463a      	mov	r2, r7
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	4413      	add	r3, r2
 800038c:	460a      	mov	r2, r1
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	3301      	adds	r3, #1
 8000394:	613b      	str	r3, [r7, #16]
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	2b04      	cmp	r3, #4
 800039a:	ddf0      	ble.n	800037e <main+0xce>

        // Validate checksum
        if (data[4] != (data[0] + data[1] + data[2] + data[3])) {
 800039c:	793b      	ldrb	r3, [r7, #4]
 800039e:	461a      	mov	r2, r3
 80003a0:	783b      	ldrb	r3, [r7, #0]
 80003a2:	4619      	mov	r1, r3
 80003a4:	787b      	ldrb	r3, [r7, #1]
 80003a6:	440b      	add	r3, r1
 80003a8:	78b9      	ldrb	r1, [r7, #2]
 80003aa:	440b      	add	r3, r1
 80003ac:	78f9      	ldrb	r1, [r7, #3]
 80003ae:	440b      	add	r3, r1
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d003      	beq.n	80003bc <main+0x10c>
            printf("Checksum error!\r\n");
 80003b4:	4827      	ldr	r0, [pc, #156]	@ (8000454 <main+0x1a4>)
 80003b6:	f000 fb6d 	bl	8000a94 <puts>
            continue;
 80003ba:	e03b      	b.n	8000434 <main+0x184>
        }

//         Calculate values
        int humidity = data[0] << 8 | data[1]; // e.g., 625 = 62.5%
 80003bc:	783b      	ldrb	r3, [r7, #0]
 80003be:	021b      	lsls	r3, r3, #8
 80003c0:	787a      	ldrb	r2, [r7, #1]
 80003c2:	4313      	orrs	r3, r2
 80003c4:	60fb      	str	r3, [r7, #12]
        int temperature = data[2] << 8 | data[3]; // e.g., 234 = 23.4°C
 80003c6:	78bb      	ldrb	r3, [r7, #2]
 80003c8:	021b      	lsls	r3, r3, #8
 80003ca:	78fa      	ldrb	r2, [r7, #3]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	60bb      	str	r3, [r7, #8]

        // Print data via UART
        printf("Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	4a21      	ldr	r2, [pc, #132]	@ (8000458 <main+0x1a8>)
 80003d4:	fb82 1203 	smull	r1, r2, r2, r3
 80003d8:	1092      	asrs	r2, r2, #2
 80003da:	17db      	asrs	r3, r3, #31
 80003dc:	1ad4      	subs	r4, r2, r3
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <main+0x1a8>)
 80003e2:	fb83 1302 	smull	r1, r3, r3, r2
 80003e6:	1099      	asrs	r1, r3, #2
 80003e8:	17d3      	asrs	r3, r2, #31
 80003ea:	1ac8      	subs	r0, r1, r3
 80003ec:	4603      	mov	r3, r0
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4403      	add	r3, r0
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	1ad0      	subs	r0, r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	4a17      	ldr	r2, [pc, #92]	@ (8000458 <main+0x1a8>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1092      	asrs	r2, r2, #2
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad5      	subs	r5, r2, r3
 8000404:	68f9      	ldr	r1, [r7, #12]
 8000406:	4b14      	ldr	r3, [pc, #80]	@ (8000458 <main+0x1a8>)
 8000408:	fb83 2301 	smull	r2, r3, r3, r1
 800040c:	109a      	asrs	r2, r3, #2
 800040e:	17cb      	asrs	r3, r1, #31
 8000410:	1ad2      	subs	r2, r2, r3
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	1aca      	subs	r2, r1, r3
 800041c:	9200      	str	r2, [sp, #0]
 800041e:	462b      	mov	r3, r5
 8000420:	4602      	mov	r2, r0
 8000422:	4621      	mov	r1, r4
 8000424:	480d      	ldr	r0, [pc, #52]	@ (800045c <main+0x1ac>)
 8000426:	f000 facd 	bl	80009c4 <iprintf>
               temperature / 10, temperature % 10,
               humidity / 10, humidity % 10);

        // Optional delay between readings
        Delay_us(delay); // 2-second delay
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <main+0x1b0>)
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f838 	bl	80004a4 <Delay_us>
    while (1) {
 8000434:	e75e      	b.n	80002f4 <main+0x44>
 8000436:	bf00      	nop
 8000438:	08001770 	.word	0x08001770
 800043c:	40023800 	.word	0x40023800
 8000440:	40020000 	.word	0x40020000
 8000444:	08001784 	.word	0x08001784
 8000448:	080017a0 	.word	0x080017a0
 800044c:	000f4240 	.word	0x000f4240
 8000450:	080017c0 	.word	0x080017c0
 8000454:	080017dc 	.word	0x080017dc
 8000458:	66666667 	.word	0x66666667
 800045c:	080017f0 	.word	0x080017f0
 8000460:	20000000 	.word	0x20000000

08000464 <TIM2_Init>:
    }
}

// Timer2 Initialization (for µs delays)
void TIM2_Init(void) {
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1U << 0);  // Enable TIM2 clock
 8000468:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <TIM2_Init+0x3c>)
 800046a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800046c:	4a0c      	ldr	r2, [pc, #48]	@ (80004a0 <TIM2_Init+0x3c>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16 - 1;         // 16 MHz / 16 = 1 MHz (1 µs/tick)
 8000474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000478:	220f      	movs	r2, #15
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 800047c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= (1 << 0);      // Enable timer
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40023800 	.word	0x40023800

080004a4 <Delay_us>:

// Microsecond delay
void Delay_us(uint16_t us) {
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	80fb      	strh	r3, [r7, #6]
    TIM2->CNT = 0;
 80004ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < us);}
 80004b6:	bf00      	nop
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004be:	88fb      	ldrh	r3, [r7, #6]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d3f9      	bcc.n	80004b8 <Delay_us+0x14>
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <Read_DHT22_Byte>:

// Read a byte from DHT22
uint8_t Read_DHT22_Byte(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	e025      	b.n	8000530 <Read_DHT22_Byte+0x5c>
        while (!(GPIOA->IDR & DHT22_PIN)); // Wait for high
 80004e4:	bf00      	nop
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <Read_DHT22_Byte+0x6c>)
 80004e8:	691b      	ldr	r3, [r3, #16]
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <Read_DHT22_Byte+0x12>
        Delay_us(50); // Wait 50 µs to read bit value
 80004f2:	2032      	movs	r0, #50	@ 0x32
 80004f4:	f7ff ffd6 	bl	80004a4 <Delay_us>
        if (GPIOA->IDR & DHT22_PIN) data |= (1 << (7 - i));
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <Read_DHT22_Byte+0x6c>)
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00b      	beq.n	800051c <Read_DHT22_Byte+0x48>
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	f1c3 0307 	rsb	r3, r3, #7
 800050a:	2201      	movs	r2, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	b25a      	sxtb	r2, r3
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	4313      	orrs	r3, r2
 8000518:	b25b      	sxtb	r3, r3
 800051a:	71fb      	strb	r3, [r7, #7]
        while (GPIOA->IDR & DHT22_PIN);    // Wait for low
 800051c:	bf00      	nop
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <Read_DHT22_Byte+0x6c>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	f003 0320 	and.w	r3, r3, #32
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f9      	bne.n	800051e <Read_DHT22_Byte+0x4a>
    for (int i = 0; i < 8; i++) {
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	2b07      	cmp	r3, #7
 8000534:	ddd6      	ble.n	80004e4 <Read_DHT22_Byte+0x10>
    }
    return data;
 8000536:	79fb      	ldrb	r3, [r7, #7]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40020000 	.word	0x40020000

08000544 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e00a      	b.n	800056c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000556:	f3af 8000 	nop.w
 800055a:	4601      	mov	r1, r0
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	b2ca      	uxtb	r2, r1
 8000564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf0      	blt.n	8000556 <_read+0x12>
  }

  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b086      	sub	sp, #24
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e009      	b.n	80005a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	1c5a      	adds	r2, r3, #1
 8000594:	60ba      	str	r2, [r7, #8]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f877 	bl	800068c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf1      	blt.n	8000590 <_write+0x12>
  }
  return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_close>:

int _close(int file)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005de:	605a      	str	r2, [r3, #4]
  return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_isatty>:

int _isatty(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
	...

08000620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <_sbrk+0x5c>)
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <_sbrk+0x60>)
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000634:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <_sbrk+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d102      	bne.n	8000642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <_sbrk+0x64>)
 800063e:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <_sbrk+0x68>)
 8000640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	429a      	cmp	r2, r3
 800064e:	d207      	bcs.n	8000660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000650:	f000 fb4e 	bl	8000cf0 <__errno>
 8000654:	4603      	mov	r3, r0
 8000656:	220c      	movs	r2, #12
 8000658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	e009      	b.n	8000674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <_sbrk+0x64>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000666:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <_sbrk+0x64>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <_sbrk+0x64>)
 8000670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20020000 	.word	0x20020000
 8000680:	00000400 	.word	0x00000400
 8000684:	2000007c 	.word	0x2000007c
 8000688:	200001d0 	.word	0x200001d0

0800068c <__io_putchar>:
static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate);
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate);
void uart2_write(int ch);
char uart2_read(void);

int __io_putchar(int ch){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f85f 	bl	8000758 <uart2_write>
	return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <uart_rxtx_init>:

void uart_rxtx_init(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <uart_rxtx_init+0xa4>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	4a26      	ldr	r2, [pc, #152]	@ (8000748 <uart_rxtx_init+0xa4>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<5);
 80006b4:	4b25      	ldr	r3, [pc, #148]	@ (800074c <uart_rxtx_init+0xa8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a24      	ldr	r2, [pc, #144]	@ (800074c <uart_rxtx_init+0xa8>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<4);
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <uart_rxtx_init+0xa8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <uart_rxtx_init+0xa8>)
 80006c6:	f023 0310 	bic.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 TX)
    GPIOA->AFR[0] &= ~(0xF << 8); // Clear bits 8-11 for PA2
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <uart_rxtx_init+0xa8>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <uart_rxtx_init+0xa8>)
 80006d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80006d6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);  // AF7 is 0111
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <uart_rxtx_init+0xa8>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <uart_rxtx_init+0xa8>)
 80006de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006e2:	6213      	str	r3, [r2, #32]

    // Set PA3 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<7);
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <uart_rxtx_init+0xa8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a18      	ldr	r2, [pc, #96]	@ (800074c <uart_rxtx_init+0xa8>)
 80006ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<6);
 80006f0:	4b16      	ldr	r3, [pc, #88]	@ (800074c <uart_rxtx_init+0xa8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a15      	ldr	r2, [pc, #84]	@ (800074c <uart_rxtx_init+0xa8>)
 80006f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006fa:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 RX)
    GPIOA->AFR[0] &= ~(0xF << 12); // Clear bits 8-15 for PA3
 80006fc:	4b13      	ldr	r3, [pc, #76]	@ (800074c <uart_rxtx_init+0xa8>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a12      	ldr	r2, [pc, #72]	@ (800074c <uart_rxtx_init+0xa8>)
 8000702:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000706:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);  // AF7 is 0111
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <uart_rxtx_init+0xa8>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a0f      	ldr	r2, [pc, #60]	@ (800074c <uart_rxtx_init+0xa8>)
 800070e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000712:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= UART2EN;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <uart_rxtx_init+0xa4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a0b      	ldr	r2, [pc, #44]	@ (8000748 <uart_rxtx_init+0xa4>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	490a      	ldr	r1, [pc, #40]	@ (8000750 <uart_rxtx_init+0xac>)
 8000726:	480b      	ldr	r0, [pc, #44]	@ (8000754 <uart_rxtx_init+0xb0>)
 8000728:	f000 f83c 	bl	80007a4 <uart_set_baudrate>

    // Configure transfer direction
    USART2->CR1 |= CR1_TE | CR1_RE;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <uart_rxtx_init+0xb0>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <uart_rxtx_init+0xb0>)
 8000732:	f043 030c 	orr.w	r3, r3, #12
 8000736:	60d3      	str	r3, [r2, #12]

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <uart_rxtx_init+0xb0>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <uart_rxtx_init+0xb0>)
 800073e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000
 8000750:	00f42400 	.word	0x00f42400
 8000754:	40004400 	.word	0x40004400

08000758 <uart2_write>:

    // read data
    return USART2->DR;
}

void uart2_write(int ch){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	 GPIOA->ODR |= (1U << 5);  // Turn LED ON
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <uart2_write+0x44>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <uart2_write+0x44>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6153      	str	r3, [r2, #20]
    // Wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 800076c:	bf00      	nop
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <uart2_write+0x48>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f9      	beq.n	800076e <uart2_write+0x16>

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <uart2_write+0x48>)
 800077e:	b2db      	uxtb	r3, r3
 8000780:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~(1U << 5); // Turn LED OFF
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <uart2_write+0x44>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <uart2_write+0x44>)
 8000788:	f023 0320 	bic.w	r3, r3, #32
 800078c:	6153      	str	r3, [r2, #20]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40020000 	.word	0x40020000
 80007a0:	40004400 	.word	0x40004400

080007a4 <uart_set_baudrate>:

// Set baud rate
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    USARTx->BRR = calculate_uart_bd(periphCLK, baudrate);
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	68b8      	ldr	r0, [r7, #8]
 80007b4:	f000 f807 	bl	80007c6 <calculate_uart_bd>
 80007b8:	4602      	mov	r2, r0
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	609a      	str	r2, [r3, #8]
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <calculate_uart_bd>:

static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate){
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
    return ((periphCLK + (baudrate / 2U)) / baudrate);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	085a      	lsrs	r2, r3, #1
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	441a      	add	r2, r3
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	@ (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	@ (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	@ (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081a:	f000 fa6f 	bl	8000cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fd47 	bl	80002b0 <main>

08000822 <LoopForever>:

LoopForever:
  b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000830:	08001858 	.word	0x08001858
  ldr r2, =_sbss
 8000834:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000838:	200001cc 	.word	0x200001cc

0800083c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <std>:
 8000840:	2300      	movs	r3, #0
 8000842:	b510      	push	{r4, lr}
 8000844:	4604      	mov	r4, r0
 8000846:	e9c0 3300 	strd	r3, r3, [r0]
 800084a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800084e:	6083      	str	r3, [r0, #8]
 8000850:	8181      	strh	r1, [r0, #12]
 8000852:	6643      	str	r3, [r0, #100]	@ 0x64
 8000854:	81c2      	strh	r2, [r0, #14]
 8000856:	6183      	str	r3, [r0, #24]
 8000858:	4619      	mov	r1, r3
 800085a:	2208      	movs	r2, #8
 800085c:	305c      	adds	r0, #92	@ 0x5c
 800085e:	f000 f9f9 	bl	8000c54 <memset>
 8000862:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <std+0x58>)
 8000864:	6263      	str	r3, [r4, #36]	@ 0x24
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <std+0x5c>)
 8000868:	62a3      	str	r3, [r4, #40]	@ 0x28
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <std+0x60>)
 800086c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <std+0x64>)
 8000870:	6323      	str	r3, [r4, #48]	@ 0x30
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <std+0x68>)
 8000874:	6224      	str	r4, [r4, #32]
 8000876:	429c      	cmp	r4, r3
 8000878:	d006      	beq.n	8000888 <std+0x48>
 800087a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800087e:	4294      	cmp	r4, r2
 8000880:	d002      	beq.n	8000888 <std+0x48>
 8000882:	33d0      	adds	r3, #208	@ 0xd0
 8000884:	429c      	cmp	r4, r3
 8000886:	d105      	bne.n	8000894 <std+0x54>
 8000888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000890:	f000 ba58 	b.w	8000d44 <__retarget_lock_init_recursive>
 8000894:	bd10      	pop	{r4, pc}
 8000896:	bf00      	nop
 8000898:	08000aa5 	.word	0x08000aa5
 800089c:	08000ac7 	.word	0x08000ac7
 80008a0:	08000aff 	.word	0x08000aff
 80008a4:	08000b23 	.word	0x08000b23
 80008a8:	20000080 	.word	0x20000080

080008ac <stdio_exit_handler>:
 80008ac:	4a02      	ldr	r2, [pc, #8]	@ (80008b8 <stdio_exit_handler+0xc>)
 80008ae:	4903      	ldr	r1, [pc, #12]	@ (80008bc <stdio_exit_handler+0x10>)
 80008b0:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <stdio_exit_handler+0x14>)
 80008b2:	f000 b869 	b.w	8000988 <_fwalk_sglue>
 80008b6:	bf00      	nop
 80008b8:	20000004 	.word	0x20000004
 80008bc:	080015e1 	.word	0x080015e1
 80008c0:	20000014 	.word	0x20000014

080008c4 <cleanup_stdio>:
 80008c4:	6841      	ldr	r1, [r0, #4]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <cleanup_stdio+0x34>)
 80008c8:	4299      	cmp	r1, r3
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
 80008ce:	d001      	beq.n	80008d4 <cleanup_stdio+0x10>
 80008d0:	f000 fe86 	bl	80015e0 <_fflush_r>
 80008d4:	68a1      	ldr	r1, [r4, #8]
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <cleanup_stdio+0x38>)
 80008d8:	4299      	cmp	r1, r3
 80008da:	d002      	beq.n	80008e2 <cleanup_stdio+0x1e>
 80008dc:	4620      	mov	r0, r4
 80008de:	f000 fe7f 	bl	80015e0 <_fflush_r>
 80008e2:	68e1      	ldr	r1, [r4, #12]
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <cleanup_stdio+0x3c>)
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d004      	beq.n	80008f4 <cleanup_stdio+0x30>
 80008ea:	4620      	mov	r0, r4
 80008ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f0:	f000 be76 	b.w	80015e0 <_fflush_r>
 80008f4:	bd10      	pop	{r4, pc}
 80008f6:	bf00      	nop
 80008f8:	20000080 	.word	0x20000080
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	20000150 	.word	0x20000150

08000904 <global_stdio_init.part.0>:
 8000904:	b510      	push	{r4, lr}
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <global_stdio_init.part.0+0x30>)
 8000908:	4c0b      	ldr	r4, [pc, #44]	@ (8000938 <global_stdio_init.part.0+0x34>)
 800090a:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <global_stdio_init.part.0+0x38>)
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	4620      	mov	r0, r4
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	f7ff ff94 	bl	8000840 <std>
 8000918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800091c:	2201      	movs	r2, #1
 800091e:	2109      	movs	r1, #9
 8000920:	f7ff ff8e 	bl	8000840 <std>
 8000924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000928:	2202      	movs	r2, #2
 800092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800092e:	2112      	movs	r1, #18
 8000930:	f7ff bf86 	b.w	8000840 <std>
 8000934:	200001b8 	.word	0x200001b8
 8000938:	20000080 	.word	0x20000080
 800093c:	080008ad 	.word	0x080008ad

08000940 <__sfp_lock_acquire>:
 8000940:	4801      	ldr	r0, [pc, #4]	@ (8000948 <__sfp_lock_acquire+0x8>)
 8000942:	f000 ba00 	b.w	8000d46 <__retarget_lock_acquire_recursive>
 8000946:	bf00      	nop
 8000948:	200001c1 	.word	0x200001c1

0800094c <__sfp_lock_release>:
 800094c:	4801      	ldr	r0, [pc, #4]	@ (8000954 <__sfp_lock_release+0x8>)
 800094e:	f000 b9fb 	b.w	8000d48 <__retarget_lock_release_recursive>
 8000952:	bf00      	nop
 8000954:	200001c1 	.word	0x200001c1

08000958 <__sinit>:
 8000958:	b510      	push	{r4, lr}
 800095a:	4604      	mov	r4, r0
 800095c:	f7ff fff0 	bl	8000940 <__sfp_lock_acquire>
 8000960:	6a23      	ldr	r3, [r4, #32]
 8000962:	b11b      	cbz	r3, 800096c <__sinit+0x14>
 8000964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000968:	f7ff bff0 	b.w	800094c <__sfp_lock_release>
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <__sinit+0x28>)
 800096e:	6223      	str	r3, [r4, #32]
 8000970:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <__sinit+0x2c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f5      	bne.n	8000964 <__sinit+0xc>
 8000978:	f7ff ffc4 	bl	8000904 <global_stdio_init.part.0>
 800097c:	e7f2      	b.n	8000964 <__sinit+0xc>
 800097e:	bf00      	nop
 8000980:	080008c5 	.word	0x080008c5
 8000984:	200001b8 	.word	0x200001b8

08000988 <_fwalk_sglue>:
 8000988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800098c:	4607      	mov	r7, r0
 800098e:	4688      	mov	r8, r1
 8000990:	4614      	mov	r4, r2
 8000992:	2600      	movs	r6, #0
 8000994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000998:	f1b9 0901 	subs.w	r9, r9, #1
 800099c:	d505      	bpl.n	80009aa <_fwalk_sglue+0x22>
 800099e:	6824      	ldr	r4, [r4, #0]
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d1f7      	bne.n	8000994 <_fwalk_sglue+0xc>
 80009a4:	4630      	mov	r0, r6
 80009a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009aa:	89ab      	ldrh	r3, [r5, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d907      	bls.n	80009c0 <_fwalk_sglue+0x38>
 80009b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009b4:	3301      	adds	r3, #1
 80009b6:	d003      	beq.n	80009c0 <_fwalk_sglue+0x38>
 80009b8:	4629      	mov	r1, r5
 80009ba:	4638      	mov	r0, r7
 80009bc:	47c0      	blx	r8
 80009be:	4306      	orrs	r6, r0
 80009c0:	3568      	adds	r5, #104	@ 0x68
 80009c2:	e7e9      	b.n	8000998 <_fwalk_sglue+0x10>

080009c4 <iprintf>:
 80009c4:	b40f      	push	{r0, r1, r2, r3}
 80009c6:	b507      	push	{r0, r1, r2, lr}
 80009c8:	4906      	ldr	r1, [pc, #24]	@ (80009e4 <iprintf+0x20>)
 80009ca:	ab04      	add	r3, sp, #16
 80009cc:	6808      	ldr	r0, [r1, #0]
 80009ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80009d2:	6881      	ldr	r1, [r0, #8]
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	f000 fadb 	bl	8000f90 <_vfiprintf_r>
 80009da:	b003      	add	sp, #12
 80009dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr
 80009e4:	20000010 	.word	0x20000010

080009e8 <_puts_r>:
 80009e8:	6a03      	ldr	r3, [r0, #32]
 80009ea:	b570      	push	{r4, r5, r6, lr}
 80009ec:	6884      	ldr	r4, [r0, #8]
 80009ee:	4605      	mov	r5, r0
 80009f0:	460e      	mov	r6, r1
 80009f2:	b90b      	cbnz	r3, 80009f8 <_puts_r+0x10>
 80009f4:	f7ff ffb0 	bl	8000958 <__sinit>
 80009f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009fa:	07db      	lsls	r3, r3, #31
 80009fc:	d405      	bmi.n	8000a0a <_puts_r+0x22>
 80009fe:	89a3      	ldrh	r3, [r4, #12]
 8000a00:	0598      	lsls	r0, r3, #22
 8000a02:	d402      	bmi.n	8000a0a <_puts_r+0x22>
 8000a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a06:	f000 f99e 	bl	8000d46 <__retarget_lock_acquire_recursive>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	0719      	lsls	r1, r3, #28
 8000a0e:	d502      	bpl.n	8000a16 <_puts_r+0x2e>
 8000a10:	6923      	ldr	r3, [r4, #16]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d135      	bne.n	8000a82 <_puts_r+0x9a>
 8000a16:	4621      	mov	r1, r4
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f000 f8c5 	bl	8000ba8 <__swsetup_r>
 8000a1e:	b380      	cbz	r0, 8000a82 <_puts_r+0x9a>
 8000a20:	f04f 35ff 	mov.w	r5, #4294967295
 8000a24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a26:	07da      	lsls	r2, r3, #31
 8000a28:	d405      	bmi.n	8000a36 <_puts_r+0x4e>
 8000a2a:	89a3      	ldrh	r3, [r4, #12]
 8000a2c:	059b      	lsls	r3, r3, #22
 8000a2e:	d402      	bmi.n	8000a36 <_puts_r+0x4e>
 8000a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a32:	f000 f989 	bl	8000d48 <__retarget_lock_release_recursive>
 8000a36:	4628      	mov	r0, r5
 8000a38:	bd70      	pop	{r4, r5, r6, pc}
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da04      	bge.n	8000a48 <_puts_r+0x60>
 8000a3e:	69a2      	ldr	r2, [r4, #24]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dc17      	bgt.n	8000a74 <_puts_r+0x8c>
 8000a44:	290a      	cmp	r1, #10
 8000a46:	d015      	beq.n	8000a74 <_puts_r+0x8c>
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	1c5a      	adds	r2, r3, #1
 8000a4c:	6022      	str	r2, [r4, #0]
 8000a4e:	7019      	strb	r1, [r3, #0]
 8000a50:	68a3      	ldr	r3, [r4, #8]
 8000a52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a56:	3b01      	subs	r3, #1
 8000a58:	60a3      	str	r3, [r4, #8]
 8000a5a:	2900      	cmp	r1, #0
 8000a5c:	d1ed      	bne.n	8000a3a <_puts_r+0x52>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da11      	bge.n	8000a86 <_puts_r+0x9e>
 8000a62:	4622      	mov	r2, r4
 8000a64:	210a      	movs	r1, #10
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 f85f 	bl	8000b2a <__swbuf_r>
 8000a6c:	3001      	adds	r0, #1
 8000a6e:	d0d7      	beq.n	8000a20 <_puts_r+0x38>
 8000a70:	250a      	movs	r5, #10
 8000a72:	e7d7      	b.n	8000a24 <_puts_r+0x3c>
 8000a74:	4622      	mov	r2, r4
 8000a76:	4628      	mov	r0, r5
 8000a78:	f000 f857 	bl	8000b2a <__swbuf_r>
 8000a7c:	3001      	adds	r0, #1
 8000a7e:	d1e7      	bne.n	8000a50 <_puts_r+0x68>
 8000a80:	e7ce      	b.n	8000a20 <_puts_r+0x38>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	e7e4      	b.n	8000a50 <_puts_r+0x68>
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	6022      	str	r2, [r4, #0]
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e7ee      	b.n	8000a70 <_puts_r+0x88>
	...

08000a94 <puts>:
 8000a94:	4b02      	ldr	r3, [pc, #8]	@ (8000aa0 <puts+0xc>)
 8000a96:	4601      	mov	r1, r0
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	f7ff bfa5 	b.w	80009e8 <_puts_r>
 8000a9e:	bf00      	nop
 8000aa0:	20000010 	.word	0x20000010

08000aa4 <__sread>:
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	460c      	mov	r4, r1
 8000aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aac:	f000 f8fc 	bl	8000ca8 <_read_r>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	bfab      	itete	ge
 8000ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8000ab8:	181b      	addge	r3, r3, r0
 8000aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000abe:	bfac      	ite	ge
 8000ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ac2:	81a3      	strhlt	r3, [r4, #12]
 8000ac4:	bd10      	pop	{r4, pc}

08000ac6 <__swrite>:
 8000ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aca:	461f      	mov	r7, r3
 8000acc:	898b      	ldrh	r3, [r1, #12]
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	4605      	mov	r5, r0
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	4616      	mov	r6, r2
 8000ad6:	d505      	bpl.n	8000ae4 <__swrite+0x1e>
 8000ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000adc:	2302      	movs	r3, #2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f000 f8d0 	bl	8000c84 <_lseek_r>
 8000ae4:	89a3      	ldrh	r3, [r4, #12]
 8000ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000aee:	81a3      	strh	r3, [r4, #12]
 8000af0:	4632      	mov	r2, r6
 8000af2:	463b      	mov	r3, r7
 8000af4:	4628      	mov	r0, r5
 8000af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000afa:	f000 b8e7 	b.w	8000ccc <_write_r>

08000afe <__sseek>:
 8000afe:	b510      	push	{r4, lr}
 8000b00:	460c      	mov	r4, r1
 8000b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b06:	f000 f8bd 	bl	8000c84 <_lseek_r>
 8000b0a:	1c43      	adds	r3, r0, #1
 8000b0c:	89a3      	ldrh	r3, [r4, #12]
 8000b0e:	bf15      	itete	ne
 8000b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b1a:	81a3      	strheq	r3, [r4, #12]
 8000b1c:	bf18      	it	ne
 8000b1e:	81a3      	strhne	r3, [r4, #12]
 8000b20:	bd10      	pop	{r4, pc}

08000b22 <__sclose>:
 8000b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b26:	f000 b89d 	b.w	8000c64 <_close_r>

08000b2a <__swbuf_r>:
 8000b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2c:	460e      	mov	r6, r1
 8000b2e:	4614      	mov	r4, r2
 8000b30:	4605      	mov	r5, r0
 8000b32:	b118      	cbz	r0, 8000b3c <__swbuf_r+0x12>
 8000b34:	6a03      	ldr	r3, [r0, #32]
 8000b36:	b90b      	cbnz	r3, 8000b3c <__swbuf_r+0x12>
 8000b38:	f7ff ff0e 	bl	8000958 <__sinit>
 8000b3c:	69a3      	ldr	r3, [r4, #24]
 8000b3e:	60a3      	str	r3, [r4, #8]
 8000b40:	89a3      	ldrh	r3, [r4, #12]
 8000b42:	071a      	lsls	r2, r3, #28
 8000b44:	d501      	bpl.n	8000b4a <__swbuf_r+0x20>
 8000b46:	6923      	ldr	r3, [r4, #16]
 8000b48:	b943      	cbnz	r3, 8000b5c <__swbuf_r+0x32>
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 f82b 	bl	8000ba8 <__swsetup_r>
 8000b52:	b118      	cbz	r0, 8000b5c <__swbuf_r+0x32>
 8000b54:	f04f 37ff 	mov.w	r7, #4294967295
 8000b58:	4638      	mov	r0, r7
 8000b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	6922      	ldr	r2, [r4, #16]
 8000b60:	1a98      	subs	r0, r3, r2
 8000b62:	6963      	ldr	r3, [r4, #20]
 8000b64:	b2f6      	uxtb	r6, r6
 8000b66:	4283      	cmp	r3, r0
 8000b68:	4637      	mov	r7, r6
 8000b6a:	dc05      	bgt.n	8000b78 <__swbuf_r+0x4e>
 8000b6c:	4621      	mov	r1, r4
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f000 fd36 	bl	80015e0 <_fflush_r>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d1ed      	bne.n	8000b54 <__swbuf_r+0x2a>
 8000b78:	68a3      	ldr	r3, [r4, #8]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	60a3      	str	r3, [r4, #8]
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	6022      	str	r2, [r4, #0]
 8000b84:	701e      	strb	r6, [r3, #0]
 8000b86:	6962      	ldr	r2, [r4, #20]
 8000b88:	1c43      	adds	r3, r0, #1
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d004      	beq.n	8000b98 <__swbuf_r+0x6e>
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	07db      	lsls	r3, r3, #31
 8000b92:	d5e1      	bpl.n	8000b58 <__swbuf_r+0x2e>
 8000b94:	2e0a      	cmp	r6, #10
 8000b96:	d1df      	bne.n	8000b58 <__swbuf_r+0x2e>
 8000b98:	4621      	mov	r1, r4
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	f000 fd20 	bl	80015e0 <_fflush_r>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d0d9      	beq.n	8000b58 <__swbuf_r+0x2e>
 8000ba4:	e7d6      	b.n	8000b54 <__swbuf_r+0x2a>
	...

08000ba8 <__swsetup_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <__swsetup_r+0xa8>)
 8000bac:	4605      	mov	r5, r0
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	b118      	cbz	r0, 8000bbc <__swsetup_r+0x14>
 8000bb4:	6a03      	ldr	r3, [r0, #32]
 8000bb6:	b90b      	cbnz	r3, 8000bbc <__swsetup_r+0x14>
 8000bb8:	f7ff fece 	bl	8000958 <__sinit>
 8000bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc0:	0719      	lsls	r1, r3, #28
 8000bc2:	d422      	bmi.n	8000c0a <__swsetup_r+0x62>
 8000bc4:	06da      	lsls	r2, r3, #27
 8000bc6:	d407      	bmi.n	8000bd8 <__swsetup_r+0x30>
 8000bc8:	2209      	movs	r2, #9
 8000bca:	602a      	str	r2, [r5, #0]
 8000bcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd0:	81a3      	strh	r3, [r4, #12]
 8000bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd6:	e033      	b.n	8000c40 <__swsetup_r+0x98>
 8000bd8:	0758      	lsls	r0, r3, #29
 8000bda:	d512      	bpl.n	8000c02 <__swsetup_r+0x5a>
 8000bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bde:	b141      	cbz	r1, 8000bf2 <__swsetup_r+0x4a>
 8000be0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d002      	beq.n	8000bee <__swsetup_r+0x46>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f000 f8af 	bl	8000d4c <_free_r>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bf2:	89a3      	ldrh	r3, [r4, #12]
 8000bf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000bf8:	81a3      	strh	r3, [r4, #12]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6063      	str	r3, [r4, #4]
 8000bfe:	6923      	ldr	r3, [r4, #16]
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	6923      	ldr	r3, [r4, #16]
 8000c0c:	b94b      	cbnz	r3, 8000c22 <__swsetup_r+0x7a>
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c18:	d003      	beq.n	8000c22 <__swsetup_r+0x7a>
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 fd2d 	bl	800167c <__smakebuf_r>
 8000c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c26:	f013 0201 	ands.w	r2, r3, #1
 8000c2a:	d00a      	beq.n	8000c42 <__swsetup_r+0x9a>
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60a2      	str	r2, [r4, #8]
 8000c30:	6962      	ldr	r2, [r4, #20]
 8000c32:	4252      	negs	r2, r2
 8000c34:	61a2      	str	r2, [r4, #24]
 8000c36:	6922      	ldr	r2, [r4, #16]
 8000c38:	b942      	cbnz	r2, 8000c4c <__swsetup_r+0xa4>
 8000c3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c3e:	d1c5      	bne.n	8000bcc <__swsetup_r+0x24>
 8000c40:	bd38      	pop	{r3, r4, r5, pc}
 8000c42:	0799      	lsls	r1, r3, #30
 8000c44:	bf58      	it	pl
 8000c46:	6962      	ldrpl	r2, [r4, #20]
 8000c48:	60a2      	str	r2, [r4, #8]
 8000c4a:	e7f4      	b.n	8000c36 <__swsetup_r+0x8e>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e7f7      	b.n	8000c40 <__swsetup_r+0x98>
 8000c50:	20000010 	.word	0x20000010

08000c54 <memset>:
 8000c54:	4402      	add	r2, r0
 8000c56:	4603      	mov	r3, r0
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <memset+0xa>
 8000c5c:	4770      	bx	lr
 8000c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c62:	e7f9      	b.n	8000c58 <memset+0x4>

08000c64 <_close_r>:
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	4d06      	ldr	r5, [pc, #24]	@ (8000c80 <_close_r+0x1c>)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	602b      	str	r3, [r5, #0]
 8000c70:	f7ff fca1 	bl	80005b6 <_close>
 8000c74:	1c43      	adds	r3, r0, #1
 8000c76:	d102      	bne.n	8000c7e <_close_r+0x1a>
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	b103      	cbz	r3, 8000c7e <_close_r+0x1a>
 8000c7c:	6023      	str	r3, [r4, #0]
 8000c7e:	bd38      	pop	{r3, r4, r5, pc}
 8000c80:	200001bc 	.word	0x200001bc

08000c84 <_lseek_r>:
 8000c84:	b538      	push	{r3, r4, r5, lr}
 8000c86:	4d07      	ldr	r5, [pc, #28]	@ (8000ca4 <_lseek_r+0x20>)
 8000c88:	4604      	mov	r4, r0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	2200      	movs	r2, #0
 8000c90:	602a      	str	r2, [r5, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	f7ff fcb6 	bl	8000604 <_lseek>
 8000c98:	1c43      	adds	r3, r0, #1
 8000c9a:	d102      	bne.n	8000ca2 <_lseek_r+0x1e>
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	b103      	cbz	r3, 8000ca2 <_lseek_r+0x1e>
 8000ca0:	6023      	str	r3, [r4, #0]
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}
 8000ca4:	200001bc 	.word	0x200001bc

08000ca8 <_read_r>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	4d07      	ldr	r5, [pc, #28]	@ (8000cc8 <_read_r+0x20>)
 8000cac:	4604      	mov	r4, r0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	602a      	str	r2, [r5, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f7ff fc44 	bl	8000544 <_read>
 8000cbc:	1c43      	adds	r3, r0, #1
 8000cbe:	d102      	bne.n	8000cc6 <_read_r+0x1e>
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	b103      	cbz	r3, 8000cc6 <_read_r+0x1e>
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	bd38      	pop	{r3, r4, r5, pc}
 8000cc8:	200001bc 	.word	0x200001bc

08000ccc <_write_r>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4d07      	ldr	r5, [pc, #28]	@ (8000cec <_write_r+0x20>)
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	602a      	str	r2, [r5, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f7ff fc4f 	bl	800057e <_write>
 8000ce0:	1c43      	adds	r3, r0, #1
 8000ce2:	d102      	bne.n	8000cea <_write_r+0x1e>
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	b103      	cbz	r3, 8000cea <_write_r+0x1e>
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
 8000cec:	200001bc 	.word	0x200001bc

08000cf0 <__errno>:
 8000cf0:	4b01      	ldr	r3, [pc, #4]	@ (8000cf8 <__errno+0x8>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000010 	.word	0x20000010

08000cfc <__libc_init_array>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	4d0d      	ldr	r5, [pc, #52]	@ (8000d34 <__libc_init_array+0x38>)
 8000d00:	4c0d      	ldr	r4, [pc, #52]	@ (8000d38 <__libc_init_array+0x3c>)
 8000d02:	1b64      	subs	r4, r4, r5
 8000d04:	10a4      	asrs	r4, r4, #2
 8000d06:	2600      	movs	r6, #0
 8000d08:	42a6      	cmp	r6, r4
 8000d0a:	d109      	bne.n	8000d20 <__libc_init_array+0x24>
 8000d0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000d3c <__libc_init_array+0x40>)
 8000d0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000d40 <__libc_init_array+0x44>)
 8000d10:	f000 fd22 	bl	8001758 <_init>
 8000d14:	1b64      	subs	r4, r4, r5
 8000d16:	10a4      	asrs	r4, r4, #2
 8000d18:	2600      	movs	r6, #0
 8000d1a:	42a6      	cmp	r6, r4
 8000d1c:	d105      	bne.n	8000d2a <__libc_init_array+0x2e>
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d24:	4798      	blx	r3
 8000d26:	3601      	adds	r6, #1
 8000d28:	e7ee      	b.n	8000d08 <__libc_init_array+0xc>
 8000d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2e:	4798      	blx	r3
 8000d30:	3601      	adds	r6, #1
 8000d32:	e7f2      	b.n	8000d1a <__libc_init_array+0x1e>
 8000d34:	08001850 	.word	0x08001850
 8000d38:	08001850 	.word	0x08001850
 8000d3c:	08001850 	.word	0x08001850
 8000d40:	08001854 	.word	0x08001854

08000d44 <__retarget_lock_init_recursive>:
 8000d44:	4770      	bx	lr

08000d46 <__retarget_lock_acquire_recursive>:
 8000d46:	4770      	bx	lr

08000d48 <__retarget_lock_release_recursive>:
 8000d48:	4770      	bx	lr
	...

08000d4c <_free_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4605      	mov	r5, r0
 8000d50:	2900      	cmp	r1, #0
 8000d52:	d041      	beq.n	8000dd8 <_free_r+0x8c>
 8000d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d58:	1f0c      	subs	r4, r1, #4
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bfb8      	it	lt
 8000d5e:	18e4      	addlt	r4, r4, r3
 8000d60:	f000 f8e0 	bl	8000f24 <__malloc_lock>
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <_free_r+0x90>)
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	b933      	cbnz	r3, 8000d78 <_free_r+0x2c>
 8000d6a:	6063      	str	r3, [r4, #4]
 8000d6c:	6014      	str	r4, [r2, #0]
 8000d6e:	4628      	mov	r0, r5
 8000d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d74:	f000 b8dc 	b.w	8000f30 <__malloc_unlock>
 8000d78:	42a3      	cmp	r3, r4
 8000d7a:	d908      	bls.n	8000d8e <_free_r+0x42>
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	1821      	adds	r1, r4, r0
 8000d80:	428b      	cmp	r3, r1
 8000d82:	bf01      	itttt	eq
 8000d84:	6819      	ldreq	r1, [r3, #0]
 8000d86:	685b      	ldreq	r3, [r3, #4]
 8000d88:	1809      	addeq	r1, r1, r0
 8000d8a:	6021      	streq	r1, [r4, #0]
 8000d8c:	e7ed      	b.n	8000d6a <_free_r+0x1e>
 8000d8e:	461a      	mov	r2, r3
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	b10b      	cbz	r3, 8000d98 <_free_r+0x4c>
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d9fa      	bls.n	8000d8e <_free_r+0x42>
 8000d98:	6811      	ldr	r1, [r2, #0]
 8000d9a:	1850      	adds	r0, r2, r1
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d10b      	bne.n	8000db8 <_free_r+0x6c>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	4401      	add	r1, r0
 8000da4:	1850      	adds	r0, r2, r1
 8000da6:	4283      	cmp	r3, r0
 8000da8:	6011      	str	r1, [r2, #0]
 8000daa:	d1e0      	bne.n	8000d6e <_free_r+0x22>
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	6053      	str	r3, [r2, #4]
 8000db2:	4408      	add	r0, r1
 8000db4:	6010      	str	r0, [r2, #0]
 8000db6:	e7da      	b.n	8000d6e <_free_r+0x22>
 8000db8:	d902      	bls.n	8000dc0 <_free_r+0x74>
 8000dba:	230c      	movs	r3, #12
 8000dbc:	602b      	str	r3, [r5, #0]
 8000dbe:	e7d6      	b.n	8000d6e <_free_r+0x22>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	1821      	adds	r1, r4, r0
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	bf04      	itt	eq
 8000dc8:	6819      	ldreq	r1, [r3, #0]
 8000dca:	685b      	ldreq	r3, [r3, #4]
 8000dcc:	6063      	str	r3, [r4, #4]
 8000dce:	bf04      	itt	eq
 8000dd0:	1809      	addeq	r1, r1, r0
 8000dd2:	6021      	streq	r1, [r4, #0]
 8000dd4:	6054      	str	r4, [r2, #4]
 8000dd6:	e7ca      	b.n	8000d6e <_free_r+0x22>
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001c8 	.word	0x200001c8

08000de0 <sbrk_aligned>:
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	4e0f      	ldr	r6, [pc, #60]	@ (8000e20 <sbrk_aligned+0x40>)
 8000de4:	460c      	mov	r4, r1
 8000de6:	6831      	ldr	r1, [r6, #0]
 8000de8:	4605      	mov	r5, r0
 8000dea:	b911      	cbnz	r1, 8000df2 <sbrk_aligned+0x12>
 8000dec:	f000 fca4 	bl	8001738 <_sbrk_r>
 8000df0:	6030      	str	r0, [r6, #0]
 8000df2:	4621      	mov	r1, r4
 8000df4:	4628      	mov	r0, r5
 8000df6:	f000 fc9f 	bl	8001738 <_sbrk_r>
 8000dfa:	1c43      	adds	r3, r0, #1
 8000dfc:	d103      	bne.n	8000e06 <sbrk_aligned+0x26>
 8000dfe:	f04f 34ff 	mov.w	r4, #4294967295
 8000e02:	4620      	mov	r0, r4
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	1cc4      	adds	r4, r0, #3
 8000e08:	f024 0403 	bic.w	r4, r4, #3
 8000e0c:	42a0      	cmp	r0, r4
 8000e0e:	d0f8      	beq.n	8000e02 <sbrk_aligned+0x22>
 8000e10:	1a21      	subs	r1, r4, r0
 8000e12:	4628      	mov	r0, r5
 8000e14:	f000 fc90 	bl	8001738 <_sbrk_r>
 8000e18:	3001      	adds	r0, #1
 8000e1a:	d1f2      	bne.n	8000e02 <sbrk_aligned+0x22>
 8000e1c:	e7ef      	b.n	8000dfe <sbrk_aligned+0x1e>
 8000e1e:	bf00      	nop
 8000e20:	200001c4 	.word	0x200001c4

08000e24 <_malloc_r>:
 8000e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e28:	1ccd      	adds	r5, r1, #3
 8000e2a:	f025 0503 	bic.w	r5, r5, #3
 8000e2e:	3508      	adds	r5, #8
 8000e30:	2d0c      	cmp	r5, #12
 8000e32:	bf38      	it	cc
 8000e34:	250c      	movcc	r5, #12
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	4606      	mov	r6, r0
 8000e3a:	db01      	blt.n	8000e40 <_malloc_r+0x1c>
 8000e3c:	42a9      	cmp	r1, r5
 8000e3e:	d904      	bls.n	8000e4a <_malloc_r+0x26>
 8000e40:	230c      	movs	r3, #12
 8000e42:	6033      	str	r3, [r6, #0]
 8000e44:	2000      	movs	r0, #0
 8000e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f20 <_malloc_r+0xfc>
 8000e4e:	f000 f869 	bl	8000f24 <__malloc_lock>
 8000e52:	f8d8 3000 	ldr.w	r3, [r8]
 8000e56:	461c      	mov	r4, r3
 8000e58:	bb44      	cbnz	r4, 8000eac <_malloc_r+0x88>
 8000e5a:	4629      	mov	r1, r5
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f7ff ffbf 	bl	8000de0 <sbrk_aligned>
 8000e62:	1c43      	adds	r3, r0, #1
 8000e64:	4604      	mov	r4, r0
 8000e66:	d158      	bne.n	8000f1a <_malloc_r+0xf6>
 8000e68:	f8d8 4000 	ldr.w	r4, [r8]
 8000e6c:	4627      	mov	r7, r4
 8000e6e:	2f00      	cmp	r7, #0
 8000e70:	d143      	bne.n	8000efa <_malloc_r+0xd6>
 8000e72:	2c00      	cmp	r4, #0
 8000e74:	d04b      	beq.n	8000f0e <_malloc_r+0xea>
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	4639      	mov	r1, r7
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	eb04 0903 	add.w	r9, r4, r3
 8000e80:	f000 fc5a 	bl	8001738 <_sbrk_r>
 8000e84:	4581      	cmp	r9, r0
 8000e86:	d142      	bne.n	8000f0e <_malloc_r+0xea>
 8000e88:	6821      	ldr	r1, [r4, #0]
 8000e8a:	1a6d      	subs	r5, r5, r1
 8000e8c:	4629      	mov	r1, r5
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f7ff ffa6 	bl	8000de0 <sbrk_aligned>
 8000e94:	3001      	adds	r0, #1
 8000e96:	d03a      	beq.n	8000f0e <_malloc_r+0xea>
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	442b      	add	r3, r5
 8000e9c:	6023      	str	r3, [r4, #0]
 8000e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	bb62      	cbnz	r2, 8000f00 <_malloc_r+0xdc>
 8000ea6:	f8c8 7000 	str.w	r7, [r8]
 8000eaa:	e00f      	b.n	8000ecc <_malloc_r+0xa8>
 8000eac:	6822      	ldr	r2, [r4, #0]
 8000eae:	1b52      	subs	r2, r2, r5
 8000eb0:	d420      	bmi.n	8000ef4 <_malloc_r+0xd0>
 8000eb2:	2a0b      	cmp	r2, #11
 8000eb4:	d917      	bls.n	8000ee6 <_malloc_r+0xc2>
 8000eb6:	1961      	adds	r1, r4, r5
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	6025      	str	r5, [r4, #0]
 8000ebc:	bf18      	it	ne
 8000ebe:	6059      	strne	r1, [r3, #4]
 8000ec0:	6863      	ldr	r3, [r4, #4]
 8000ec2:	bf08      	it	eq
 8000ec4:	f8c8 1000 	streq.w	r1, [r8]
 8000ec8:	5162      	str	r2, [r4, r5]
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	4630      	mov	r0, r6
 8000ece:	f000 f82f 	bl	8000f30 <__malloc_unlock>
 8000ed2:	f104 000b 	add.w	r0, r4, #11
 8000ed6:	1d23      	adds	r3, r4, #4
 8000ed8:	f020 0007 	bic.w	r0, r0, #7
 8000edc:	1ac2      	subs	r2, r0, r3
 8000ede:	bf1c      	itt	ne
 8000ee0:	1a1b      	subne	r3, r3, r0
 8000ee2:	50a3      	strne	r3, [r4, r2]
 8000ee4:	e7af      	b.n	8000e46 <_malloc_r+0x22>
 8000ee6:	6862      	ldr	r2, [r4, #4]
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	bf0c      	ite	eq
 8000eec:	f8c8 2000 	streq.w	r2, [r8]
 8000ef0:	605a      	strne	r2, [r3, #4]
 8000ef2:	e7eb      	b.n	8000ecc <_malloc_r+0xa8>
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	6864      	ldr	r4, [r4, #4]
 8000ef8:	e7ae      	b.n	8000e58 <_malloc_r+0x34>
 8000efa:	463c      	mov	r4, r7
 8000efc:	687f      	ldr	r7, [r7, #4]
 8000efe:	e7b6      	b.n	8000e6e <_malloc_r+0x4a>
 8000f00:	461a      	mov	r2, r3
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	d1fb      	bne.n	8000f00 <_malloc_r+0xdc>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6053      	str	r3, [r2, #4]
 8000f0c:	e7de      	b.n	8000ecc <_malloc_r+0xa8>
 8000f0e:	230c      	movs	r3, #12
 8000f10:	6033      	str	r3, [r6, #0]
 8000f12:	4630      	mov	r0, r6
 8000f14:	f000 f80c 	bl	8000f30 <__malloc_unlock>
 8000f18:	e794      	b.n	8000e44 <_malloc_r+0x20>
 8000f1a:	6005      	str	r5, [r0, #0]
 8000f1c:	e7d6      	b.n	8000ecc <_malloc_r+0xa8>
 8000f1e:	bf00      	nop
 8000f20:	200001c8 	.word	0x200001c8

08000f24 <__malloc_lock>:
 8000f24:	4801      	ldr	r0, [pc, #4]	@ (8000f2c <__malloc_lock+0x8>)
 8000f26:	f7ff bf0e 	b.w	8000d46 <__retarget_lock_acquire_recursive>
 8000f2a:	bf00      	nop
 8000f2c:	200001c0 	.word	0x200001c0

08000f30 <__malloc_unlock>:
 8000f30:	4801      	ldr	r0, [pc, #4]	@ (8000f38 <__malloc_unlock+0x8>)
 8000f32:	f7ff bf09 	b.w	8000d48 <__retarget_lock_release_recursive>
 8000f36:	bf00      	nop
 8000f38:	200001c0 	.word	0x200001c0

08000f3c <__sfputc_r>:
 8000f3c:	6893      	ldr	r3, [r2, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	b410      	push	{r4}
 8000f44:	6093      	str	r3, [r2, #8]
 8000f46:	da08      	bge.n	8000f5a <__sfputc_r+0x1e>
 8000f48:	6994      	ldr	r4, [r2, #24]
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	db01      	blt.n	8000f52 <__sfputc_r+0x16>
 8000f4e:	290a      	cmp	r1, #10
 8000f50:	d103      	bne.n	8000f5a <__sfputc_r+0x1e>
 8000f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f56:	f7ff bde8 	b.w	8000b2a <__swbuf_r>
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	1c58      	adds	r0, r3, #1
 8000f5e:	6010      	str	r0, [r2, #0]
 8000f60:	7019      	strb	r1, [r3, #0]
 8000f62:	4608      	mov	r0, r1
 8000f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <__sfputs_r>:
 8000f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	460f      	mov	r7, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	18d5      	adds	r5, r2, r3
 8000f74:	42ac      	cmp	r4, r5
 8000f76:	d101      	bne.n	8000f7c <__sfputs_r+0x12>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	e007      	b.n	8000f8c <__sfputs_r+0x22>
 8000f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f80:	463a      	mov	r2, r7
 8000f82:	4630      	mov	r0, r6
 8000f84:	f7ff ffda 	bl	8000f3c <__sfputc_r>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d1f3      	bne.n	8000f74 <__sfputs_r+0xa>
 8000f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f90 <_vfiprintf_r>:
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	460d      	mov	r5, r1
 8000f96:	b09d      	sub	sp, #116	@ 0x74
 8000f98:	4614      	mov	r4, r2
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4606      	mov	r6, r0
 8000f9e:	b118      	cbz	r0, 8000fa8 <_vfiprintf_r+0x18>
 8000fa0:	6a03      	ldr	r3, [r0, #32]
 8000fa2:	b90b      	cbnz	r3, 8000fa8 <_vfiprintf_r+0x18>
 8000fa4:	f7ff fcd8 	bl	8000958 <__sinit>
 8000fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000faa:	07d9      	lsls	r1, r3, #31
 8000fac:	d405      	bmi.n	8000fba <_vfiprintf_r+0x2a>
 8000fae:	89ab      	ldrh	r3, [r5, #12]
 8000fb0:	059a      	lsls	r2, r3, #22
 8000fb2:	d402      	bmi.n	8000fba <_vfiprintf_r+0x2a>
 8000fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fb6:	f7ff fec6 	bl	8000d46 <__retarget_lock_acquire_recursive>
 8000fba:	89ab      	ldrh	r3, [r5, #12]
 8000fbc:	071b      	lsls	r3, r3, #28
 8000fbe:	d501      	bpl.n	8000fc4 <_vfiprintf_r+0x34>
 8000fc0:	692b      	ldr	r3, [r5, #16]
 8000fc2:	b99b      	cbnz	r3, 8000fec <_vfiprintf_r+0x5c>
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	f7ff fdee 	bl	8000ba8 <__swsetup_r>
 8000fcc:	b170      	cbz	r0, 8000fec <_vfiprintf_r+0x5c>
 8000fce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fd0:	07dc      	lsls	r4, r3, #31
 8000fd2:	d504      	bpl.n	8000fde <_vfiprintf_r+0x4e>
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	b01d      	add	sp, #116	@ 0x74
 8000fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fde:	89ab      	ldrh	r3, [r5, #12]
 8000fe0:	0598      	lsls	r0, r3, #22
 8000fe2:	d4f7      	bmi.n	8000fd4 <_vfiprintf_r+0x44>
 8000fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fe6:	f7ff feaf 	bl	8000d48 <__retarget_lock_release_recursive>
 8000fea:	e7f3      	b.n	8000fd4 <_vfiprintf_r+0x44>
 8000fec:	2300      	movs	r3, #0
 8000fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ffa:	2330      	movs	r3, #48	@ 0x30
 8000ffc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80011ac <_vfiprintf_r+0x21c>
 8001000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001004:	f04f 0901 	mov.w	r9, #1
 8001008:	4623      	mov	r3, r4
 800100a:	469a      	mov	sl, r3
 800100c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001010:	b10a      	cbz	r2, 8001016 <_vfiprintf_r+0x86>
 8001012:	2a25      	cmp	r2, #37	@ 0x25
 8001014:	d1f9      	bne.n	800100a <_vfiprintf_r+0x7a>
 8001016:	ebba 0b04 	subs.w	fp, sl, r4
 800101a:	d00b      	beq.n	8001034 <_vfiprintf_r+0xa4>
 800101c:	465b      	mov	r3, fp
 800101e:	4622      	mov	r2, r4
 8001020:	4629      	mov	r1, r5
 8001022:	4630      	mov	r0, r6
 8001024:	f7ff ffa1 	bl	8000f6a <__sfputs_r>
 8001028:	3001      	adds	r0, #1
 800102a:	f000 80a7 	beq.w	800117c <_vfiprintf_r+0x1ec>
 800102e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001030:	445a      	add	r2, fp
 8001032:	9209      	str	r2, [sp, #36]	@ 0x24
 8001034:	f89a 3000 	ldrb.w	r3, [sl]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 809f 	beq.w	800117c <_vfiprintf_r+0x1ec>
 800103e:	2300      	movs	r3, #0
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001048:	f10a 0a01 	add.w	sl, sl, #1
 800104c:	9304      	str	r3, [sp, #16]
 800104e:	9307      	str	r3, [sp, #28]
 8001050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001054:	931a      	str	r3, [sp, #104]	@ 0x68
 8001056:	4654      	mov	r4, sl
 8001058:	2205      	movs	r2, #5
 800105a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800105e:	4853      	ldr	r0, [pc, #332]	@ (80011ac <_vfiprintf_r+0x21c>)
 8001060:	f7ff f8d6 	bl	8000210 <memchr>
 8001064:	9a04      	ldr	r2, [sp, #16]
 8001066:	b9d8      	cbnz	r0, 80010a0 <_vfiprintf_r+0x110>
 8001068:	06d1      	lsls	r1, r2, #27
 800106a:	bf44      	itt	mi
 800106c:	2320      	movmi	r3, #32
 800106e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001072:	0713      	lsls	r3, r2, #28
 8001074:	bf44      	itt	mi
 8001076:	232b      	movmi	r3, #43	@ 0x2b
 8001078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800107c:	f89a 3000 	ldrb.w	r3, [sl]
 8001080:	2b2a      	cmp	r3, #42	@ 0x2a
 8001082:	d015      	beq.n	80010b0 <_vfiprintf_r+0x120>
 8001084:	9a07      	ldr	r2, [sp, #28]
 8001086:	4654      	mov	r4, sl
 8001088:	2000      	movs	r0, #0
 800108a:	f04f 0c0a 	mov.w	ip, #10
 800108e:	4621      	mov	r1, r4
 8001090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001094:	3b30      	subs	r3, #48	@ 0x30
 8001096:	2b09      	cmp	r3, #9
 8001098:	d94b      	bls.n	8001132 <_vfiprintf_r+0x1a2>
 800109a:	b1b0      	cbz	r0, 80010ca <_vfiprintf_r+0x13a>
 800109c:	9207      	str	r2, [sp, #28]
 800109e:	e014      	b.n	80010ca <_vfiprintf_r+0x13a>
 80010a0:	eba0 0308 	sub.w	r3, r0, r8
 80010a4:	fa09 f303 	lsl.w	r3, r9, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	9304      	str	r3, [sp, #16]
 80010ac:	46a2      	mov	sl, r4
 80010ae:	e7d2      	b.n	8001056 <_vfiprintf_r+0xc6>
 80010b0:	9b03      	ldr	r3, [sp, #12]
 80010b2:	1d19      	adds	r1, r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	9103      	str	r1, [sp, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bfbb      	ittet	lt
 80010bc:	425b      	neglt	r3, r3
 80010be:	f042 0202 	orrlt.w	r2, r2, #2
 80010c2:	9307      	strge	r3, [sp, #28]
 80010c4:	9307      	strlt	r3, [sp, #28]
 80010c6:	bfb8      	it	lt
 80010c8:	9204      	strlt	r2, [sp, #16]
 80010ca:	7823      	ldrb	r3, [r4, #0]
 80010cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ce:	d10a      	bne.n	80010e6 <_vfiprintf_r+0x156>
 80010d0:	7863      	ldrb	r3, [r4, #1]
 80010d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010d4:	d132      	bne.n	800113c <_vfiprintf_r+0x1ac>
 80010d6:	9b03      	ldr	r3, [sp, #12]
 80010d8:	1d1a      	adds	r2, r3, #4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	9203      	str	r2, [sp, #12]
 80010de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010e2:	3402      	adds	r4, #2
 80010e4:	9305      	str	r3, [sp, #20]
 80010e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80011bc <_vfiprintf_r+0x22c>
 80010ea:	7821      	ldrb	r1, [r4, #0]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4650      	mov	r0, sl
 80010f0:	f7ff f88e 	bl	8000210 <memchr>
 80010f4:	b138      	cbz	r0, 8001106 <_vfiprintf_r+0x176>
 80010f6:	9b04      	ldr	r3, [sp, #16]
 80010f8:	eba0 000a 	sub.w	r0, r0, sl
 80010fc:	2240      	movs	r2, #64	@ 0x40
 80010fe:	4082      	lsls	r2, r0
 8001100:	4313      	orrs	r3, r2
 8001102:	3401      	adds	r4, #1
 8001104:	9304      	str	r3, [sp, #16]
 8001106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800110a:	4829      	ldr	r0, [pc, #164]	@ (80011b0 <_vfiprintf_r+0x220>)
 800110c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001110:	2206      	movs	r2, #6
 8001112:	f7ff f87d 	bl	8000210 <memchr>
 8001116:	2800      	cmp	r0, #0
 8001118:	d03f      	beq.n	800119a <_vfiprintf_r+0x20a>
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <_vfiprintf_r+0x224>)
 800111c:	bb1b      	cbnz	r3, 8001166 <_vfiprintf_r+0x1d6>
 800111e:	9b03      	ldr	r3, [sp, #12]
 8001120:	3307      	adds	r3, #7
 8001122:	f023 0307 	bic.w	r3, r3, #7
 8001126:	3308      	adds	r3, #8
 8001128:	9303      	str	r3, [sp, #12]
 800112a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800112c:	443b      	add	r3, r7
 800112e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001130:	e76a      	b.n	8001008 <_vfiprintf_r+0x78>
 8001132:	fb0c 3202 	mla	r2, ip, r2, r3
 8001136:	460c      	mov	r4, r1
 8001138:	2001      	movs	r0, #1
 800113a:	e7a8      	b.n	800108e <_vfiprintf_r+0xfe>
 800113c:	2300      	movs	r3, #0
 800113e:	3401      	adds	r4, #1
 8001140:	9305      	str	r3, [sp, #20]
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 0c0a 	mov.w	ip, #10
 8001148:	4620      	mov	r0, r4
 800114a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800114e:	3a30      	subs	r2, #48	@ 0x30
 8001150:	2a09      	cmp	r2, #9
 8001152:	d903      	bls.n	800115c <_vfiprintf_r+0x1cc>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0c6      	beq.n	80010e6 <_vfiprintf_r+0x156>
 8001158:	9105      	str	r1, [sp, #20]
 800115a:	e7c4      	b.n	80010e6 <_vfiprintf_r+0x156>
 800115c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001160:	4604      	mov	r4, r0
 8001162:	2301      	movs	r3, #1
 8001164:	e7f0      	b.n	8001148 <_vfiprintf_r+0x1b8>
 8001166:	ab03      	add	r3, sp, #12
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	462a      	mov	r2, r5
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <_vfiprintf_r+0x228>)
 800116e:	a904      	add	r1, sp, #16
 8001170:	4630      	mov	r0, r6
 8001172:	f3af 8000 	nop.w
 8001176:	4607      	mov	r7, r0
 8001178:	1c78      	adds	r0, r7, #1
 800117a:	d1d6      	bne.n	800112a <_vfiprintf_r+0x19a>
 800117c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	d405      	bmi.n	800118e <_vfiprintf_r+0x1fe>
 8001182:	89ab      	ldrh	r3, [r5, #12]
 8001184:	059a      	lsls	r2, r3, #22
 8001186:	d402      	bmi.n	800118e <_vfiprintf_r+0x1fe>
 8001188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800118a:	f7ff fddd 	bl	8000d48 <__retarget_lock_release_recursive>
 800118e:	89ab      	ldrh	r3, [r5, #12]
 8001190:	065b      	lsls	r3, r3, #25
 8001192:	f53f af1f 	bmi.w	8000fd4 <_vfiprintf_r+0x44>
 8001196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001198:	e71e      	b.n	8000fd8 <_vfiprintf_r+0x48>
 800119a:	ab03      	add	r3, sp, #12
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	462a      	mov	r2, r5
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <_vfiprintf_r+0x228>)
 80011a2:	a904      	add	r1, sp, #16
 80011a4:	4630      	mov	r0, r6
 80011a6:	f000 f879 	bl	800129c <_printf_i>
 80011aa:	e7e4      	b.n	8001176 <_vfiprintf_r+0x1e6>
 80011ac:	08001812 	.word	0x08001812
 80011b0:	0800181c 	.word	0x0800181c
 80011b4:	00000000 	.word	0x00000000
 80011b8:	08000f6b 	.word	0x08000f6b
 80011bc:	08001818 	.word	0x08001818

080011c0 <_printf_common>:
 80011c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c4:	4616      	mov	r6, r2
 80011c6:	4698      	mov	r8, r3
 80011c8:	688a      	ldr	r2, [r1, #8]
 80011ca:	690b      	ldr	r3, [r1, #16]
 80011cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80011d0:	4293      	cmp	r3, r2
 80011d2:	bfb8      	it	lt
 80011d4:	4613      	movlt	r3, r2
 80011d6:	6033      	str	r3, [r6, #0]
 80011d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80011dc:	4607      	mov	r7, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	b10a      	cbz	r2, 80011e6 <_printf_common+0x26>
 80011e2:	3301      	adds	r3, #1
 80011e4:	6033      	str	r3, [r6, #0]
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	0699      	lsls	r1, r3, #26
 80011ea:	bf42      	ittt	mi
 80011ec:	6833      	ldrmi	r3, [r6, #0]
 80011ee:	3302      	addmi	r3, #2
 80011f0:	6033      	strmi	r3, [r6, #0]
 80011f2:	6825      	ldr	r5, [r4, #0]
 80011f4:	f015 0506 	ands.w	r5, r5, #6
 80011f8:	d106      	bne.n	8001208 <_printf_common+0x48>
 80011fa:	f104 0a19 	add.w	sl, r4, #25
 80011fe:	68e3      	ldr	r3, [r4, #12]
 8001200:	6832      	ldr	r2, [r6, #0]
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	42ab      	cmp	r3, r5
 8001206:	dc26      	bgt.n	8001256 <_printf_common+0x96>
 8001208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	3b00      	subs	r3, #0
 8001210:	bf18      	it	ne
 8001212:	2301      	movne	r3, #1
 8001214:	0692      	lsls	r2, r2, #26
 8001216:	d42b      	bmi.n	8001270 <_printf_common+0xb0>
 8001218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800121c:	4641      	mov	r1, r8
 800121e:	4638      	mov	r0, r7
 8001220:	47c8      	blx	r9
 8001222:	3001      	adds	r0, #1
 8001224:	d01e      	beq.n	8001264 <_printf_common+0xa4>
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	6922      	ldr	r2, [r4, #16]
 800122a:	f003 0306 	and.w	r3, r3, #6
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf02      	ittt	eq
 8001232:	68e5      	ldreq	r5, [r4, #12]
 8001234:	6833      	ldreq	r3, [r6, #0]
 8001236:	1aed      	subeq	r5, r5, r3
 8001238:	68a3      	ldr	r3, [r4, #8]
 800123a:	bf0c      	ite	eq
 800123c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001240:	2500      	movne	r5, #0
 8001242:	4293      	cmp	r3, r2
 8001244:	bfc4      	itt	gt
 8001246:	1a9b      	subgt	r3, r3, r2
 8001248:	18ed      	addgt	r5, r5, r3
 800124a:	2600      	movs	r6, #0
 800124c:	341a      	adds	r4, #26
 800124e:	42b5      	cmp	r5, r6
 8001250:	d11a      	bne.n	8001288 <_printf_common+0xc8>
 8001252:	2000      	movs	r0, #0
 8001254:	e008      	b.n	8001268 <_printf_common+0xa8>
 8001256:	2301      	movs	r3, #1
 8001258:	4652      	mov	r2, sl
 800125a:	4641      	mov	r1, r8
 800125c:	4638      	mov	r0, r7
 800125e:	47c8      	blx	r9
 8001260:	3001      	adds	r0, #1
 8001262:	d103      	bne.n	800126c <_printf_common+0xac>
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126c:	3501      	adds	r5, #1
 800126e:	e7c6      	b.n	80011fe <_printf_common+0x3e>
 8001270:	18e1      	adds	r1, r4, r3
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	2030      	movs	r0, #48	@ 0x30
 8001276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800127a:	4422      	add	r2, r4
 800127c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001284:	3302      	adds	r3, #2
 8001286:	e7c7      	b.n	8001218 <_printf_common+0x58>
 8001288:	2301      	movs	r3, #1
 800128a:	4622      	mov	r2, r4
 800128c:	4641      	mov	r1, r8
 800128e:	4638      	mov	r0, r7
 8001290:	47c8      	blx	r9
 8001292:	3001      	adds	r0, #1
 8001294:	d0e6      	beq.n	8001264 <_printf_common+0xa4>
 8001296:	3601      	adds	r6, #1
 8001298:	e7d9      	b.n	800124e <_printf_common+0x8e>
	...

0800129c <_printf_i>:
 800129c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012a0:	7e0f      	ldrb	r7, [r1, #24]
 80012a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80012a4:	2f78      	cmp	r7, #120	@ 0x78
 80012a6:	4691      	mov	r9, r2
 80012a8:	4680      	mov	r8, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	469a      	mov	sl, r3
 80012ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80012b2:	d807      	bhi.n	80012c4 <_printf_i+0x28>
 80012b4:	2f62      	cmp	r7, #98	@ 0x62
 80012b6:	d80a      	bhi.n	80012ce <_printf_i+0x32>
 80012b8:	2f00      	cmp	r7, #0
 80012ba:	f000 80d1 	beq.w	8001460 <_printf_i+0x1c4>
 80012be:	2f58      	cmp	r7, #88	@ 0x58
 80012c0:	f000 80b8 	beq.w	8001434 <_printf_i+0x198>
 80012c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80012cc:	e03a      	b.n	8001344 <_printf_i+0xa8>
 80012ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80012d2:	2b15      	cmp	r3, #21
 80012d4:	d8f6      	bhi.n	80012c4 <_printf_i+0x28>
 80012d6:	a101      	add	r1, pc, #4	@ (adr r1, 80012dc <_printf_i+0x40>)
 80012d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012dc:	08001335 	.word	0x08001335
 80012e0:	08001349 	.word	0x08001349
 80012e4:	080012c5 	.word	0x080012c5
 80012e8:	080012c5 	.word	0x080012c5
 80012ec:	080012c5 	.word	0x080012c5
 80012f0:	080012c5 	.word	0x080012c5
 80012f4:	08001349 	.word	0x08001349
 80012f8:	080012c5 	.word	0x080012c5
 80012fc:	080012c5 	.word	0x080012c5
 8001300:	080012c5 	.word	0x080012c5
 8001304:	080012c5 	.word	0x080012c5
 8001308:	08001447 	.word	0x08001447
 800130c:	08001373 	.word	0x08001373
 8001310:	08001401 	.word	0x08001401
 8001314:	080012c5 	.word	0x080012c5
 8001318:	080012c5 	.word	0x080012c5
 800131c:	08001469 	.word	0x08001469
 8001320:	080012c5 	.word	0x080012c5
 8001324:	08001373 	.word	0x08001373
 8001328:	080012c5 	.word	0x080012c5
 800132c:	080012c5 	.word	0x080012c5
 8001330:	08001409 	.word	0x08001409
 8001334:	6833      	ldr	r3, [r6, #0]
 8001336:	1d1a      	adds	r2, r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6032      	str	r2, [r6, #0]
 800133c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001344:	2301      	movs	r3, #1
 8001346:	e09c      	b.n	8001482 <_printf_i+0x1e6>
 8001348:	6833      	ldr	r3, [r6, #0]
 800134a:	6820      	ldr	r0, [r4, #0]
 800134c:	1d19      	adds	r1, r3, #4
 800134e:	6031      	str	r1, [r6, #0]
 8001350:	0606      	lsls	r6, r0, #24
 8001352:	d501      	bpl.n	8001358 <_printf_i+0xbc>
 8001354:	681d      	ldr	r5, [r3, #0]
 8001356:	e003      	b.n	8001360 <_printf_i+0xc4>
 8001358:	0645      	lsls	r5, r0, #25
 800135a:	d5fb      	bpl.n	8001354 <_printf_i+0xb8>
 800135c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001360:	2d00      	cmp	r5, #0
 8001362:	da03      	bge.n	800136c <_printf_i+0xd0>
 8001364:	232d      	movs	r3, #45	@ 0x2d
 8001366:	426d      	negs	r5, r5
 8001368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800136c:	4858      	ldr	r0, [pc, #352]	@ (80014d0 <_printf_i+0x234>)
 800136e:	230a      	movs	r3, #10
 8001370:	e011      	b.n	8001396 <_printf_i+0xfa>
 8001372:	6821      	ldr	r1, [r4, #0]
 8001374:	6833      	ldr	r3, [r6, #0]
 8001376:	0608      	lsls	r0, r1, #24
 8001378:	f853 5b04 	ldr.w	r5, [r3], #4
 800137c:	d402      	bmi.n	8001384 <_printf_i+0xe8>
 800137e:	0649      	lsls	r1, r1, #25
 8001380:	bf48      	it	mi
 8001382:	b2ad      	uxthmi	r5, r5
 8001384:	2f6f      	cmp	r7, #111	@ 0x6f
 8001386:	4852      	ldr	r0, [pc, #328]	@ (80014d0 <_printf_i+0x234>)
 8001388:	6033      	str	r3, [r6, #0]
 800138a:	bf14      	ite	ne
 800138c:	230a      	movne	r3, #10
 800138e:	2308      	moveq	r3, #8
 8001390:	2100      	movs	r1, #0
 8001392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001396:	6866      	ldr	r6, [r4, #4]
 8001398:	60a6      	str	r6, [r4, #8]
 800139a:	2e00      	cmp	r6, #0
 800139c:	db05      	blt.n	80013aa <_printf_i+0x10e>
 800139e:	6821      	ldr	r1, [r4, #0]
 80013a0:	432e      	orrs	r6, r5
 80013a2:	f021 0104 	bic.w	r1, r1, #4
 80013a6:	6021      	str	r1, [r4, #0]
 80013a8:	d04b      	beq.n	8001442 <_printf_i+0x1a6>
 80013aa:	4616      	mov	r6, r2
 80013ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80013b0:	fb03 5711 	mls	r7, r3, r1, r5
 80013b4:	5dc7      	ldrb	r7, [r0, r7]
 80013b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80013ba:	462f      	mov	r7, r5
 80013bc:	42bb      	cmp	r3, r7
 80013be:	460d      	mov	r5, r1
 80013c0:	d9f4      	bls.n	80013ac <_printf_i+0x110>
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d10b      	bne.n	80013de <_printf_i+0x142>
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	07df      	lsls	r7, r3, #31
 80013ca:	d508      	bpl.n	80013de <_printf_i+0x142>
 80013cc:	6923      	ldr	r3, [r4, #16]
 80013ce:	6861      	ldr	r1, [r4, #4]
 80013d0:	4299      	cmp	r1, r3
 80013d2:	bfde      	ittt	le
 80013d4:	2330      	movle	r3, #48	@ 0x30
 80013d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013de:	1b92      	subs	r2, r2, r6
 80013e0:	6122      	str	r2, [r4, #16]
 80013e2:	f8cd a000 	str.w	sl, [sp]
 80013e6:	464b      	mov	r3, r9
 80013e8:	aa03      	add	r2, sp, #12
 80013ea:	4621      	mov	r1, r4
 80013ec:	4640      	mov	r0, r8
 80013ee:	f7ff fee7 	bl	80011c0 <_printf_common>
 80013f2:	3001      	adds	r0, #1
 80013f4:	d14a      	bne.n	800148c <_printf_i+0x1f0>
 80013f6:	f04f 30ff 	mov.w	r0, #4294967295
 80013fa:	b004      	add	sp, #16
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	f043 0320 	orr.w	r3, r3, #32
 8001406:	6023      	str	r3, [r4, #0]
 8001408:	4832      	ldr	r0, [pc, #200]	@ (80014d4 <_printf_i+0x238>)
 800140a:	2778      	movs	r7, #120	@ 0x78
 800140c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	6831      	ldr	r1, [r6, #0]
 8001414:	061f      	lsls	r7, r3, #24
 8001416:	f851 5b04 	ldr.w	r5, [r1], #4
 800141a:	d402      	bmi.n	8001422 <_printf_i+0x186>
 800141c:	065f      	lsls	r7, r3, #25
 800141e:	bf48      	it	mi
 8001420:	b2ad      	uxthmi	r5, r5
 8001422:	6031      	str	r1, [r6, #0]
 8001424:	07d9      	lsls	r1, r3, #31
 8001426:	bf44      	itt	mi
 8001428:	f043 0320 	orrmi.w	r3, r3, #32
 800142c:	6023      	strmi	r3, [r4, #0]
 800142e:	b11d      	cbz	r5, 8001438 <_printf_i+0x19c>
 8001430:	2310      	movs	r3, #16
 8001432:	e7ad      	b.n	8001390 <_printf_i+0xf4>
 8001434:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <_printf_i+0x234>)
 8001436:	e7e9      	b.n	800140c <_printf_i+0x170>
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	f023 0320 	bic.w	r3, r3, #32
 800143e:	6023      	str	r3, [r4, #0]
 8001440:	e7f6      	b.n	8001430 <_printf_i+0x194>
 8001442:	4616      	mov	r6, r2
 8001444:	e7bd      	b.n	80013c2 <_printf_i+0x126>
 8001446:	6833      	ldr	r3, [r6, #0]
 8001448:	6825      	ldr	r5, [r4, #0]
 800144a:	6961      	ldr	r1, [r4, #20]
 800144c:	1d18      	adds	r0, r3, #4
 800144e:	6030      	str	r0, [r6, #0]
 8001450:	062e      	lsls	r6, r5, #24
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	d501      	bpl.n	800145a <_printf_i+0x1be>
 8001456:	6019      	str	r1, [r3, #0]
 8001458:	e002      	b.n	8001460 <_printf_i+0x1c4>
 800145a:	0668      	lsls	r0, r5, #25
 800145c:	d5fb      	bpl.n	8001456 <_printf_i+0x1ba>
 800145e:	8019      	strh	r1, [r3, #0]
 8001460:	2300      	movs	r3, #0
 8001462:	6123      	str	r3, [r4, #16]
 8001464:	4616      	mov	r6, r2
 8001466:	e7bc      	b.n	80013e2 <_printf_i+0x146>
 8001468:	6833      	ldr	r3, [r6, #0]
 800146a:	1d1a      	adds	r2, r3, #4
 800146c:	6032      	str	r2, [r6, #0]
 800146e:	681e      	ldr	r6, [r3, #0]
 8001470:	6862      	ldr	r2, [r4, #4]
 8001472:	2100      	movs	r1, #0
 8001474:	4630      	mov	r0, r6
 8001476:	f7fe fecb 	bl	8000210 <memchr>
 800147a:	b108      	cbz	r0, 8001480 <_printf_i+0x1e4>
 800147c:	1b80      	subs	r0, r0, r6
 800147e:	6060      	str	r0, [r4, #4]
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	6123      	str	r3, [r4, #16]
 8001484:	2300      	movs	r3, #0
 8001486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800148a:	e7aa      	b.n	80013e2 <_printf_i+0x146>
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	4632      	mov	r2, r6
 8001490:	4649      	mov	r1, r9
 8001492:	4640      	mov	r0, r8
 8001494:	47d0      	blx	sl
 8001496:	3001      	adds	r0, #1
 8001498:	d0ad      	beq.n	80013f6 <_printf_i+0x15a>
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	079b      	lsls	r3, r3, #30
 800149e:	d413      	bmi.n	80014c8 <_printf_i+0x22c>
 80014a0:	68e0      	ldr	r0, [r4, #12]
 80014a2:	9b03      	ldr	r3, [sp, #12]
 80014a4:	4298      	cmp	r0, r3
 80014a6:	bfb8      	it	lt
 80014a8:	4618      	movlt	r0, r3
 80014aa:	e7a6      	b.n	80013fa <_printf_i+0x15e>
 80014ac:	2301      	movs	r3, #1
 80014ae:	4632      	mov	r2, r6
 80014b0:	4649      	mov	r1, r9
 80014b2:	4640      	mov	r0, r8
 80014b4:	47d0      	blx	sl
 80014b6:	3001      	adds	r0, #1
 80014b8:	d09d      	beq.n	80013f6 <_printf_i+0x15a>
 80014ba:	3501      	adds	r5, #1
 80014bc:	68e3      	ldr	r3, [r4, #12]
 80014be:	9903      	ldr	r1, [sp, #12]
 80014c0:	1a5b      	subs	r3, r3, r1
 80014c2:	42ab      	cmp	r3, r5
 80014c4:	dcf2      	bgt.n	80014ac <_printf_i+0x210>
 80014c6:	e7eb      	b.n	80014a0 <_printf_i+0x204>
 80014c8:	2500      	movs	r5, #0
 80014ca:	f104 0619 	add.w	r6, r4, #25
 80014ce:	e7f5      	b.n	80014bc <_printf_i+0x220>
 80014d0:	08001823 	.word	0x08001823
 80014d4:	08001834 	.word	0x08001834

080014d8 <__sflush_r>:
 80014d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014e0:	0716      	lsls	r6, r2, #28
 80014e2:	4605      	mov	r5, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	d454      	bmi.n	8001592 <__sflush_r+0xba>
 80014e8:	684b      	ldr	r3, [r1, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	dc02      	bgt.n	80014f4 <__sflush_r+0x1c>
 80014ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd48      	ble.n	8001586 <__sflush_r+0xae>
 80014f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014f6:	2e00      	cmp	r6, #0
 80014f8:	d045      	beq.n	8001586 <__sflush_r+0xae>
 80014fa:	2300      	movs	r3, #0
 80014fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001500:	682f      	ldr	r7, [r5, #0]
 8001502:	6a21      	ldr	r1, [r4, #32]
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	d030      	beq.n	800156a <__sflush_r+0x92>
 8001508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800150a:	89a3      	ldrh	r3, [r4, #12]
 800150c:	0759      	lsls	r1, r3, #29
 800150e:	d505      	bpl.n	800151c <__sflush_r+0x44>
 8001510:	6863      	ldr	r3, [r4, #4]
 8001512:	1ad2      	subs	r2, r2, r3
 8001514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001516:	b10b      	cbz	r3, 800151c <__sflush_r+0x44>
 8001518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	2300      	movs	r3, #0
 800151e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001520:	6a21      	ldr	r1, [r4, #32]
 8001522:	4628      	mov	r0, r5
 8001524:	47b0      	blx	r6
 8001526:	1c43      	adds	r3, r0, #1
 8001528:	89a3      	ldrh	r3, [r4, #12]
 800152a:	d106      	bne.n	800153a <__sflush_r+0x62>
 800152c:	6829      	ldr	r1, [r5, #0]
 800152e:	291d      	cmp	r1, #29
 8001530:	d82b      	bhi.n	800158a <__sflush_r+0xb2>
 8001532:	4a2a      	ldr	r2, [pc, #168]	@ (80015dc <__sflush_r+0x104>)
 8001534:	40ca      	lsrs	r2, r1
 8001536:	07d6      	lsls	r6, r2, #31
 8001538:	d527      	bpl.n	800158a <__sflush_r+0xb2>
 800153a:	2200      	movs	r2, #0
 800153c:	6062      	str	r2, [r4, #4]
 800153e:	04d9      	lsls	r1, r3, #19
 8001540:	6922      	ldr	r2, [r4, #16]
 8001542:	6022      	str	r2, [r4, #0]
 8001544:	d504      	bpl.n	8001550 <__sflush_r+0x78>
 8001546:	1c42      	adds	r2, r0, #1
 8001548:	d101      	bne.n	800154e <__sflush_r+0x76>
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	b903      	cbnz	r3, 8001550 <__sflush_r+0x78>
 800154e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001552:	602f      	str	r7, [r5, #0]
 8001554:	b1b9      	cbz	r1, 8001586 <__sflush_r+0xae>
 8001556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800155a:	4299      	cmp	r1, r3
 800155c:	d002      	beq.n	8001564 <__sflush_r+0x8c>
 800155e:	4628      	mov	r0, r5
 8001560:	f7ff fbf4 	bl	8000d4c <_free_r>
 8001564:	2300      	movs	r3, #0
 8001566:	6363      	str	r3, [r4, #52]	@ 0x34
 8001568:	e00d      	b.n	8001586 <__sflush_r+0xae>
 800156a:	2301      	movs	r3, #1
 800156c:	4628      	mov	r0, r5
 800156e:	47b0      	blx	r6
 8001570:	4602      	mov	r2, r0
 8001572:	1c50      	adds	r0, r2, #1
 8001574:	d1c9      	bne.n	800150a <__sflush_r+0x32>
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0c6      	beq.n	800150a <__sflush_r+0x32>
 800157c:	2b1d      	cmp	r3, #29
 800157e:	d001      	beq.n	8001584 <__sflush_r+0xac>
 8001580:	2b16      	cmp	r3, #22
 8001582:	d11e      	bne.n	80015c2 <__sflush_r+0xea>
 8001584:	602f      	str	r7, [r5, #0]
 8001586:	2000      	movs	r0, #0
 8001588:	e022      	b.n	80015d0 <__sflush_r+0xf8>
 800158a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800158e:	b21b      	sxth	r3, r3
 8001590:	e01b      	b.n	80015ca <__sflush_r+0xf2>
 8001592:	690f      	ldr	r7, [r1, #16]
 8001594:	2f00      	cmp	r7, #0
 8001596:	d0f6      	beq.n	8001586 <__sflush_r+0xae>
 8001598:	0793      	lsls	r3, r2, #30
 800159a:	680e      	ldr	r6, [r1, #0]
 800159c:	bf08      	it	eq
 800159e:	694b      	ldreq	r3, [r1, #20]
 80015a0:	600f      	str	r7, [r1, #0]
 80015a2:	bf18      	it	ne
 80015a4:	2300      	movne	r3, #0
 80015a6:	eba6 0807 	sub.w	r8, r6, r7
 80015aa:	608b      	str	r3, [r1, #8]
 80015ac:	f1b8 0f00 	cmp.w	r8, #0
 80015b0:	dde9      	ble.n	8001586 <__sflush_r+0xae>
 80015b2:	6a21      	ldr	r1, [r4, #32]
 80015b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80015b6:	4643      	mov	r3, r8
 80015b8:	463a      	mov	r2, r7
 80015ba:	4628      	mov	r0, r5
 80015bc:	47b0      	blx	r6
 80015be:	2800      	cmp	r0, #0
 80015c0:	dc08      	bgt.n	80015d4 <__sflush_r+0xfc>
 80015c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ca:	81a3      	strh	r3, [r4, #12]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015d4:	4407      	add	r7, r0
 80015d6:	eba8 0800 	sub.w	r8, r8, r0
 80015da:	e7e7      	b.n	80015ac <__sflush_r+0xd4>
 80015dc:	20400001 	.word	0x20400001

080015e0 <_fflush_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	690b      	ldr	r3, [r1, #16]
 80015e4:	4605      	mov	r5, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	b913      	cbnz	r3, 80015f0 <_fflush_r+0x10>
 80015ea:	2500      	movs	r5, #0
 80015ec:	4628      	mov	r0, r5
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
 80015f0:	b118      	cbz	r0, 80015fa <_fflush_r+0x1a>
 80015f2:	6a03      	ldr	r3, [r0, #32]
 80015f4:	b90b      	cbnz	r3, 80015fa <_fflush_r+0x1a>
 80015f6:	f7ff f9af 	bl	8000958 <__sinit>
 80015fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f3      	beq.n	80015ea <_fflush_r+0xa>
 8001602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001604:	07d0      	lsls	r0, r2, #31
 8001606:	d404      	bmi.n	8001612 <_fflush_r+0x32>
 8001608:	0599      	lsls	r1, r3, #22
 800160a:	d402      	bmi.n	8001612 <_fflush_r+0x32>
 800160c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800160e:	f7ff fb9a 	bl	8000d46 <__retarget_lock_acquire_recursive>
 8001612:	4628      	mov	r0, r5
 8001614:	4621      	mov	r1, r4
 8001616:	f7ff ff5f 	bl	80014d8 <__sflush_r>
 800161a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800161c:	07da      	lsls	r2, r3, #31
 800161e:	4605      	mov	r5, r0
 8001620:	d4e4      	bmi.n	80015ec <_fflush_r+0xc>
 8001622:	89a3      	ldrh	r3, [r4, #12]
 8001624:	059b      	lsls	r3, r3, #22
 8001626:	d4e1      	bmi.n	80015ec <_fflush_r+0xc>
 8001628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800162a:	f7ff fb8d 	bl	8000d48 <__retarget_lock_release_recursive>
 800162e:	e7dd      	b.n	80015ec <_fflush_r+0xc>

08001630 <__swhatbuf_r>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	460c      	mov	r4, r1
 8001634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001638:	2900      	cmp	r1, #0
 800163a:	b096      	sub	sp, #88	@ 0x58
 800163c:	4615      	mov	r5, r2
 800163e:	461e      	mov	r6, r3
 8001640:	da0d      	bge.n	800165e <__swhatbuf_r+0x2e>
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	bf14      	ite	ne
 800164e:	2340      	movne	r3, #64	@ 0x40
 8001650:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001654:	2000      	movs	r0, #0
 8001656:	6031      	str	r1, [r6, #0]
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	b016      	add	sp, #88	@ 0x58
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	466a      	mov	r2, sp
 8001660:	f000 f848 	bl	80016f4 <_fstat_r>
 8001664:	2800      	cmp	r0, #0
 8001666:	dbec      	blt.n	8001642 <__swhatbuf_r+0x12>
 8001668:	9901      	ldr	r1, [sp, #4]
 800166a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800166e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001672:	4259      	negs	r1, r3
 8001674:	4159      	adcs	r1, r3
 8001676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167a:	e7eb      	b.n	8001654 <__swhatbuf_r+0x24>

0800167c <__smakebuf_r>:
 800167c:	898b      	ldrh	r3, [r1, #12]
 800167e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001680:	079d      	lsls	r5, r3, #30
 8001682:	4606      	mov	r6, r0
 8001684:	460c      	mov	r4, r1
 8001686:	d507      	bpl.n	8001698 <__smakebuf_r+0x1c>
 8001688:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	6123      	str	r3, [r4, #16]
 8001690:	2301      	movs	r3, #1
 8001692:	6163      	str	r3, [r4, #20]
 8001694:	b003      	add	sp, #12
 8001696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001698:	ab01      	add	r3, sp, #4
 800169a:	466a      	mov	r2, sp
 800169c:	f7ff ffc8 	bl	8001630 <__swhatbuf_r>
 80016a0:	9f00      	ldr	r7, [sp, #0]
 80016a2:	4605      	mov	r5, r0
 80016a4:	4639      	mov	r1, r7
 80016a6:	4630      	mov	r0, r6
 80016a8:	f7ff fbbc 	bl	8000e24 <_malloc_r>
 80016ac:	b948      	cbnz	r0, 80016c2 <__smakebuf_r+0x46>
 80016ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b2:	059a      	lsls	r2, r3, #22
 80016b4:	d4ee      	bmi.n	8001694 <__smakebuf_r+0x18>
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0302 	orr.w	r3, r3, #2
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	e7e2      	b.n	8001688 <__smakebuf_r+0xc>
 80016c2:	89a3      	ldrh	r3, [r4, #12]
 80016c4:	6020      	str	r0, [r4, #0]
 80016c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ca:	81a3      	strh	r3, [r4, #12]
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016d2:	b15b      	cbz	r3, 80016ec <__smakebuf_r+0x70>
 80016d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d8:	4630      	mov	r0, r6
 80016da:	f000 f81d 	bl	8001718 <_isatty_r>
 80016de:	b128      	cbz	r0, 80016ec <__smakebuf_r+0x70>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	431d      	orrs	r5, r3
 80016f0:	81a5      	strh	r5, [r4, #12]
 80016f2:	e7cf      	b.n	8001694 <__smakebuf_r+0x18>

080016f4 <_fstat_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4d07      	ldr	r5, [pc, #28]	@ (8001714 <_fstat_r+0x20>)
 80016f8:	2300      	movs	r3, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	602b      	str	r3, [r5, #0]
 8001702:	f7fe ff64 	bl	80005ce <_fstat>
 8001706:	1c43      	adds	r3, r0, #1
 8001708:	d102      	bne.n	8001710 <_fstat_r+0x1c>
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	b103      	cbz	r3, 8001710 <_fstat_r+0x1c>
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	bd38      	pop	{r3, r4, r5, pc}
 8001712:	bf00      	nop
 8001714:	200001bc 	.word	0x200001bc

08001718 <_isatty_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4d06      	ldr	r5, [pc, #24]	@ (8001734 <_isatty_r+0x1c>)
 800171c:	2300      	movs	r3, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	f7fe ff63 	bl	80005ee <_isatty>
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	d102      	bne.n	8001732 <_isatty_r+0x1a>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	b103      	cbz	r3, 8001732 <_isatty_r+0x1a>
 8001730:	6023      	str	r3, [r4, #0]
 8001732:	bd38      	pop	{r3, r4, r5, pc}
 8001734:	200001bc 	.word	0x200001bc

08001738 <_sbrk_r>:
 8001738:	b538      	push	{r3, r4, r5, lr}
 800173a:	4d06      	ldr	r5, [pc, #24]	@ (8001754 <_sbrk_r+0x1c>)
 800173c:	2300      	movs	r3, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	602b      	str	r3, [r5, #0]
 8001744:	f7fe ff6c 	bl	8000620 <_sbrk>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d102      	bne.n	8001752 <_sbrk_r+0x1a>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	b103      	cbz	r3, 8001752 <_sbrk_r+0x1a>
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	200001bc 	.word	0x200001bc

08001758 <_init>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr

08001764 <_fini>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr
