
DHT22_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001564  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001734  08001734  00002734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b0  080017b0  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080017b0  080017b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017b8  080017b8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b8  080017b8  000027b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017bc  080017bc  000027bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080017c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  08001820  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001820  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011f7  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000590  00000000  00000000  00004287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00004818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000104  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a930  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d78  00000000  00000000  0001f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090eae  00000000  00000000  0002113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1fea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  000b2030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b2cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800171c 	.word	0x0800171c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800171c 	.word	0x0800171c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
char buffer[50];
void TIM2_Init(void);
void Delay_us(uint16_t us);
uint8_t Read_DHT22_Byte(void);

int main(void) {
 80002b0:	b5b0      	push	{r4, r5, r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af02      	add	r7, sp, #8
    // Initialize UART and Timer
    uart_rxtx_init(); // Initialize UART2 for TX/RX
 80002b6:	f000 f9e5 	bl	8000684 <uart_rxtx_init>
    TIM2_Init();
 80002ba:	f000 f8c3 	bl	8000444 <TIM2_Init>

    // Enable GPIOA clock
    RCC->AHB1ENR |= GPIOAEN;
 80002be:	4b59      	ldr	r3, [pc, #356]	@ (8000424 <main+0x174>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a58      	ldr	r2, [pc, #352]	@ (8000424 <main+0x174>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA5 (DHT22 data pin)
    GPIOA->MODER |= (1 << 10);     // PA5 as output
 80002ca:	4b57      	ldr	r3, [pc, #348]	@ (8000428 <main+0x178>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a56      	ldr	r2, [pc, #344]	@ (8000428 <main+0x178>)
 80002d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d4:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 5);    // Push-pull
 80002d6:	4b54      	ldr	r3, [pc, #336]	@ (8000428 <main+0x178>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a53      	ldr	r2, [pc, #332]	@ (8000428 <main+0x178>)
 80002dc:	f023 0320 	bic.w	r3, r3, #32
 80002e0:	6053      	str	r3, [r2, #4]
    GPIOA->PUPDR &= ~(3 << 10);    // Disable internal pull-up
 80002e2:	4b51      	ldr	r3, [pc, #324]	@ (8000428 <main+0x178>)
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4a50      	ldr	r2, [pc, #320]	@ (8000428 <main+0x178>)
 80002e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ec:	60d3      	str	r3, [r2, #12]

    while (1) {
        // Send start signal to DHT22
        GPIOA->ODR &= ~DHT22_PIN;      // Pull low
 80002ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000428 <main+0x178>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a4d      	ldr	r2, [pc, #308]	@ (8000428 <main+0x178>)
 80002f4:	f023 0320 	bic.w	r3, r3, #32
 80002f8:	6153      	str	r3, [r2, #20]
        Delay_us(1000);                // 1 ms
 80002fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fe:	f000 f8c1 	bl	8000484 <Delay_us>
        GPIOA->ODR |= DHT22_PIN;       // Release bus
 8000302:	4b49      	ldr	r3, [pc, #292]	@ (8000428 <main+0x178>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a48      	ldr	r2, [pc, #288]	@ (8000428 <main+0x178>)
 8000308:	f043 0320 	orr.w	r3, r3, #32
 800030c:	6153      	str	r3, [r2, #20]
        GPIOA->MODER &= ~(3 << 10);    // Switch PA5 to input
 800030e:	4b46      	ldr	r3, [pc, #280]	@ (8000428 <main+0x178>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a45      	ldr	r2, [pc, #276]	@ (8000428 <main+0x178>)
 8000314:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000318:	6013      	str	r3, [r2, #0]
        Delay_us(30);                  // Wait 30 Âµs
 800031a:	201e      	movs	r0, #30
 800031c:	f000 f8b2 	bl	8000484 <Delay_us>

        // Wait for DHT22 response (with timeout)
        uint32_t timeout = 1000000;
 8000320:	4b42      	ldr	r3, [pc, #264]	@ (800042c <main+0x17c>)
 8000322:	617b      	str	r3, [r7, #20]
        while ((GPIOA->IDR & DHT22_PIN) && timeout--); // Wait until low
 8000324:	bf00      	nop
 8000326:	4b40      	ldr	r3, [pc, #256]	@ (8000428 <main+0x178>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	2b00      	cmp	r3, #0
 8000330:	d004      	beq.n	800033c <main+0x8c>
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	1e5a      	subs	r2, r3, #1
 8000336:	617a      	str	r2, [r7, #20]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f4      	bne.n	8000326 <main+0x76>
        if (!timeout) {
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d103      	bne.n	800034a <main+0x9a>
            printf("Sensor error!\r\n");
 8000342:	483b      	ldr	r0, [pc, #236]	@ (8000430 <main+0x180>)
 8000344:	f000 fb88 	bl	8000a58 <puts>
            continue;
 8000348:	e06b      	b.n	8000422 <main+0x172>
        }
        timeout = 1000000;
 800034a:	4b38      	ldr	r3, [pc, #224]	@ (800042c <main+0x17c>)
 800034c:	617b      	str	r3, [r7, #20]
        while (!(GPIOA->IDR & DHT22_PIN) && timeout--); // Wait until high
 800034e:	bf00      	nop
 8000350:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <main+0x178>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	2b00      	cmp	r3, #0
 800035a:	d104      	bne.n	8000366 <main+0xb6>
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	1e5a      	subs	r2, r3, #1
 8000360:	617a      	str	r2, [r7, #20]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f4      	bne.n	8000350 <main+0xa0>

        // Read data
        uint8_t data[5];
        for (int i = 0; i < 5; i++) data[i] = Read_DHT22_Byte();
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
 800036a:	e00b      	b.n	8000384 <main+0xd4>
 800036c:	f000 f8a2 	bl	80004b4 <Read_DHT22_Byte>
 8000370:	4603      	mov	r3, r0
 8000372:	4619      	mov	r1, r3
 8000374:	463a      	mov	r2, r7
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	4413      	add	r3, r2
 800037a:	460a      	mov	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	3301      	adds	r3, #1
 8000382:	613b      	str	r3, [r7, #16]
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	2b04      	cmp	r3, #4
 8000388:	ddf0      	ble.n	800036c <main+0xbc>

        // Validate checksum
        if (data[4] != (data[0] + data[1] + data[2] + data[3])) {
 800038a:	793b      	ldrb	r3, [r7, #4]
 800038c:	461a      	mov	r2, r3
 800038e:	783b      	ldrb	r3, [r7, #0]
 8000390:	4619      	mov	r1, r3
 8000392:	787b      	ldrb	r3, [r7, #1]
 8000394:	440b      	add	r3, r1
 8000396:	78b9      	ldrb	r1, [r7, #2]
 8000398:	440b      	add	r3, r1
 800039a:	78f9      	ldrb	r1, [r7, #3]
 800039c:	440b      	add	r3, r1
 800039e:	429a      	cmp	r2, r3
 80003a0:	d003      	beq.n	80003aa <main+0xfa>
            printf("Checksum error!\r\n");
 80003a2:	4824      	ldr	r0, [pc, #144]	@ (8000434 <main+0x184>)
 80003a4:	f000 fb58 	bl	8000a58 <puts>
            continue;
 80003a8:	e03b      	b.n	8000422 <main+0x172>
        }

        // Calculate values
        int humidity = data[0] << 8 | data[1]; // e.g., 625 = 62.5%
 80003aa:	783b      	ldrb	r3, [r7, #0]
 80003ac:	021b      	lsls	r3, r3, #8
 80003ae:	787a      	ldrb	r2, [r7, #1]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
        int temperature = data[2] << 8 | data[3]; // e.g., 234 = 23.4Â°C
 80003b4:	78bb      	ldrb	r3, [r7, #2]
 80003b6:	021b      	lsls	r3, r3, #8
 80003b8:	78fa      	ldrb	r2, [r7, #3]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	60bb      	str	r3, [r7, #8]

        // Print data via UART
        printf("Temp: %d.%dC, Humidity: %d.%d%%\r\n",
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000438 <main+0x188>)
 80003c2:	fb82 1203 	smull	r1, r2, r2, r3
 80003c6:	1092      	asrs	r2, r2, #2
 80003c8:	17db      	asrs	r3, r3, #31
 80003ca:	1ad4      	subs	r4, r2, r3
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <main+0x188>)
 80003d0:	fb83 1302 	smull	r1, r3, r3, r2
 80003d4:	1099      	asrs	r1, r3, #2
 80003d6:	17d3      	asrs	r3, r2, #31
 80003d8:	1ac8      	subs	r0, r1, r3
 80003da:	4603      	mov	r3, r0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	4403      	add	r3, r0
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	1ad0      	subs	r0, r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <main+0x188>)
 80003e8:	fb82 1203 	smull	r1, r2, r2, r3
 80003ec:	1092      	asrs	r2, r2, #2
 80003ee:	17db      	asrs	r3, r3, #31
 80003f0:	1ad5      	subs	r5, r2, r3
 80003f2:	68f9      	ldr	r1, [r7, #12]
 80003f4:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <main+0x188>)
 80003f6:	fb83 2301 	smull	r2, r3, r3, r1
 80003fa:	109a      	asrs	r2, r3, #2
 80003fc:	17cb      	asrs	r3, r1, #31
 80003fe:	1ad2      	subs	r2, r2, r3
 8000400:	4613      	mov	r3, r2
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	1aca      	subs	r2, r1, r3
 800040a:	9200      	str	r2, [sp, #0]
 800040c:	462b      	mov	r3, r5
 800040e:	4602      	mov	r2, r0
 8000410:	4621      	mov	r1, r4
 8000412:	480a      	ldr	r0, [pc, #40]	@ (800043c <main+0x18c>)
 8000414:	f000 fab8 	bl	8000988 <iprintf>
               temperature / 10, temperature % 10,
               humidity / 10, humidity % 10);

        // Optional delay between readings
        Delay_us(delay); // 2-second delay
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <main+0x190>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f831 	bl	8000484 <Delay_us>
    while (1) {
 8000422:	e764      	b.n	80002ee <main+0x3e>
 8000424:	40023800 	.word	0x40023800
 8000428:	40020000 	.word	0x40020000
 800042c:	000f4240 	.word	0x000f4240
 8000430:	08001734 	.word	0x08001734
 8000434:	08001744 	.word	0x08001744
 8000438:	66666667 	.word	0x66666667
 800043c:	08001758 	.word	0x08001758
 8000440:	20000000 	.word	0x20000000

08000444 <TIM2_Init>:
    }
}

// Timer2 Initialization (for Âµs delays)
void TIM2_Init(void) {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1U << 0);  // Enable TIM2 clock
 8000448:	4b0d      	ldr	r3, [pc, #52]	@ (8000480 <TIM2_Init+0x3c>)
 800044a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800044c:	4a0c      	ldr	r2, [pc, #48]	@ (8000480 <TIM2_Init+0x3c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16 - 1;         // 16 MHz / 16 = 1 MHz (1 Âµs/tick)
 8000454:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000458:	220f      	movs	r2, #15
 800045a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000464:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= (1 << 0);      // Enable timer
 8000466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40023800 	.word	0x40023800

08000484 <Delay_us>:

// Microsecond delay
void Delay_us(uint16_t us) {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
    TIM2->CNT = 0;
 800048e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < us);
 8000496:	bf00      	nop
 8000498:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3f9      	bcc.n	8000498 <Delay_us+0x14>
}
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <Read_DHT22_Byte>:

// Read a byte from DHT22
uint8_t Read_DHT22_Byte(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80004be:	2300      	movs	r3, #0
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	e025      	b.n	8000510 <Read_DHT22_Byte+0x5c>
        while (!(GPIOA->IDR & DHT22_PIN)); // Wait for high
 80004c4:	bf00      	nop
 80004c6:	4b16      	ldr	r3, [pc, #88]	@ (8000520 <Read_DHT22_Byte+0x6c>)
 80004c8:	691b      	ldr	r3, [r3, #16]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <Read_DHT22_Byte+0x12>
        Delay_us(50); // Wait 50 Âµs to read bit value
 80004d2:	2032      	movs	r0, #50	@ 0x32
 80004d4:	f7ff ffd6 	bl	8000484 <Delay_us>
        if (GPIOA->IDR & DHT22_PIN) data |= (1 << (7 - i));
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <Read_DHT22_Byte+0x6c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d00b      	beq.n	80004fc <Read_DHT22_Byte+0x48>
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	f1c3 0307 	rsb	r3, r3, #7
 80004ea:	2201      	movs	r2, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	b25a      	sxtb	r2, r3
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	71fb      	strb	r3, [r7, #7]
        while (GPIOA->IDR & DHT22_PIN);    // Wait for low
 80004fc:	bf00      	nop
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <Read_DHT22_Byte+0x6c>)
 8000500:	691b      	ldr	r3, [r3, #16]
 8000502:	f003 0320 	and.w	r3, r3, #32
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f9      	bne.n	80004fe <Read_DHT22_Byte+0x4a>
    for (int i = 0; i < 8; i++) {
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2b07      	cmp	r3, #7
 8000514:	ddd6      	ble.n	80004c4 <Read_DHT22_Byte+0x10>
    }
    return data;
 8000516:	79fb      	ldrb	r3, [r7, #7]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40020000 	.word	0x40020000

08000524 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	e00a      	b.n	800054c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000536:	f3af 8000 	nop.w
 800053a:	4601      	mov	r1, r0
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	b2ca      	uxtb	r2, r1
 8000544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf0      	blt.n	8000536 <_read+0x12>
  }

  return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e009      	b.n	8000584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	60ba      	str	r2, [r7, #8]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f877 	bl	800066c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	3301      	adds	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbf1      	blt.n	8000570 <_write+0x12>
  }
  return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <_close>:

int _close(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005be:	605a      	str	r2, [r3, #4]
  return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <_isatty>:

int _isatty(int file)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <_sbrk+0x5c>)
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <_sbrk+0x60>)
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <_sbrk+0x64>)
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <_sbrk+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	429a      	cmp	r2, r3
 800062e:	d207      	bcs.n	8000640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000630:	f000 fb40 	bl	8000cb4 <__errno>
 8000634:	4603      	mov	r3, r0
 8000636:	220c      	movs	r2, #12
 8000638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	e009      	b.n	8000654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <_sbrk+0x64>)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <_sbrk+0x64>)
 8000650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20020000 	.word	0x20020000
 8000660:	00000400 	.word	0x00000400
 8000664:	2000007c 	.word	0x2000007c
 8000668:	200001d0 	.word	0x200001d0

0800066c <__io_putchar>:
static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate);
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate);
void uart2_write(int ch);
char uart2_read(void);

int __io_putchar(int ch){
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f85f 	bl	8000738 <uart2_write>
	return ch;
 800067a:	687b      	ldr	r3, [r7, #4]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <uart_rxtx_init>:

void uart_rxtx_init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <uart_rxtx_init+0xa4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	4a26      	ldr	r2, [pc, #152]	@ (8000728 <uart_rxtx_init+0xa4>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<5);
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <uart_rxtx_init+0xa8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a24      	ldr	r2, [pc, #144]	@ (800072c <uart_rxtx_init+0xa8>)
 800069a:	f043 0320 	orr.w	r3, r3, #32
 800069e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<4);
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <uart_rxtx_init+0xa8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <uart_rxtx_init+0xa8>)
 80006a6:	f023 0310 	bic.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 TX)
    GPIOA->AFR[0] &= ~(0xF << 8); // Clear bits 8-11 for PA2
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <uart_rxtx_init+0xa8>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a1e      	ldr	r2, [pc, #120]	@ (800072c <uart_rxtx_init+0xa8>)
 80006b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80006b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);  // AF7 is 0111
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <uart_rxtx_init+0xa8>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <uart_rxtx_init+0xa8>)
 80006be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80006c2:	6213      	str	r3, [r2, #32]

    // Set PA3 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<7);
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <uart_rxtx_init+0xa8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a18      	ldr	r2, [pc, #96]	@ (800072c <uart_rxtx_init+0xa8>)
 80006ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<6);
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <uart_rxtx_init+0xa8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a15      	ldr	r2, [pc, #84]	@ (800072c <uart_rxtx_init+0xa8>)
 80006d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006da:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 RX)
    GPIOA->AFR[0] &= ~(0xF << 12); // Clear bits 8-15 for PA3
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <uart_rxtx_init+0xa8>)
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	4a12      	ldr	r2, [pc, #72]	@ (800072c <uart_rxtx_init+0xa8>)
 80006e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80006e6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);  // AF7 is 0111
 80006e8:	4b10      	ldr	r3, [pc, #64]	@ (800072c <uart_rxtx_init+0xa8>)
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <uart_rxtx_init+0xa8>)
 80006ee:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80006f2:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= UART2EN;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <uart_rxtx_init+0xa4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <uart_rxtx_init+0xa4>)
 80006fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	490a      	ldr	r1, [pc, #40]	@ (8000730 <uart_rxtx_init+0xac>)
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <uart_rxtx_init+0xb0>)
 8000708:	f000 f82e 	bl	8000768 <uart_set_baudrate>

    // Configure transfer direction
    USART2->CR1 |= CR1_TE | CR1_RE;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <uart_rxtx_init+0xb0>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <uart_rxtx_init+0xb0>)
 8000712:	f043 030c 	orr.w	r3, r3, #12
 8000716:	60d3      	str	r3, [r2, #12]

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <uart_rxtx_init+0xb0>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	4a05      	ldr	r2, [pc, #20]	@ (8000734 <uart_rxtx_init+0xb0>)
 800071e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	00f42400 	.word	0x00f42400
 8000734:	40004400 	.word	0x40004400

08000738 <uart2_write>:

    // read data
    return USART2->DR;
}

void uart2_write(int ch){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    // Wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 8000740:	bf00      	nop
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <uart2_write+0x2c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f9      	beq.n	8000742 <uart2_write+0xa>

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <uart2_write+0x2c>)
 8000752:	b2db      	uxtb	r3, r3
 8000754:	6053      	str	r3, [r2, #4]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400

08000768 <uart_set_baudrate>:

// Set baud rate
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
    USARTx->BRR = calculate_uart_bd(periphCLK, baudrate);
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	f000 f807 	bl	800078a <calculate_uart_bd>
 800077c:	4602      	mov	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	609a      	str	r2, [r3, #8]
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <calculate_uart_bd>:

static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate){
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
    return ((periphCLK + (baudrate / 2U)) / baudrate);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	085a      	lsrs	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	441a      	add	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490d      	ldr	r1, [pc, #52]	@ (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0d      	ldr	r2, [pc, #52]	@ (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0a      	ldr	r4, [pc, #40]	@ (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 fa6f 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff fd65 	bl	80002b0 <main>

080007e6 <LoopForever>:

LoopForever:
  b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007f4:	080017c0 	.word	0x080017c0
  ldr r2, =_sbss
 80007f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007fc:	200001cc 	.word	0x200001cc

08000800 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <std>:
 8000804:	2300      	movs	r3, #0
 8000806:	b510      	push	{r4, lr}
 8000808:	4604      	mov	r4, r0
 800080a:	e9c0 3300 	strd	r3, r3, [r0]
 800080e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000812:	6083      	str	r3, [r0, #8]
 8000814:	8181      	strh	r1, [r0, #12]
 8000816:	6643      	str	r3, [r0, #100]	@ 0x64
 8000818:	81c2      	strh	r2, [r0, #14]
 800081a:	6183      	str	r3, [r0, #24]
 800081c:	4619      	mov	r1, r3
 800081e:	2208      	movs	r2, #8
 8000820:	305c      	adds	r0, #92	@ 0x5c
 8000822:	f000 f9f9 	bl	8000c18 <memset>
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <std+0x58>)
 8000828:	6263      	str	r3, [r4, #36]	@ 0x24
 800082a:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <std+0x5c>)
 800082c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <std+0x60>)
 8000830:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <std+0x64>)
 8000834:	6323      	str	r3, [r4, #48]	@ 0x30
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <std+0x68>)
 8000838:	6224      	str	r4, [r4, #32]
 800083a:	429c      	cmp	r4, r3
 800083c:	d006      	beq.n	800084c <std+0x48>
 800083e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000842:	4294      	cmp	r4, r2
 8000844:	d002      	beq.n	800084c <std+0x48>
 8000846:	33d0      	adds	r3, #208	@ 0xd0
 8000848:	429c      	cmp	r4, r3
 800084a:	d105      	bne.n	8000858 <std+0x54>
 800084c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000854:	f000 ba58 	b.w	8000d08 <__retarget_lock_init_recursive>
 8000858:	bd10      	pop	{r4, pc}
 800085a:	bf00      	nop
 800085c:	08000a69 	.word	0x08000a69
 8000860:	08000a8b 	.word	0x08000a8b
 8000864:	08000ac3 	.word	0x08000ac3
 8000868:	08000ae7 	.word	0x08000ae7
 800086c:	20000080 	.word	0x20000080

08000870 <stdio_exit_handler>:
 8000870:	4a02      	ldr	r2, [pc, #8]	@ (800087c <stdio_exit_handler+0xc>)
 8000872:	4903      	ldr	r1, [pc, #12]	@ (8000880 <stdio_exit_handler+0x10>)
 8000874:	4803      	ldr	r0, [pc, #12]	@ (8000884 <stdio_exit_handler+0x14>)
 8000876:	f000 b869 	b.w	800094c <_fwalk_sglue>
 800087a:	bf00      	nop
 800087c:	20000004 	.word	0x20000004
 8000880:	080015a5 	.word	0x080015a5
 8000884:	20000014 	.word	0x20000014

08000888 <cleanup_stdio>:
 8000888:	6841      	ldr	r1, [r0, #4]
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <cleanup_stdio+0x34>)
 800088c:	4299      	cmp	r1, r3
 800088e:	b510      	push	{r4, lr}
 8000890:	4604      	mov	r4, r0
 8000892:	d001      	beq.n	8000898 <cleanup_stdio+0x10>
 8000894:	f000 fe86 	bl	80015a4 <_fflush_r>
 8000898:	68a1      	ldr	r1, [r4, #8]
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <cleanup_stdio+0x38>)
 800089c:	4299      	cmp	r1, r3
 800089e:	d002      	beq.n	80008a6 <cleanup_stdio+0x1e>
 80008a0:	4620      	mov	r0, r4
 80008a2:	f000 fe7f 	bl	80015a4 <_fflush_r>
 80008a6:	68e1      	ldr	r1, [r4, #12]
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <cleanup_stdio+0x3c>)
 80008aa:	4299      	cmp	r1, r3
 80008ac:	d004      	beq.n	80008b8 <cleanup_stdio+0x30>
 80008ae:	4620      	mov	r0, r4
 80008b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008b4:	f000 be76 	b.w	80015a4 <_fflush_r>
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	bf00      	nop
 80008bc:	20000080 	.word	0x20000080
 80008c0:	200000e8 	.word	0x200000e8
 80008c4:	20000150 	.word	0x20000150

080008c8 <global_stdio_init.part.0>:
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <global_stdio_init.part.0+0x30>)
 80008cc:	4c0b      	ldr	r4, [pc, #44]	@ (80008fc <global_stdio_init.part.0+0x34>)
 80008ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <global_stdio_init.part.0+0x38>)
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	4620      	mov	r0, r4
 80008d4:	2200      	movs	r2, #0
 80008d6:	2104      	movs	r1, #4
 80008d8:	f7ff ff94 	bl	8000804 <std>
 80008dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008e0:	2201      	movs	r2, #1
 80008e2:	2109      	movs	r1, #9
 80008e4:	f7ff ff8e 	bl	8000804 <std>
 80008e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80008ec:	2202      	movs	r2, #2
 80008ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f2:	2112      	movs	r1, #18
 80008f4:	f7ff bf86 	b.w	8000804 <std>
 80008f8:	200001b8 	.word	0x200001b8
 80008fc:	20000080 	.word	0x20000080
 8000900:	08000871 	.word	0x08000871

08000904 <__sfp_lock_acquire>:
 8000904:	4801      	ldr	r0, [pc, #4]	@ (800090c <__sfp_lock_acquire+0x8>)
 8000906:	f000 ba00 	b.w	8000d0a <__retarget_lock_acquire_recursive>
 800090a:	bf00      	nop
 800090c:	200001c1 	.word	0x200001c1

08000910 <__sfp_lock_release>:
 8000910:	4801      	ldr	r0, [pc, #4]	@ (8000918 <__sfp_lock_release+0x8>)
 8000912:	f000 b9fb 	b.w	8000d0c <__retarget_lock_release_recursive>
 8000916:	bf00      	nop
 8000918:	200001c1 	.word	0x200001c1

0800091c <__sinit>:
 800091c:	b510      	push	{r4, lr}
 800091e:	4604      	mov	r4, r0
 8000920:	f7ff fff0 	bl	8000904 <__sfp_lock_acquire>
 8000924:	6a23      	ldr	r3, [r4, #32]
 8000926:	b11b      	cbz	r3, 8000930 <__sinit+0x14>
 8000928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800092c:	f7ff bff0 	b.w	8000910 <__sfp_lock_release>
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <__sinit+0x28>)
 8000932:	6223      	str	r3, [r4, #32]
 8000934:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <__sinit+0x2c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1f5      	bne.n	8000928 <__sinit+0xc>
 800093c:	f7ff ffc4 	bl	80008c8 <global_stdio_init.part.0>
 8000940:	e7f2      	b.n	8000928 <__sinit+0xc>
 8000942:	bf00      	nop
 8000944:	08000889 	.word	0x08000889
 8000948:	200001b8 	.word	0x200001b8

0800094c <_fwalk_sglue>:
 800094c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000950:	4607      	mov	r7, r0
 8000952:	4688      	mov	r8, r1
 8000954:	4614      	mov	r4, r2
 8000956:	2600      	movs	r6, #0
 8000958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800095c:	f1b9 0901 	subs.w	r9, r9, #1
 8000960:	d505      	bpl.n	800096e <_fwalk_sglue+0x22>
 8000962:	6824      	ldr	r4, [r4, #0]
 8000964:	2c00      	cmp	r4, #0
 8000966:	d1f7      	bne.n	8000958 <_fwalk_sglue+0xc>
 8000968:	4630      	mov	r0, r6
 800096a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800096e:	89ab      	ldrh	r3, [r5, #12]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d907      	bls.n	8000984 <_fwalk_sglue+0x38>
 8000974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000978:	3301      	adds	r3, #1
 800097a:	d003      	beq.n	8000984 <_fwalk_sglue+0x38>
 800097c:	4629      	mov	r1, r5
 800097e:	4638      	mov	r0, r7
 8000980:	47c0      	blx	r8
 8000982:	4306      	orrs	r6, r0
 8000984:	3568      	adds	r5, #104	@ 0x68
 8000986:	e7e9      	b.n	800095c <_fwalk_sglue+0x10>

08000988 <iprintf>:
 8000988:	b40f      	push	{r0, r1, r2, r3}
 800098a:	b507      	push	{r0, r1, r2, lr}
 800098c:	4906      	ldr	r1, [pc, #24]	@ (80009a8 <iprintf+0x20>)
 800098e:	ab04      	add	r3, sp, #16
 8000990:	6808      	ldr	r0, [r1, #0]
 8000992:	f853 2b04 	ldr.w	r2, [r3], #4
 8000996:	6881      	ldr	r1, [r0, #8]
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	f000 fadb 	bl	8000f54 <_vfiprintf_r>
 800099e:	b003      	add	sp, #12
 80009a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80009a4:	b004      	add	sp, #16
 80009a6:	4770      	bx	lr
 80009a8:	20000010 	.word	0x20000010

080009ac <_puts_r>:
 80009ac:	6a03      	ldr	r3, [r0, #32]
 80009ae:	b570      	push	{r4, r5, r6, lr}
 80009b0:	6884      	ldr	r4, [r0, #8]
 80009b2:	4605      	mov	r5, r0
 80009b4:	460e      	mov	r6, r1
 80009b6:	b90b      	cbnz	r3, 80009bc <_puts_r+0x10>
 80009b8:	f7ff ffb0 	bl	800091c <__sinit>
 80009bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009be:	07db      	lsls	r3, r3, #31
 80009c0:	d405      	bmi.n	80009ce <_puts_r+0x22>
 80009c2:	89a3      	ldrh	r3, [r4, #12]
 80009c4:	0598      	lsls	r0, r3, #22
 80009c6:	d402      	bmi.n	80009ce <_puts_r+0x22>
 80009c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009ca:	f000 f99e 	bl	8000d0a <__retarget_lock_acquire_recursive>
 80009ce:	89a3      	ldrh	r3, [r4, #12]
 80009d0:	0719      	lsls	r1, r3, #28
 80009d2:	d502      	bpl.n	80009da <_puts_r+0x2e>
 80009d4:	6923      	ldr	r3, [r4, #16]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d135      	bne.n	8000a46 <_puts_r+0x9a>
 80009da:	4621      	mov	r1, r4
 80009dc:	4628      	mov	r0, r5
 80009de:	f000 f8c5 	bl	8000b6c <__swsetup_r>
 80009e2:	b380      	cbz	r0, 8000a46 <_puts_r+0x9a>
 80009e4:	f04f 35ff 	mov.w	r5, #4294967295
 80009e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009ea:	07da      	lsls	r2, r3, #31
 80009ec:	d405      	bmi.n	80009fa <_puts_r+0x4e>
 80009ee:	89a3      	ldrh	r3, [r4, #12]
 80009f0:	059b      	lsls	r3, r3, #22
 80009f2:	d402      	bmi.n	80009fa <_puts_r+0x4e>
 80009f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009f6:	f000 f989 	bl	8000d0c <__retarget_lock_release_recursive>
 80009fa:	4628      	mov	r0, r5
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da04      	bge.n	8000a0c <_puts_r+0x60>
 8000a02:	69a2      	ldr	r2, [r4, #24]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dc17      	bgt.n	8000a38 <_puts_r+0x8c>
 8000a08:	290a      	cmp	r1, #10
 8000a0a:	d015      	beq.n	8000a38 <_puts_r+0x8c>
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	6022      	str	r2, [r4, #0]
 8000a12:	7019      	strb	r1, [r3, #0]
 8000a14:	68a3      	ldr	r3, [r4, #8]
 8000a16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	60a3      	str	r3, [r4, #8]
 8000a1e:	2900      	cmp	r1, #0
 8000a20:	d1ed      	bne.n	80009fe <_puts_r+0x52>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da11      	bge.n	8000a4a <_puts_r+0x9e>
 8000a26:	4622      	mov	r2, r4
 8000a28:	210a      	movs	r1, #10
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f000 f85f 	bl	8000aee <__swbuf_r>
 8000a30:	3001      	adds	r0, #1
 8000a32:	d0d7      	beq.n	80009e4 <_puts_r+0x38>
 8000a34:	250a      	movs	r5, #10
 8000a36:	e7d7      	b.n	80009e8 <_puts_r+0x3c>
 8000a38:	4622      	mov	r2, r4
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f000 f857 	bl	8000aee <__swbuf_r>
 8000a40:	3001      	adds	r0, #1
 8000a42:	d1e7      	bne.n	8000a14 <_puts_r+0x68>
 8000a44:	e7ce      	b.n	80009e4 <_puts_r+0x38>
 8000a46:	3e01      	subs	r6, #1
 8000a48:	e7e4      	b.n	8000a14 <_puts_r+0x68>
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	6022      	str	r2, [r4, #0]
 8000a50:	220a      	movs	r2, #10
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e7ee      	b.n	8000a34 <_puts_r+0x88>
	...

08000a58 <puts>:
 8000a58:	4b02      	ldr	r3, [pc, #8]	@ (8000a64 <puts+0xc>)
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	f7ff bfa5 	b.w	80009ac <_puts_r>
 8000a62:	bf00      	nop
 8000a64:	20000010 	.word	0x20000010

08000a68 <__sread>:
 8000a68:	b510      	push	{r4, lr}
 8000a6a:	460c      	mov	r4, r1
 8000a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a70:	f000 f8fc 	bl	8000c6c <_read_r>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	bfab      	itete	ge
 8000a78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a7c:	181b      	addge	r3, r3, r0
 8000a7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a82:	bfac      	ite	ge
 8000a84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a86:	81a3      	strhlt	r3, [r4, #12]
 8000a88:	bd10      	pop	{r4, pc}

08000a8a <__swrite>:
 8000a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8e:	461f      	mov	r7, r3
 8000a90:	898b      	ldrh	r3, [r1, #12]
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	4605      	mov	r5, r0
 8000a96:	460c      	mov	r4, r1
 8000a98:	4616      	mov	r6, r2
 8000a9a:	d505      	bpl.n	8000aa8 <__swrite+0x1e>
 8000a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f000 f8d0 	bl	8000c48 <_lseek_r>
 8000aa8:	89a3      	ldrh	r3, [r4, #12]
 8000aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ab2:	81a3      	strh	r3, [r4, #12]
 8000ab4:	4632      	mov	r2, r6
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4628      	mov	r0, r5
 8000aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000abe:	f000 b8e7 	b.w	8000c90 <_write_r>

08000ac2 <__sseek>:
 8000ac2:	b510      	push	{r4, lr}
 8000ac4:	460c      	mov	r4, r1
 8000ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aca:	f000 f8bd 	bl	8000c48 <_lseek_r>
 8000ace:	1c43      	adds	r3, r0, #1
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	bf15      	itete	ne
 8000ad4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000ad6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ada:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ade:	81a3      	strheq	r3, [r4, #12]
 8000ae0:	bf18      	it	ne
 8000ae2:	81a3      	strhne	r3, [r4, #12]
 8000ae4:	bd10      	pop	{r4, pc}

08000ae6 <__sclose>:
 8000ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aea:	f000 b89d 	b.w	8000c28 <_close_r>

08000aee <__swbuf_r>:
 8000aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af0:	460e      	mov	r6, r1
 8000af2:	4614      	mov	r4, r2
 8000af4:	4605      	mov	r5, r0
 8000af6:	b118      	cbz	r0, 8000b00 <__swbuf_r+0x12>
 8000af8:	6a03      	ldr	r3, [r0, #32]
 8000afa:	b90b      	cbnz	r3, 8000b00 <__swbuf_r+0x12>
 8000afc:	f7ff ff0e 	bl	800091c <__sinit>
 8000b00:	69a3      	ldr	r3, [r4, #24]
 8000b02:	60a3      	str	r3, [r4, #8]
 8000b04:	89a3      	ldrh	r3, [r4, #12]
 8000b06:	071a      	lsls	r2, r3, #28
 8000b08:	d501      	bpl.n	8000b0e <__swbuf_r+0x20>
 8000b0a:	6923      	ldr	r3, [r4, #16]
 8000b0c:	b943      	cbnz	r3, 8000b20 <__swbuf_r+0x32>
 8000b0e:	4621      	mov	r1, r4
 8000b10:	4628      	mov	r0, r5
 8000b12:	f000 f82b 	bl	8000b6c <__swsetup_r>
 8000b16:	b118      	cbz	r0, 8000b20 <__swbuf_r+0x32>
 8000b18:	f04f 37ff 	mov.w	r7, #4294967295
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	6922      	ldr	r2, [r4, #16]
 8000b24:	1a98      	subs	r0, r3, r2
 8000b26:	6963      	ldr	r3, [r4, #20]
 8000b28:	b2f6      	uxtb	r6, r6
 8000b2a:	4283      	cmp	r3, r0
 8000b2c:	4637      	mov	r7, r6
 8000b2e:	dc05      	bgt.n	8000b3c <__swbuf_r+0x4e>
 8000b30:	4621      	mov	r1, r4
 8000b32:	4628      	mov	r0, r5
 8000b34:	f000 fd36 	bl	80015a4 <_fflush_r>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d1ed      	bne.n	8000b18 <__swbuf_r+0x2a>
 8000b3c:	68a3      	ldr	r3, [r4, #8]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	60a3      	str	r3, [r4, #8]
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	6022      	str	r2, [r4, #0]
 8000b48:	701e      	strb	r6, [r3, #0]
 8000b4a:	6962      	ldr	r2, [r4, #20]
 8000b4c:	1c43      	adds	r3, r0, #1
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d004      	beq.n	8000b5c <__swbuf_r+0x6e>
 8000b52:	89a3      	ldrh	r3, [r4, #12]
 8000b54:	07db      	lsls	r3, r3, #31
 8000b56:	d5e1      	bpl.n	8000b1c <__swbuf_r+0x2e>
 8000b58:	2e0a      	cmp	r6, #10
 8000b5a:	d1df      	bne.n	8000b1c <__swbuf_r+0x2e>
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f000 fd20 	bl	80015a4 <_fflush_r>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d0d9      	beq.n	8000b1c <__swbuf_r+0x2e>
 8000b68:	e7d6      	b.n	8000b18 <__swbuf_r+0x2a>
	...

08000b6c <__swsetup_r>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <__swsetup_r+0xa8>)
 8000b70:	4605      	mov	r5, r0
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	460c      	mov	r4, r1
 8000b76:	b118      	cbz	r0, 8000b80 <__swsetup_r+0x14>
 8000b78:	6a03      	ldr	r3, [r0, #32]
 8000b7a:	b90b      	cbnz	r3, 8000b80 <__swsetup_r+0x14>
 8000b7c:	f7ff fece 	bl	800091c <__sinit>
 8000b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b84:	0719      	lsls	r1, r3, #28
 8000b86:	d422      	bmi.n	8000bce <__swsetup_r+0x62>
 8000b88:	06da      	lsls	r2, r3, #27
 8000b8a:	d407      	bmi.n	8000b9c <__swsetup_r+0x30>
 8000b8c:	2209      	movs	r2, #9
 8000b8e:	602a      	str	r2, [r5, #0]
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	81a3      	strh	r3, [r4, #12]
 8000b96:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9a:	e033      	b.n	8000c04 <__swsetup_r+0x98>
 8000b9c:	0758      	lsls	r0, r3, #29
 8000b9e:	d512      	bpl.n	8000bc6 <__swsetup_r+0x5a>
 8000ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ba2:	b141      	cbz	r1, 8000bb6 <__swsetup_r+0x4a>
 8000ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d002      	beq.n	8000bb2 <__swsetup_r+0x46>
 8000bac:	4628      	mov	r0, r5
 8000bae:	f000 f8af 	bl	8000d10 <_free_r>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6063      	str	r3, [r4, #4]
 8000bc2:	6923      	ldr	r3, [r4, #16]
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	6923      	ldr	r3, [r4, #16]
 8000bd0:	b94b      	cbnz	r3, 8000be6 <__swsetup_r+0x7a>
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bdc:	d003      	beq.n	8000be6 <__swsetup_r+0x7a>
 8000bde:	4621      	mov	r1, r4
 8000be0:	4628      	mov	r0, r5
 8000be2:	f000 fd2d 	bl	8001640 <__smakebuf_r>
 8000be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bea:	f013 0201 	ands.w	r2, r3, #1
 8000bee:	d00a      	beq.n	8000c06 <__swsetup_r+0x9a>
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60a2      	str	r2, [r4, #8]
 8000bf4:	6962      	ldr	r2, [r4, #20]
 8000bf6:	4252      	negs	r2, r2
 8000bf8:	61a2      	str	r2, [r4, #24]
 8000bfa:	6922      	ldr	r2, [r4, #16]
 8000bfc:	b942      	cbnz	r2, 8000c10 <__swsetup_r+0xa4>
 8000bfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c02:	d1c5      	bne.n	8000b90 <__swsetup_r+0x24>
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	0799      	lsls	r1, r3, #30
 8000c08:	bf58      	it	pl
 8000c0a:	6962      	ldrpl	r2, [r4, #20]
 8000c0c:	60a2      	str	r2, [r4, #8]
 8000c0e:	e7f4      	b.n	8000bfa <__swsetup_r+0x8e>
 8000c10:	2000      	movs	r0, #0
 8000c12:	e7f7      	b.n	8000c04 <__swsetup_r+0x98>
 8000c14:	20000010 	.word	0x20000010

08000c18 <memset>:
 8000c18:	4402      	add	r2, r0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d100      	bne.n	8000c22 <memset+0xa>
 8000c20:	4770      	bx	lr
 8000c22:	f803 1b01 	strb.w	r1, [r3], #1
 8000c26:	e7f9      	b.n	8000c1c <memset+0x4>

08000c28 <_close_r>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4d06      	ldr	r5, [pc, #24]	@ (8000c44 <_close_r+0x1c>)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	f7ff fcaf 	bl	8000596 <_close>
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	d102      	bne.n	8000c42 <_close_r+0x1a>
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	b103      	cbz	r3, 8000c42 <_close_r+0x1a>
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
 8000c44:	200001bc 	.word	0x200001bc

08000c48 <_lseek_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4d07      	ldr	r5, [pc, #28]	@ (8000c68 <_lseek_r+0x20>)
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4611      	mov	r1, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	602a      	str	r2, [r5, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	f7ff fcc4 	bl	80005e4 <_lseek>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d102      	bne.n	8000c66 <_lseek_r+0x1e>
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	b103      	cbz	r3, 8000c66 <_lseek_r+0x1e>
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	200001bc 	.word	0x200001bc

08000c6c <_read_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4d07      	ldr	r5, [pc, #28]	@ (8000c8c <_read_r+0x20>)
 8000c70:	4604      	mov	r4, r0
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	602a      	str	r2, [r5, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f7ff fc52 	bl	8000524 <_read>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d102      	bne.n	8000c8a <_read_r+0x1e>
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	b103      	cbz	r3, 8000c8a <_read_r+0x1e>
 8000c88:	6023      	str	r3, [r4, #0]
 8000c8a:	bd38      	pop	{r3, r4, r5, pc}
 8000c8c:	200001bc 	.word	0x200001bc

08000c90 <_write_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4d07      	ldr	r5, [pc, #28]	@ (8000cb0 <_write_r+0x20>)
 8000c94:	4604      	mov	r4, r0
 8000c96:	4608      	mov	r0, r1
 8000c98:	4611      	mov	r1, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	602a      	str	r2, [r5, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f7ff fc5d 	bl	800055e <_write>
 8000ca4:	1c43      	adds	r3, r0, #1
 8000ca6:	d102      	bne.n	8000cae <_write_r+0x1e>
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	b103      	cbz	r3, 8000cae <_write_r+0x1e>
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	200001bc 	.word	0x200001bc

08000cb4 <__errno>:
 8000cb4:	4b01      	ldr	r3, [pc, #4]	@ (8000cbc <__errno+0x8>)
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000010 	.word	0x20000010

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 fd22 	bl	800171c <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	080017b8 	.word	0x080017b8
 8000cfc:	080017b8 	.word	0x080017b8
 8000d00:	080017b8 	.word	0x080017b8
 8000d04:	080017bc 	.word	0x080017bc

08000d08 <__retarget_lock_init_recursive>:
 8000d08:	4770      	bx	lr

08000d0a <__retarget_lock_acquire_recursive>:
 8000d0a:	4770      	bx	lr

08000d0c <__retarget_lock_release_recursive>:
 8000d0c:	4770      	bx	lr
	...

08000d10 <_free_r>:
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	4605      	mov	r5, r0
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d041      	beq.n	8000d9c <_free_r+0x8c>
 8000d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d1c:	1f0c      	subs	r4, r1, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bfb8      	it	lt
 8000d22:	18e4      	addlt	r4, r4, r3
 8000d24:	f000 f8e0 	bl	8000ee8 <__malloc_lock>
 8000d28:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <_free_r+0x90>)
 8000d2a:	6813      	ldr	r3, [r2, #0]
 8000d2c:	b933      	cbnz	r3, 8000d3c <_free_r+0x2c>
 8000d2e:	6063      	str	r3, [r4, #4]
 8000d30:	6014      	str	r4, [r2, #0]
 8000d32:	4628      	mov	r0, r5
 8000d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d38:	f000 b8dc 	b.w	8000ef4 <__malloc_unlock>
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <_free_r+0x42>
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	1821      	adds	r1, r4, r0
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf01      	itttt	eq
 8000d48:	6819      	ldreq	r1, [r3, #0]
 8000d4a:	685b      	ldreq	r3, [r3, #4]
 8000d4c:	1809      	addeq	r1, r1, r0
 8000d4e:	6021      	streq	r1, [r4, #0]
 8000d50:	e7ed      	b.n	8000d2e <_free_r+0x1e>
 8000d52:	461a      	mov	r2, r3
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	b10b      	cbz	r3, 8000d5c <_free_r+0x4c>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	d9fa      	bls.n	8000d52 <_free_r+0x42>
 8000d5c:	6811      	ldr	r1, [r2, #0]
 8000d5e:	1850      	adds	r0, r2, r1
 8000d60:	42a0      	cmp	r0, r4
 8000d62:	d10b      	bne.n	8000d7c <_free_r+0x6c>
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	4401      	add	r1, r0
 8000d68:	1850      	adds	r0, r2, r1
 8000d6a:	4283      	cmp	r3, r0
 8000d6c:	6011      	str	r1, [r2, #0]
 8000d6e:	d1e0      	bne.n	8000d32 <_free_r+0x22>
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	6053      	str	r3, [r2, #4]
 8000d76:	4408      	add	r0, r1
 8000d78:	6010      	str	r0, [r2, #0]
 8000d7a:	e7da      	b.n	8000d32 <_free_r+0x22>
 8000d7c:	d902      	bls.n	8000d84 <_free_r+0x74>
 8000d7e:	230c      	movs	r3, #12
 8000d80:	602b      	str	r3, [r5, #0]
 8000d82:	e7d6      	b.n	8000d32 <_free_r+0x22>
 8000d84:	6820      	ldr	r0, [r4, #0]
 8000d86:	1821      	adds	r1, r4, r0
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf04      	itt	eq
 8000d8c:	6819      	ldreq	r1, [r3, #0]
 8000d8e:	685b      	ldreq	r3, [r3, #4]
 8000d90:	6063      	str	r3, [r4, #4]
 8000d92:	bf04      	itt	eq
 8000d94:	1809      	addeq	r1, r1, r0
 8000d96:	6021      	streq	r1, [r4, #0]
 8000d98:	6054      	str	r4, [r2, #4]
 8000d9a:	e7ca      	b.n	8000d32 <_free_r+0x22>
 8000d9c:	bd38      	pop	{r3, r4, r5, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001c8 	.word	0x200001c8

08000da4 <sbrk_aligned>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	4e0f      	ldr	r6, [pc, #60]	@ (8000de4 <sbrk_aligned+0x40>)
 8000da8:	460c      	mov	r4, r1
 8000daa:	6831      	ldr	r1, [r6, #0]
 8000dac:	4605      	mov	r5, r0
 8000dae:	b911      	cbnz	r1, 8000db6 <sbrk_aligned+0x12>
 8000db0:	f000 fca4 	bl	80016fc <_sbrk_r>
 8000db4:	6030      	str	r0, [r6, #0]
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f000 fc9f 	bl	80016fc <_sbrk_r>
 8000dbe:	1c43      	adds	r3, r0, #1
 8000dc0:	d103      	bne.n	8000dca <sbrk_aligned+0x26>
 8000dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
 8000dca:	1cc4      	adds	r4, r0, #3
 8000dcc:	f024 0403 	bic.w	r4, r4, #3
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	d0f8      	beq.n	8000dc6 <sbrk_aligned+0x22>
 8000dd4:	1a21      	subs	r1, r4, r0
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f000 fc90 	bl	80016fc <_sbrk_r>
 8000ddc:	3001      	adds	r0, #1
 8000dde:	d1f2      	bne.n	8000dc6 <sbrk_aligned+0x22>
 8000de0:	e7ef      	b.n	8000dc2 <sbrk_aligned+0x1e>
 8000de2:	bf00      	nop
 8000de4:	200001c4 	.word	0x200001c4

08000de8 <_malloc_r>:
 8000de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dec:	1ccd      	adds	r5, r1, #3
 8000dee:	f025 0503 	bic.w	r5, r5, #3
 8000df2:	3508      	adds	r5, #8
 8000df4:	2d0c      	cmp	r5, #12
 8000df6:	bf38      	it	cc
 8000df8:	250c      	movcc	r5, #12
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	db01      	blt.n	8000e04 <_malloc_r+0x1c>
 8000e00:	42a9      	cmp	r1, r5
 8000e02:	d904      	bls.n	8000e0e <_malloc_r+0x26>
 8000e04:	230c      	movs	r3, #12
 8000e06:	6033      	str	r3, [r6, #0]
 8000e08:	2000      	movs	r0, #0
 8000e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ee4 <_malloc_r+0xfc>
 8000e12:	f000 f869 	bl	8000ee8 <__malloc_lock>
 8000e16:	f8d8 3000 	ldr.w	r3, [r8]
 8000e1a:	461c      	mov	r4, r3
 8000e1c:	bb44      	cbnz	r4, 8000e70 <_malloc_r+0x88>
 8000e1e:	4629      	mov	r1, r5
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff ffbf 	bl	8000da4 <sbrk_aligned>
 8000e26:	1c43      	adds	r3, r0, #1
 8000e28:	4604      	mov	r4, r0
 8000e2a:	d158      	bne.n	8000ede <_malloc_r+0xf6>
 8000e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8000e30:	4627      	mov	r7, r4
 8000e32:	2f00      	cmp	r7, #0
 8000e34:	d143      	bne.n	8000ebe <_malloc_r+0xd6>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d04b      	beq.n	8000ed2 <_malloc_r+0xea>
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	4630      	mov	r0, r6
 8000e40:	eb04 0903 	add.w	r9, r4, r3
 8000e44:	f000 fc5a 	bl	80016fc <_sbrk_r>
 8000e48:	4581      	cmp	r9, r0
 8000e4a:	d142      	bne.n	8000ed2 <_malloc_r+0xea>
 8000e4c:	6821      	ldr	r1, [r4, #0]
 8000e4e:	1a6d      	subs	r5, r5, r1
 8000e50:	4629      	mov	r1, r5
 8000e52:	4630      	mov	r0, r6
 8000e54:	f7ff ffa6 	bl	8000da4 <sbrk_aligned>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d03a      	beq.n	8000ed2 <_malloc_r+0xea>
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	442b      	add	r3, r5
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	f8d8 3000 	ldr.w	r3, [r8]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	bb62      	cbnz	r2, 8000ec4 <_malloc_r+0xdc>
 8000e6a:	f8c8 7000 	str.w	r7, [r8]
 8000e6e:	e00f      	b.n	8000e90 <_malloc_r+0xa8>
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	1b52      	subs	r2, r2, r5
 8000e74:	d420      	bmi.n	8000eb8 <_malloc_r+0xd0>
 8000e76:	2a0b      	cmp	r2, #11
 8000e78:	d917      	bls.n	8000eaa <_malloc_r+0xc2>
 8000e7a:	1961      	adds	r1, r4, r5
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	6025      	str	r5, [r4, #0]
 8000e80:	bf18      	it	ne
 8000e82:	6059      	strne	r1, [r3, #4]
 8000e84:	6863      	ldr	r3, [r4, #4]
 8000e86:	bf08      	it	eq
 8000e88:	f8c8 1000 	streq.w	r1, [r8]
 8000e8c:	5162      	str	r2, [r4, r5]
 8000e8e:	604b      	str	r3, [r1, #4]
 8000e90:	4630      	mov	r0, r6
 8000e92:	f000 f82f 	bl	8000ef4 <__malloc_unlock>
 8000e96:	f104 000b 	add.w	r0, r4, #11
 8000e9a:	1d23      	adds	r3, r4, #4
 8000e9c:	f020 0007 	bic.w	r0, r0, #7
 8000ea0:	1ac2      	subs	r2, r0, r3
 8000ea2:	bf1c      	itt	ne
 8000ea4:	1a1b      	subne	r3, r3, r0
 8000ea6:	50a3      	strne	r3, [r4, r2]
 8000ea8:	e7af      	b.n	8000e0a <_malloc_r+0x22>
 8000eaa:	6862      	ldr	r2, [r4, #4]
 8000eac:	42a3      	cmp	r3, r4
 8000eae:	bf0c      	ite	eq
 8000eb0:	f8c8 2000 	streq.w	r2, [r8]
 8000eb4:	605a      	strne	r2, [r3, #4]
 8000eb6:	e7eb      	b.n	8000e90 <_malloc_r+0xa8>
 8000eb8:	4623      	mov	r3, r4
 8000eba:	6864      	ldr	r4, [r4, #4]
 8000ebc:	e7ae      	b.n	8000e1c <_malloc_r+0x34>
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	687f      	ldr	r7, [r7, #4]
 8000ec2:	e7b6      	b.n	8000e32 <_malloc_r+0x4a>
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d1fb      	bne.n	8000ec4 <_malloc_r+0xdc>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6053      	str	r3, [r2, #4]
 8000ed0:	e7de      	b.n	8000e90 <_malloc_r+0xa8>
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	6033      	str	r3, [r6, #0]
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	f000 f80c 	bl	8000ef4 <__malloc_unlock>
 8000edc:	e794      	b.n	8000e08 <_malloc_r+0x20>
 8000ede:	6005      	str	r5, [r0, #0]
 8000ee0:	e7d6      	b.n	8000e90 <_malloc_r+0xa8>
 8000ee2:	bf00      	nop
 8000ee4:	200001c8 	.word	0x200001c8

08000ee8 <__malloc_lock>:
 8000ee8:	4801      	ldr	r0, [pc, #4]	@ (8000ef0 <__malloc_lock+0x8>)
 8000eea:	f7ff bf0e 	b.w	8000d0a <__retarget_lock_acquire_recursive>
 8000eee:	bf00      	nop
 8000ef0:	200001c0 	.word	0x200001c0

08000ef4 <__malloc_unlock>:
 8000ef4:	4801      	ldr	r0, [pc, #4]	@ (8000efc <__malloc_unlock+0x8>)
 8000ef6:	f7ff bf09 	b.w	8000d0c <__retarget_lock_release_recursive>
 8000efa:	bf00      	nop
 8000efc:	200001c0 	.word	0x200001c0

08000f00 <__sfputc_r>:
 8000f00:	6893      	ldr	r3, [r2, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	b410      	push	{r4}
 8000f08:	6093      	str	r3, [r2, #8]
 8000f0a:	da08      	bge.n	8000f1e <__sfputc_r+0x1e>
 8000f0c:	6994      	ldr	r4, [r2, #24]
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	db01      	blt.n	8000f16 <__sfputc_r+0x16>
 8000f12:	290a      	cmp	r1, #10
 8000f14:	d103      	bne.n	8000f1e <__sfputc_r+0x1e>
 8000f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f1a:	f7ff bde8 	b.w	8000aee <__swbuf_r>
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	1c58      	adds	r0, r3, #1
 8000f22:	6010      	str	r0, [r2, #0]
 8000f24:	7019      	strb	r1, [r3, #0]
 8000f26:	4608      	mov	r0, r1
 8000f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <__sfputs_r>:
 8000f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f30:	4606      	mov	r6, r0
 8000f32:	460f      	mov	r7, r1
 8000f34:	4614      	mov	r4, r2
 8000f36:	18d5      	adds	r5, r2, r3
 8000f38:	42ac      	cmp	r4, r5
 8000f3a:	d101      	bne.n	8000f40 <__sfputs_r+0x12>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e007      	b.n	8000f50 <__sfputs_r+0x22>
 8000f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f44:	463a      	mov	r2, r7
 8000f46:	4630      	mov	r0, r6
 8000f48:	f7ff ffda 	bl	8000f00 <__sfputc_r>
 8000f4c:	1c43      	adds	r3, r0, #1
 8000f4e:	d1f3      	bne.n	8000f38 <__sfputs_r+0xa>
 8000f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f54 <_vfiprintf_r>:
 8000f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f58:	460d      	mov	r5, r1
 8000f5a:	b09d      	sub	sp, #116	@ 0x74
 8000f5c:	4614      	mov	r4, r2
 8000f5e:	4698      	mov	r8, r3
 8000f60:	4606      	mov	r6, r0
 8000f62:	b118      	cbz	r0, 8000f6c <_vfiprintf_r+0x18>
 8000f64:	6a03      	ldr	r3, [r0, #32]
 8000f66:	b90b      	cbnz	r3, 8000f6c <_vfiprintf_r+0x18>
 8000f68:	f7ff fcd8 	bl	800091c <__sinit>
 8000f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f6e:	07d9      	lsls	r1, r3, #31
 8000f70:	d405      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f72:	89ab      	ldrh	r3, [r5, #12]
 8000f74:	059a      	lsls	r2, r3, #22
 8000f76:	d402      	bmi.n	8000f7e <_vfiprintf_r+0x2a>
 8000f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f7a:	f7ff fec6 	bl	8000d0a <__retarget_lock_acquire_recursive>
 8000f7e:	89ab      	ldrh	r3, [r5, #12]
 8000f80:	071b      	lsls	r3, r3, #28
 8000f82:	d501      	bpl.n	8000f88 <_vfiprintf_r+0x34>
 8000f84:	692b      	ldr	r3, [r5, #16]
 8000f86:	b99b      	cbnz	r3, 8000fb0 <_vfiprintf_r+0x5c>
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fdee 	bl	8000b6c <__swsetup_r>
 8000f90:	b170      	cbz	r0, 8000fb0 <_vfiprintf_r+0x5c>
 8000f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f94:	07dc      	lsls	r4, r3, #31
 8000f96:	d504      	bpl.n	8000fa2 <_vfiprintf_r+0x4e>
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	b01d      	add	sp, #116	@ 0x74
 8000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	0598      	lsls	r0, r3, #22
 8000fa6:	d4f7      	bmi.n	8000f98 <_vfiprintf_r+0x44>
 8000fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000faa:	f7ff feaf 	bl	8000d0c <__retarget_lock_release_recursive>
 8000fae:	e7f3      	b.n	8000f98 <_vfiprintf_r+0x44>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fbe:	2330      	movs	r3, #48	@ 0x30
 8000fc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001170 <_vfiprintf_r+0x21c>
 8000fc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fc8:	f04f 0901 	mov.w	r9, #1
 8000fcc:	4623      	mov	r3, r4
 8000fce:	469a      	mov	sl, r3
 8000fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fd4:	b10a      	cbz	r2, 8000fda <_vfiprintf_r+0x86>
 8000fd6:	2a25      	cmp	r2, #37	@ 0x25
 8000fd8:	d1f9      	bne.n	8000fce <_vfiprintf_r+0x7a>
 8000fda:	ebba 0b04 	subs.w	fp, sl, r4
 8000fde:	d00b      	beq.n	8000ff8 <_vfiprintf_r+0xa4>
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	f7ff ffa1 	bl	8000f2e <__sfputs_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	f000 80a7 	beq.w	8001140 <_vfiprintf_r+0x1ec>
 8000ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ff4:	445a      	add	r2, fp
 8000ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 809f 	beq.w	8001140 <_vfiprintf_r+0x1ec>
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800100c:	f10a 0a01 	add.w	sl, sl, #1
 8001010:	9304      	str	r3, [sp, #16]
 8001012:	9307      	str	r3, [sp, #28]
 8001014:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001018:	931a      	str	r3, [sp, #104]	@ 0x68
 800101a:	4654      	mov	r4, sl
 800101c:	2205      	movs	r2, #5
 800101e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001022:	4853      	ldr	r0, [pc, #332]	@ (8001170 <_vfiprintf_r+0x21c>)
 8001024:	f7ff f8f4 	bl	8000210 <memchr>
 8001028:	9a04      	ldr	r2, [sp, #16]
 800102a:	b9d8      	cbnz	r0, 8001064 <_vfiprintf_r+0x110>
 800102c:	06d1      	lsls	r1, r2, #27
 800102e:	bf44      	itt	mi
 8001030:	2320      	movmi	r3, #32
 8001032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001036:	0713      	lsls	r3, r2, #28
 8001038:	bf44      	itt	mi
 800103a:	232b      	movmi	r3, #43	@ 0x2b
 800103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001040:	f89a 3000 	ldrb.w	r3, [sl]
 8001044:	2b2a      	cmp	r3, #42	@ 0x2a
 8001046:	d015      	beq.n	8001074 <_vfiprintf_r+0x120>
 8001048:	9a07      	ldr	r2, [sp, #28]
 800104a:	4654      	mov	r4, sl
 800104c:	2000      	movs	r0, #0
 800104e:	f04f 0c0a 	mov.w	ip, #10
 8001052:	4621      	mov	r1, r4
 8001054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001058:	3b30      	subs	r3, #48	@ 0x30
 800105a:	2b09      	cmp	r3, #9
 800105c:	d94b      	bls.n	80010f6 <_vfiprintf_r+0x1a2>
 800105e:	b1b0      	cbz	r0, 800108e <_vfiprintf_r+0x13a>
 8001060:	9207      	str	r2, [sp, #28]
 8001062:	e014      	b.n	800108e <_vfiprintf_r+0x13a>
 8001064:	eba0 0308 	sub.w	r3, r0, r8
 8001068:	fa09 f303 	lsl.w	r3, r9, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	9304      	str	r3, [sp, #16]
 8001070:	46a2      	mov	sl, r4
 8001072:	e7d2      	b.n	800101a <_vfiprintf_r+0xc6>
 8001074:	9b03      	ldr	r3, [sp, #12]
 8001076:	1d19      	adds	r1, r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	9103      	str	r1, [sp, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfbb      	ittet	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	f042 0202 	orrlt.w	r2, r2, #2
 8001086:	9307      	strge	r3, [sp, #28]
 8001088:	9307      	strlt	r3, [sp, #28]
 800108a:	bfb8      	it	lt
 800108c:	9204      	strlt	r2, [sp, #16]
 800108e:	7823      	ldrb	r3, [r4, #0]
 8001090:	2b2e      	cmp	r3, #46	@ 0x2e
 8001092:	d10a      	bne.n	80010aa <_vfiprintf_r+0x156>
 8001094:	7863      	ldrb	r3, [r4, #1]
 8001096:	2b2a      	cmp	r3, #42	@ 0x2a
 8001098:	d132      	bne.n	8001100 <_vfiprintf_r+0x1ac>
 800109a:	9b03      	ldr	r3, [sp, #12]
 800109c:	1d1a      	adds	r2, r3, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9203      	str	r2, [sp, #12]
 80010a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010a6:	3402      	adds	r4, #2
 80010a8:	9305      	str	r3, [sp, #20]
 80010aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001180 <_vfiprintf_r+0x22c>
 80010ae:	7821      	ldrb	r1, [r4, #0]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4650      	mov	r0, sl
 80010b4:	f7ff f8ac 	bl	8000210 <memchr>
 80010b8:	b138      	cbz	r0, 80010ca <_vfiprintf_r+0x176>
 80010ba:	9b04      	ldr	r3, [sp, #16]
 80010bc:	eba0 000a 	sub.w	r0, r0, sl
 80010c0:	2240      	movs	r2, #64	@ 0x40
 80010c2:	4082      	lsls	r2, r0
 80010c4:	4313      	orrs	r3, r2
 80010c6:	3401      	adds	r4, #1
 80010c8:	9304      	str	r3, [sp, #16]
 80010ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ce:	4829      	ldr	r0, [pc, #164]	@ (8001174 <_vfiprintf_r+0x220>)
 80010d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010d4:	2206      	movs	r2, #6
 80010d6:	f7ff f89b 	bl	8000210 <memchr>
 80010da:	2800      	cmp	r0, #0
 80010dc:	d03f      	beq.n	800115e <_vfiprintf_r+0x20a>
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <_vfiprintf_r+0x224>)
 80010e0:	bb1b      	cbnz	r3, 800112a <_vfiprintf_r+0x1d6>
 80010e2:	9b03      	ldr	r3, [sp, #12]
 80010e4:	3307      	adds	r3, #7
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	3308      	adds	r3, #8
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010f0:	443b      	add	r3, r7
 80010f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80010f4:	e76a      	b.n	8000fcc <_vfiprintf_r+0x78>
 80010f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80010fa:	460c      	mov	r4, r1
 80010fc:	2001      	movs	r0, #1
 80010fe:	e7a8      	b.n	8001052 <_vfiprintf_r+0xfe>
 8001100:	2300      	movs	r3, #0
 8001102:	3401      	adds	r4, #1
 8001104:	9305      	str	r3, [sp, #20]
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 0c0a 	mov.w	ip, #10
 800110c:	4620      	mov	r0, r4
 800110e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001112:	3a30      	subs	r2, #48	@ 0x30
 8001114:	2a09      	cmp	r2, #9
 8001116:	d903      	bls.n	8001120 <_vfiprintf_r+0x1cc>
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0c6      	beq.n	80010aa <_vfiprintf_r+0x156>
 800111c:	9105      	str	r1, [sp, #20]
 800111e:	e7c4      	b.n	80010aa <_vfiprintf_r+0x156>
 8001120:	fb0c 2101 	mla	r1, ip, r1, r2
 8001124:	4604      	mov	r4, r0
 8001126:	2301      	movs	r3, #1
 8001128:	e7f0      	b.n	800110c <_vfiprintf_r+0x1b8>
 800112a:	ab03      	add	r3, sp, #12
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	462a      	mov	r2, r5
 8001130:	4b12      	ldr	r3, [pc, #72]	@ (800117c <_vfiprintf_r+0x228>)
 8001132:	a904      	add	r1, sp, #16
 8001134:	4630      	mov	r0, r6
 8001136:	f3af 8000 	nop.w
 800113a:	4607      	mov	r7, r0
 800113c:	1c78      	adds	r0, r7, #1
 800113e:	d1d6      	bne.n	80010ee <_vfiprintf_r+0x19a>
 8001140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001142:	07d9      	lsls	r1, r3, #31
 8001144:	d405      	bmi.n	8001152 <_vfiprintf_r+0x1fe>
 8001146:	89ab      	ldrh	r3, [r5, #12]
 8001148:	059a      	lsls	r2, r3, #22
 800114a:	d402      	bmi.n	8001152 <_vfiprintf_r+0x1fe>
 800114c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800114e:	f7ff fddd 	bl	8000d0c <__retarget_lock_release_recursive>
 8001152:	89ab      	ldrh	r3, [r5, #12]
 8001154:	065b      	lsls	r3, r3, #25
 8001156:	f53f af1f 	bmi.w	8000f98 <_vfiprintf_r+0x44>
 800115a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800115c:	e71e      	b.n	8000f9c <_vfiprintf_r+0x48>
 800115e:	ab03      	add	r3, sp, #12
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	462a      	mov	r2, r5
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <_vfiprintf_r+0x228>)
 8001166:	a904      	add	r1, sp, #16
 8001168:	4630      	mov	r0, r6
 800116a:	f000 f879 	bl	8001260 <_printf_i>
 800116e:	e7e4      	b.n	800113a <_vfiprintf_r+0x1e6>
 8001170:	0800177a 	.word	0x0800177a
 8001174:	08001784 	.word	0x08001784
 8001178:	00000000 	.word	0x00000000
 800117c:	08000f2f 	.word	0x08000f2f
 8001180:	08001780 	.word	0x08001780

08001184 <_printf_common>:
 8001184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001188:	4616      	mov	r6, r2
 800118a:	4698      	mov	r8, r3
 800118c:	688a      	ldr	r2, [r1, #8]
 800118e:	690b      	ldr	r3, [r1, #16]
 8001190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001194:	4293      	cmp	r3, r2
 8001196:	bfb8      	it	lt
 8001198:	4613      	movlt	r3, r2
 800119a:	6033      	str	r3, [r6, #0]
 800119c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80011a0:	4607      	mov	r7, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	b10a      	cbz	r2, 80011aa <_printf_common+0x26>
 80011a6:	3301      	adds	r3, #1
 80011a8:	6033      	str	r3, [r6, #0]
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	0699      	lsls	r1, r3, #26
 80011ae:	bf42      	ittt	mi
 80011b0:	6833      	ldrmi	r3, [r6, #0]
 80011b2:	3302      	addmi	r3, #2
 80011b4:	6033      	strmi	r3, [r6, #0]
 80011b6:	6825      	ldr	r5, [r4, #0]
 80011b8:	f015 0506 	ands.w	r5, r5, #6
 80011bc:	d106      	bne.n	80011cc <_printf_common+0x48>
 80011be:	f104 0a19 	add.w	sl, r4, #25
 80011c2:	68e3      	ldr	r3, [r4, #12]
 80011c4:	6832      	ldr	r2, [r6, #0]
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	42ab      	cmp	r3, r5
 80011ca:	dc26      	bgt.n	800121a <_printf_common+0x96>
 80011cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	3b00      	subs	r3, #0
 80011d4:	bf18      	it	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	0692      	lsls	r2, r2, #26
 80011da:	d42b      	bmi.n	8001234 <_printf_common+0xb0>
 80011dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011e0:	4641      	mov	r1, r8
 80011e2:	4638      	mov	r0, r7
 80011e4:	47c8      	blx	r9
 80011e6:	3001      	adds	r0, #1
 80011e8:	d01e      	beq.n	8001228 <_printf_common+0xa4>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	6922      	ldr	r2, [r4, #16]
 80011ee:	f003 0306 	and.w	r3, r3, #6
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf02      	ittt	eq
 80011f6:	68e5      	ldreq	r5, [r4, #12]
 80011f8:	6833      	ldreq	r3, [r6, #0]
 80011fa:	1aed      	subeq	r5, r5, r3
 80011fc:	68a3      	ldr	r3, [r4, #8]
 80011fe:	bf0c      	ite	eq
 8001200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001204:	2500      	movne	r5, #0
 8001206:	4293      	cmp	r3, r2
 8001208:	bfc4      	itt	gt
 800120a:	1a9b      	subgt	r3, r3, r2
 800120c:	18ed      	addgt	r5, r5, r3
 800120e:	2600      	movs	r6, #0
 8001210:	341a      	adds	r4, #26
 8001212:	42b5      	cmp	r5, r6
 8001214:	d11a      	bne.n	800124c <_printf_common+0xc8>
 8001216:	2000      	movs	r0, #0
 8001218:	e008      	b.n	800122c <_printf_common+0xa8>
 800121a:	2301      	movs	r3, #1
 800121c:	4652      	mov	r2, sl
 800121e:	4641      	mov	r1, r8
 8001220:	4638      	mov	r0, r7
 8001222:	47c8      	blx	r9
 8001224:	3001      	adds	r0, #1
 8001226:	d103      	bne.n	8001230 <_printf_common+0xac>
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001230:	3501      	adds	r5, #1
 8001232:	e7c6      	b.n	80011c2 <_printf_common+0x3e>
 8001234:	18e1      	adds	r1, r4, r3
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	2030      	movs	r0, #48	@ 0x30
 800123a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800123e:	4422      	add	r2, r4
 8001240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001248:	3302      	adds	r3, #2
 800124a:	e7c7      	b.n	80011dc <_printf_common+0x58>
 800124c:	2301      	movs	r3, #1
 800124e:	4622      	mov	r2, r4
 8001250:	4641      	mov	r1, r8
 8001252:	4638      	mov	r0, r7
 8001254:	47c8      	blx	r9
 8001256:	3001      	adds	r0, #1
 8001258:	d0e6      	beq.n	8001228 <_printf_common+0xa4>
 800125a:	3601      	adds	r6, #1
 800125c:	e7d9      	b.n	8001212 <_printf_common+0x8e>
	...

08001260 <_printf_i>:
 8001260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	7e0f      	ldrb	r7, [r1, #24]
 8001266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001268:	2f78      	cmp	r7, #120	@ 0x78
 800126a:	4691      	mov	r9, r2
 800126c:	4680      	mov	r8, r0
 800126e:	460c      	mov	r4, r1
 8001270:	469a      	mov	sl, r3
 8001272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001276:	d807      	bhi.n	8001288 <_printf_i+0x28>
 8001278:	2f62      	cmp	r7, #98	@ 0x62
 800127a:	d80a      	bhi.n	8001292 <_printf_i+0x32>
 800127c:	2f00      	cmp	r7, #0
 800127e:	f000 80d1 	beq.w	8001424 <_printf_i+0x1c4>
 8001282:	2f58      	cmp	r7, #88	@ 0x58
 8001284:	f000 80b8 	beq.w	80013f8 <_printf_i+0x198>
 8001288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800128c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001290:	e03a      	b.n	8001308 <_printf_i+0xa8>
 8001292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001296:	2b15      	cmp	r3, #21
 8001298:	d8f6      	bhi.n	8001288 <_printf_i+0x28>
 800129a:	a101      	add	r1, pc, #4	@ (adr r1, 80012a0 <_printf_i+0x40>)
 800129c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012a0:	080012f9 	.word	0x080012f9
 80012a4:	0800130d 	.word	0x0800130d
 80012a8:	08001289 	.word	0x08001289
 80012ac:	08001289 	.word	0x08001289
 80012b0:	08001289 	.word	0x08001289
 80012b4:	08001289 	.word	0x08001289
 80012b8:	0800130d 	.word	0x0800130d
 80012bc:	08001289 	.word	0x08001289
 80012c0:	08001289 	.word	0x08001289
 80012c4:	08001289 	.word	0x08001289
 80012c8:	08001289 	.word	0x08001289
 80012cc:	0800140b 	.word	0x0800140b
 80012d0:	08001337 	.word	0x08001337
 80012d4:	080013c5 	.word	0x080013c5
 80012d8:	08001289 	.word	0x08001289
 80012dc:	08001289 	.word	0x08001289
 80012e0:	0800142d 	.word	0x0800142d
 80012e4:	08001289 	.word	0x08001289
 80012e8:	08001337 	.word	0x08001337
 80012ec:	08001289 	.word	0x08001289
 80012f0:	08001289 	.word	0x08001289
 80012f4:	080013cd 	.word	0x080013cd
 80012f8:	6833      	ldr	r3, [r6, #0]
 80012fa:	1d1a      	adds	r2, r3, #4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6032      	str	r2, [r6, #0]
 8001300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001308:	2301      	movs	r3, #1
 800130a:	e09c      	b.n	8001446 <_printf_i+0x1e6>
 800130c:	6833      	ldr	r3, [r6, #0]
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	1d19      	adds	r1, r3, #4
 8001312:	6031      	str	r1, [r6, #0]
 8001314:	0606      	lsls	r6, r0, #24
 8001316:	d501      	bpl.n	800131c <_printf_i+0xbc>
 8001318:	681d      	ldr	r5, [r3, #0]
 800131a:	e003      	b.n	8001324 <_printf_i+0xc4>
 800131c:	0645      	lsls	r5, r0, #25
 800131e:	d5fb      	bpl.n	8001318 <_printf_i+0xb8>
 8001320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001324:	2d00      	cmp	r5, #0
 8001326:	da03      	bge.n	8001330 <_printf_i+0xd0>
 8001328:	232d      	movs	r3, #45	@ 0x2d
 800132a:	426d      	negs	r5, r5
 800132c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001330:	4858      	ldr	r0, [pc, #352]	@ (8001494 <_printf_i+0x234>)
 8001332:	230a      	movs	r3, #10
 8001334:	e011      	b.n	800135a <_printf_i+0xfa>
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	6833      	ldr	r3, [r6, #0]
 800133a:	0608      	lsls	r0, r1, #24
 800133c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001340:	d402      	bmi.n	8001348 <_printf_i+0xe8>
 8001342:	0649      	lsls	r1, r1, #25
 8001344:	bf48      	it	mi
 8001346:	b2ad      	uxthmi	r5, r5
 8001348:	2f6f      	cmp	r7, #111	@ 0x6f
 800134a:	4852      	ldr	r0, [pc, #328]	@ (8001494 <_printf_i+0x234>)
 800134c:	6033      	str	r3, [r6, #0]
 800134e:	bf14      	ite	ne
 8001350:	230a      	movne	r3, #10
 8001352:	2308      	moveq	r3, #8
 8001354:	2100      	movs	r1, #0
 8001356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800135a:	6866      	ldr	r6, [r4, #4]
 800135c:	60a6      	str	r6, [r4, #8]
 800135e:	2e00      	cmp	r6, #0
 8001360:	db05      	blt.n	800136e <_printf_i+0x10e>
 8001362:	6821      	ldr	r1, [r4, #0]
 8001364:	432e      	orrs	r6, r5
 8001366:	f021 0104 	bic.w	r1, r1, #4
 800136a:	6021      	str	r1, [r4, #0]
 800136c:	d04b      	beq.n	8001406 <_printf_i+0x1a6>
 800136e:	4616      	mov	r6, r2
 8001370:	fbb5 f1f3 	udiv	r1, r5, r3
 8001374:	fb03 5711 	mls	r7, r3, r1, r5
 8001378:	5dc7      	ldrb	r7, [r0, r7]
 800137a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800137e:	462f      	mov	r7, r5
 8001380:	42bb      	cmp	r3, r7
 8001382:	460d      	mov	r5, r1
 8001384:	d9f4      	bls.n	8001370 <_printf_i+0x110>
 8001386:	2b08      	cmp	r3, #8
 8001388:	d10b      	bne.n	80013a2 <_printf_i+0x142>
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	07df      	lsls	r7, r3, #31
 800138e:	d508      	bpl.n	80013a2 <_printf_i+0x142>
 8001390:	6923      	ldr	r3, [r4, #16]
 8001392:	6861      	ldr	r1, [r4, #4]
 8001394:	4299      	cmp	r1, r3
 8001396:	bfde      	ittt	le
 8001398:	2330      	movle	r3, #48	@ 0x30
 800139a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800139e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013a2:	1b92      	subs	r2, r2, r6
 80013a4:	6122      	str	r2, [r4, #16]
 80013a6:	f8cd a000 	str.w	sl, [sp]
 80013aa:	464b      	mov	r3, r9
 80013ac:	aa03      	add	r2, sp, #12
 80013ae:	4621      	mov	r1, r4
 80013b0:	4640      	mov	r0, r8
 80013b2:	f7ff fee7 	bl	8001184 <_printf_common>
 80013b6:	3001      	adds	r0, #1
 80013b8:	d14a      	bne.n	8001450 <_printf_i+0x1f0>
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295
 80013be:	b004      	add	sp, #16
 80013c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6023      	str	r3, [r4, #0]
 80013cc:	4832      	ldr	r0, [pc, #200]	@ (8001498 <_printf_i+0x238>)
 80013ce:	2778      	movs	r7, #120	@ 0x78
 80013d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	6831      	ldr	r1, [r6, #0]
 80013d8:	061f      	lsls	r7, r3, #24
 80013da:	f851 5b04 	ldr.w	r5, [r1], #4
 80013de:	d402      	bmi.n	80013e6 <_printf_i+0x186>
 80013e0:	065f      	lsls	r7, r3, #25
 80013e2:	bf48      	it	mi
 80013e4:	b2ad      	uxthmi	r5, r5
 80013e6:	6031      	str	r1, [r6, #0]
 80013e8:	07d9      	lsls	r1, r3, #31
 80013ea:	bf44      	itt	mi
 80013ec:	f043 0320 	orrmi.w	r3, r3, #32
 80013f0:	6023      	strmi	r3, [r4, #0]
 80013f2:	b11d      	cbz	r5, 80013fc <_printf_i+0x19c>
 80013f4:	2310      	movs	r3, #16
 80013f6:	e7ad      	b.n	8001354 <_printf_i+0xf4>
 80013f8:	4826      	ldr	r0, [pc, #152]	@ (8001494 <_printf_i+0x234>)
 80013fa:	e7e9      	b.n	80013d0 <_printf_i+0x170>
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	f023 0320 	bic.w	r3, r3, #32
 8001402:	6023      	str	r3, [r4, #0]
 8001404:	e7f6      	b.n	80013f4 <_printf_i+0x194>
 8001406:	4616      	mov	r6, r2
 8001408:	e7bd      	b.n	8001386 <_printf_i+0x126>
 800140a:	6833      	ldr	r3, [r6, #0]
 800140c:	6825      	ldr	r5, [r4, #0]
 800140e:	6961      	ldr	r1, [r4, #20]
 8001410:	1d18      	adds	r0, r3, #4
 8001412:	6030      	str	r0, [r6, #0]
 8001414:	062e      	lsls	r6, r5, #24
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	d501      	bpl.n	800141e <_printf_i+0x1be>
 800141a:	6019      	str	r1, [r3, #0]
 800141c:	e002      	b.n	8001424 <_printf_i+0x1c4>
 800141e:	0668      	lsls	r0, r5, #25
 8001420:	d5fb      	bpl.n	800141a <_printf_i+0x1ba>
 8001422:	8019      	strh	r1, [r3, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	6123      	str	r3, [r4, #16]
 8001428:	4616      	mov	r6, r2
 800142a:	e7bc      	b.n	80013a6 <_printf_i+0x146>
 800142c:	6833      	ldr	r3, [r6, #0]
 800142e:	1d1a      	adds	r2, r3, #4
 8001430:	6032      	str	r2, [r6, #0]
 8001432:	681e      	ldr	r6, [r3, #0]
 8001434:	6862      	ldr	r2, [r4, #4]
 8001436:	2100      	movs	r1, #0
 8001438:	4630      	mov	r0, r6
 800143a:	f7fe fee9 	bl	8000210 <memchr>
 800143e:	b108      	cbz	r0, 8001444 <_printf_i+0x1e4>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	6060      	str	r0, [r4, #4]
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	6123      	str	r3, [r4, #16]
 8001448:	2300      	movs	r3, #0
 800144a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800144e:	e7aa      	b.n	80013a6 <_printf_i+0x146>
 8001450:	6923      	ldr	r3, [r4, #16]
 8001452:	4632      	mov	r2, r6
 8001454:	4649      	mov	r1, r9
 8001456:	4640      	mov	r0, r8
 8001458:	47d0      	blx	sl
 800145a:	3001      	adds	r0, #1
 800145c:	d0ad      	beq.n	80013ba <_printf_i+0x15a>
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	079b      	lsls	r3, r3, #30
 8001462:	d413      	bmi.n	800148c <_printf_i+0x22c>
 8001464:	68e0      	ldr	r0, [r4, #12]
 8001466:	9b03      	ldr	r3, [sp, #12]
 8001468:	4298      	cmp	r0, r3
 800146a:	bfb8      	it	lt
 800146c:	4618      	movlt	r0, r3
 800146e:	e7a6      	b.n	80013be <_printf_i+0x15e>
 8001470:	2301      	movs	r3, #1
 8001472:	4632      	mov	r2, r6
 8001474:	4649      	mov	r1, r9
 8001476:	4640      	mov	r0, r8
 8001478:	47d0      	blx	sl
 800147a:	3001      	adds	r0, #1
 800147c:	d09d      	beq.n	80013ba <_printf_i+0x15a>
 800147e:	3501      	adds	r5, #1
 8001480:	68e3      	ldr	r3, [r4, #12]
 8001482:	9903      	ldr	r1, [sp, #12]
 8001484:	1a5b      	subs	r3, r3, r1
 8001486:	42ab      	cmp	r3, r5
 8001488:	dcf2      	bgt.n	8001470 <_printf_i+0x210>
 800148a:	e7eb      	b.n	8001464 <_printf_i+0x204>
 800148c:	2500      	movs	r5, #0
 800148e:	f104 0619 	add.w	r6, r4, #25
 8001492:	e7f5      	b.n	8001480 <_printf_i+0x220>
 8001494:	0800178b 	.word	0x0800178b
 8001498:	0800179c 	.word	0x0800179c

0800149c <__sflush_r>:
 800149c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014a4:	0716      	lsls	r6, r2, #28
 80014a6:	4605      	mov	r5, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	d454      	bmi.n	8001556 <__sflush_r+0xba>
 80014ac:	684b      	ldr	r3, [r1, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dc02      	bgt.n	80014b8 <__sflush_r+0x1c>
 80014b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd48      	ble.n	800154a <__sflush_r+0xae>
 80014b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014ba:	2e00      	cmp	r6, #0
 80014bc:	d045      	beq.n	800154a <__sflush_r+0xae>
 80014be:	2300      	movs	r3, #0
 80014c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014c4:	682f      	ldr	r7, [r5, #0]
 80014c6:	6a21      	ldr	r1, [r4, #32]
 80014c8:	602b      	str	r3, [r5, #0]
 80014ca:	d030      	beq.n	800152e <__sflush_r+0x92>
 80014cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	0759      	lsls	r1, r3, #29
 80014d2:	d505      	bpl.n	80014e0 <__sflush_r+0x44>
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	1ad2      	subs	r2, r2, r3
 80014d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014da:	b10b      	cbz	r3, 80014e0 <__sflush_r+0x44>
 80014dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	2300      	movs	r3, #0
 80014e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014e4:	6a21      	ldr	r1, [r4, #32]
 80014e6:	4628      	mov	r0, r5
 80014e8:	47b0      	blx	r6
 80014ea:	1c43      	adds	r3, r0, #1
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	d106      	bne.n	80014fe <__sflush_r+0x62>
 80014f0:	6829      	ldr	r1, [r5, #0]
 80014f2:	291d      	cmp	r1, #29
 80014f4:	d82b      	bhi.n	800154e <__sflush_r+0xb2>
 80014f6:	4a2a      	ldr	r2, [pc, #168]	@ (80015a0 <__sflush_r+0x104>)
 80014f8:	40ca      	lsrs	r2, r1
 80014fa:	07d6      	lsls	r6, r2, #31
 80014fc:	d527      	bpl.n	800154e <__sflush_r+0xb2>
 80014fe:	2200      	movs	r2, #0
 8001500:	6062      	str	r2, [r4, #4]
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	6922      	ldr	r2, [r4, #16]
 8001506:	6022      	str	r2, [r4, #0]
 8001508:	d504      	bpl.n	8001514 <__sflush_r+0x78>
 800150a:	1c42      	adds	r2, r0, #1
 800150c:	d101      	bne.n	8001512 <__sflush_r+0x76>
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	b903      	cbnz	r3, 8001514 <__sflush_r+0x78>
 8001512:	6560      	str	r0, [r4, #84]	@ 0x54
 8001514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001516:	602f      	str	r7, [r5, #0]
 8001518:	b1b9      	cbz	r1, 800154a <__sflush_r+0xae>
 800151a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800151e:	4299      	cmp	r1, r3
 8001520:	d002      	beq.n	8001528 <__sflush_r+0x8c>
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff fbf4 	bl	8000d10 <_free_r>
 8001528:	2300      	movs	r3, #0
 800152a:	6363      	str	r3, [r4, #52]	@ 0x34
 800152c:	e00d      	b.n	800154a <__sflush_r+0xae>
 800152e:	2301      	movs	r3, #1
 8001530:	4628      	mov	r0, r5
 8001532:	47b0      	blx	r6
 8001534:	4602      	mov	r2, r0
 8001536:	1c50      	adds	r0, r2, #1
 8001538:	d1c9      	bne.n	80014ce <__sflush_r+0x32>
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0c6      	beq.n	80014ce <__sflush_r+0x32>
 8001540:	2b1d      	cmp	r3, #29
 8001542:	d001      	beq.n	8001548 <__sflush_r+0xac>
 8001544:	2b16      	cmp	r3, #22
 8001546:	d11e      	bne.n	8001586 <__sflush_r+0xea>
 8001548:	602f      	str	r7, [r5, #0]
 800154a:	2000      	movs	r0, #0
 800154c:	e022      	b.n	8001594 <__sflush_r+0xf8>
 800154e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001552:	b21b      	sxth	r3, r3
 8001554:	e01b      	b.n	800158e <__sflush_r+0xf2>
 8001556:	690f      	ldr	r7, [r1, #16]
 8001558:	2f00      	cmp	r7, #0
 800155a:	d0f6      	beq.n	800154a <__sflush_r+0xae>
 800155c:	0793      	lsls	r3, r2, #30
 800155e:	680e      	ldr	r6, [r1, #0]
 8001560:	bf08      	it	eq
 8001562:	694b      	ldreq	r3, [r1, #20]
 8001564:	600f      	str	r7, [r1, #0]
 8001566:	bf18      	it	ne
 8001568:	2300      	movne	r3, #0
 800156a:	eba6 0807 	sub.w	r8, r6, r7
 800156e:	608b      	str	r3, [r1, #8]
 8001570:	f1b8 0f00 	cmp.w	r8, #0
 8001574:	dde9      	ble.n	800154a <__sflush_r+0xae>
 8001576:	6a21      	ldr	r1, [r4, #32]
 8001578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800157a:	4643      	mov	r3, r8
 800157c:	463a      	mov	r2, r7
 800157e:	4628      	mov	r0, r5
 8001580:	47b0      	blx	r6
 8001582:	2800      	cmp	r0, #0
 8001584:	dc08      	bgt.n	8001598 <__sflush_r+0xfc>
 8001586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800158a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800158e:	81a3      	strh	r3, [r4, #12]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001598:	4407      	add	r7, r0
 800159a:	eba8 0800 	sub.w	r8, r8, r0
 800159e:	e7e7      	b.n	8001570 <__sflush_r+0xd4>
 80015a0:	20400001 	.word	0x20400001

080015a4 <_fflush_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	690b      	ldr	r3, [r1, #16]
 80015a8:	4605      	mov	r5, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	b913      	cbnz	r3, 80015b4 <_fflush_r+0x10>
 80015ae:	2500      	movs	r5, #0
 80015b0:	4628      	mov	r0, r5
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	b118      	cbz	r0, 80015be <_fflush_r+0x1a>
 80015b6:	6a03      	ldr	r3, [r0, #32]
 80015b8:	b90b      	cbnz	r3, 80015be <_fflush_r+0x1a>
 80015ba:	f7ff f9af 	bl	800091c <__sinit>
 80015be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f3      	beq.n	80015ae <_fflush_r+0xa>
 80015c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015c8:	07d0      	lsls	r0, r2, #31
 80015ca:	d404      	bmi.n	80015d6 <_fflush_r+0x32>
 80015cc:	0599      	lsls	r1, r3, #22
 80015ce:	d402      	bmi.n	80015d6 <_fflush_r+0x32>
 80015d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015d2:	f7ff fb9a 	bl	8000d0a <__retarget_lock_acquire_recursive>
 80015d6:	4628      	mov	r0, r5
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff ff5f 	bl	800149c <__sflush_r>
 80015de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015e0:	07da      	lsls	r2, r3, #31
 80015e2:	4605      	mov	r5, r0
 80015e4:	d4e4      	bmi.n	80015b0 <_fflush_r+0xc>
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	059b      	lsls	r3, r3, #22
 80015ea:	d4e1      	bmi.n	80015b0 <_fflush_r+0xc>
 80015ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015ee:	f7ff fb8d 	bl	8000d0c <__retarget_lock_release_recursive>
 80015f2:	e7dd      	b.n	80015b0 <_fflush_r+0xc>

080015f4 <__swhatbuf_r>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	460c      	mov	r4, r1
 80015f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015fc:	2900      	cmp	r1, #0
 80015fe:	b096      	sub	sp, #88	@ 0x58
 8001600:	4615      	mov	r5, r2
 8001602:	461e      	mov	r6, r3
 8001604:	da0d      	bge.n	8001622 <__swhatbuf_r+0x2e>
 8001606:	89a3      	ldrh	r3, [r4, #12]
 8001608:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	bf14      	ite	ne
 8001612:	2340      	movne	r3, #64	@ 0x40
 8001614:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001618:	2000      	movs	r0, #0
 800161a:	6031      	str	r1, [r6, #0]
 800161c:	602b      	str	r3, [r5, #0]
 800161e:	b016      	add	sp, #88	@ 0x58
 8001620:	bd70      	pop	{r4, r5, r6, pc}
 8001622:	466a      	mov	r2, sp
 8001624:	f000 f848 	bl	80016b8 <_fstat_r>
 8001628:	2800      	cmp	r0, #0
 800162a:	dbec      	blt.n	8001606 <__swhatbuf_r+0x12>
 800162c:	9901      	ldr	r1, [sp, #4]
 800162e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001632:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001636:	4259      	negs	r1, r3
 8001638:	4159      	adcs	r1, r3
 800163a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800163e:	e7eb      	b.n	8001618 <__swhatbuf_r+0x24>

08001640 <__smakebuf_r>:
 8001640:	898b      	ldrh	r3, [r1, #12]
 8001642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001644:	079d      	lsls	r5, r3, #30
 8001646:	4606      	mov	r6, r0
 8001648:	460c      	mov	r4, r1
 800164a:	d507      	bpl.n	800165c <__smakebuf_r+0x1c>
 800164c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	6123      	str	r3, [r4, #16]
 8001654:	2301      	movs	r3, #1
 8001656:	6163      	str	r3, [r4, #20]
 8001658:	b003      	add	sp, #12
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	ab01      	add	r3, sp, #4
 800165e:	466a      	mov	r2, sp
 8001660:	f7ff ffc8 	bl	80015f4 <__swhatbuf_r>
 8001664:	9f00      	ldr	r7, [sp, #0]
 8001666:	4605      	mov	r5, r0
 8001668:	4639      	mov	r1, r7
 800166a:	4630      	mov	r0, r6
 800166c:	f7ff fbbc 	bl	8000de8 <_malloc_r>
 8001670:	b948      	cbnz	r0, 8001686 <__smakebuf_r+0x46>
 8001672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001676:	059a      	lsls	r2, r3, #22
 8001678:	d4ee      	bmi.n	8001658 <__smakebuf_r+0x18>
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	81a3      	strh	r3, [r4, #12]
 8001684:	e7e2      	b.n	800164c <__smakebuf_r+0xc>
 8001686:	89a3      	ldrh	r3, [r4, #12]
 8001688:	6020      	str	r0, [r4, #0]
 800168a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168e:	81a3      	strh	r3, [r4, #12]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001696:	b15b      	cbz	r3, 80016b0 <__smakebuf_r+0x70>
 8001698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800169c:	4630      	mov	r0, r6
 800169e:	f000 f81d 	bl	80016dc <_isatty_r>
 80016a2:	b128      	cbz	r0, 80016b0 <__smakebuf_r+0x70>
 80016a4:	89a3      	ldrh	r3, [r4, #12]
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	81a3      	strh	r3, [r4, #12]
 80016b0:	89a3      	ldrh	r3, [r4, #12]
 80016b2:	431d      	orrs	r5, r3
 80016b4:	81a5      	strh	r5, [r4, #12]
 80016b6:	e7cf      	b.n	8001658 <__smakebuf_r+0x18>

080016b8 <_fstat_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d07      	ldr	r5, [pc, #28]	@ (80016d8 <_fstat_r+0x20>)
 80016bc:	2300      	movs	r3, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	602b      	str	r3, [r5, #0]
 80016c6:	f7fe ff72 	bl	80005ae <_fstat>
 80016ca:	1c43      	adds	r3, r0, #1
 80016cc:	d102      	bne.n	80016d4 <_fstat_r+0x1c>
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	b103      	cbz	r3, 80016d4 <_fstat_r+0x1c>
 80016d2:	6023      	str	r3, [r4, #0]
 80016d4:	bd38      	pop	{r3, r4, r5, pc}
 80016d6:	bf00      	nop
 80016d8:	200001bc 	.word	0x200001bc

080016dc <_isatty_r>:
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4d06      	ldr	r5, [pc, #24]	@ (80016f8 <_isatty_r+0x1c>)
 80016e0:	2300      	movs	r3, #0
 80016e2:	4604      	mov	r4, r0
 80016e4:	4608      	mov	r0, r1
 80016e6:	602b      	str	r3, [r5, #0]
 80016e8:	f7fe ff71 	bl	80005ce <_isatty>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	d102      	bne.n	80016f6 <_isatty_r+0x1a>
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	b103      	cbz	r3, 80016f6 <_isatty_r+0x1a>
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	200001bc 	.word	0x200001bc

080016fc <_sbrk_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4d06      	ldr	r5, [pc, #24]	@ (8001718 <_sbrk_r+0x1c>)
 8001700:	2300      	movs	r3, #0
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	f7fe ff7a 	bl	8000600 <_sbrk>
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d102      	bne.n	8001716 <_sbrk_r+0x1a>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	b103      	cbz	r3, 8001716 <_sbrk_r+0x1a>
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	bd38      	pop	{r3, r4, r5, pc}
 8001718:	200001bc 	.word	0x200001bc

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
