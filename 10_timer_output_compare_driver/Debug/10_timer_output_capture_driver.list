
10_timer_output_capture_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000380  08000380  00001388  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000380  08000380  00001388  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000380  08000388  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000384  08000384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000388  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000388  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004d7  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000136  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000019c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019745  00000000  00000000  00001a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c9a  00000000  00000000  0001b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecce  00000000  00000000  0001be5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aab2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000aab70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000aac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000368 	.word	0x08000368

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000368 	.word	0x08000368

08000204 <main>:
#include <stm32f4xx.h>
#include "uart.h"
#include "timer.h"


int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	tim2_pa5_output_compare();
 8000208:	f000 f802 	bl	8000210 <tim2_pa5_output_compare>
    while(1){
 800020c:	bf00      	nop
 800020e:	e7fd      	b.n	800020c <main+0x8>

08000210 <tim2_pa5_output_compare>:
#define TIMx_CR1_CEN        (1U << 0)
#define TIMx_CCER_CC1E      (1U << 0)
#define TIMx_CCMR1_OC1M_TOGGLE  ((1U << 4) | (1U << 5))  // Toggle Mode (011)
#define TIMx_CCMR1_OC1PE    (1U << 3) // Output Compare Preload Enable

void tim2_pa5_output_compare(void) {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000214:	4b2b      	ldr	r3, [pc, #172]	@ (80002c4 <tim2_pa5_output_compare+0xb4>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000218:	4a2a      	ldr	r2, [pc, #168]	@ (80002c4 <tim2_pa5_output_compare+0xb4>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA5 to alternate function mode
    GPIOA->MODER &= ~(1U << 10);  // Clear bit 10
 8000220:	4b29      	ldr	r3, [pc, #164]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a28      	ldr	r2, [pc, #160]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 8000226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1U << 11);   // Set bit 11 (AF mode)
 800022c:	4b26      	ldr	r3, [pc, #152]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a25      	ldr	r2, [pc, #148]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 8000232:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000236:	6013      	str	r3, [r2, #0]

    // Set PA5 alternate function to AF1 (TIM2_CH1)
    GPIOA->AFR[0] &= ~(0xF << 20);  // Clear bits 20-23
 8000238:	4b23      	ldr	r3, [pc, #140]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a22      	ldr	r2, [pc, #136]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000242:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U << 20);    // AF1 (TIM2_CH1)
 8000244:	4b20      	ldr	r3, [pc, #128]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a1f      	ldr	r2, [pc, #124]	@ (80002c8 <tim2_pa5_output_compare+0xb8>)
 800024a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800024e:	6213      	str	r3, [r2, #32]

    // Enable clock access to TIM2
    RCC->APB1ENR |= APB1ENR_TIM2EN;
 8000250:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <tim2_pa5_output_compare+0xb4>)
 8000252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000254:	4a1b      	ldr	r2, [pc, #108]	@ (80002c4 <tim2_pa5_output_compare+0xb4>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler value
    TIM2->PSC = 16000 - 1;  // 16MHz / 16000 = 1kHz
 800025c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000260:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000264:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set auto-reload value
    TIM2->ARR = 1000 - 1;   // 1kHz / 1000 = 1Hz (1s)
 8000266:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800026e:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set Output Compare Toggle mode on Channel 1
    TIM2->CCMR1 |= TIMx_CCMR1_OC1M_TOGGLE;  // Set OC1M = 011 (toggle mode)
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800027e:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIMx_CCMR1_OC1PE;        // Enable preload (recommended)
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]

    // Enable Output Compare Channel 1
    TIM2->CCER |= TIMx_CCER_CC1E;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	6a1b      	ldr	r3, [r3, #32]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6213      	str	r3, [r2, #32]

    // Clear counter
    TIM2->CNT = 0;
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	2200      	movs	r2, #0
 80002a6:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable timer
    TIM2->CR1 |= TIMx_CR1_CEN;
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020000 	.word	0x40020000

080002cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d4:	480c      	ldr	r0, [pc, #48]	@ (8000308 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000310 <LoopForever+0xe>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002dc:	e002      	b.n	80002e4 <LoopCopyDataInit>

080002de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e2:	3304      	adds	r3, #4

080002e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e8:	d3f9      	bcc.n	80002de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000318 <LoopForever+0x16>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f0:	e001      	b.n	80002f6 <LoopFillZerobss>

080002f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f4:	3204      	adds	r2, #4

080002f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f8:	d3fb      	bcc.n	80002f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fa:	f000 f811 	bl	8000320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fe:	f7ff ff81 	bl	8000204 <main>

08000302 <LoopForever>:

LoopForever:
  b LoopForever
 8000302:	e7fe      	b.n	8000302 <LoopForever>
  ldr   r0, =_estack
 8000304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800030c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000310:	08000388 	.word	0x08000388
  ldr r2, =_sbss
 8000314:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000318:	2000001c 	.word	0x2000001c

0800031c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800031c:	e7fe      	b.n	800031c <ADC_IRQHandler>
	...

08000320 <__libc_init_array>:
 8000320:	b570      	push	{r4, r5, r6, lr}
 8000322:	4d0d      	ldr	r5, [pc, #52]	@ (8000358 <__libc_init_array+0x38>)
 8000324:	4c0d      	ldr	r4, [pc, #52]	@ (800035c <__libc_init_array+0x3c>)
 8000326:	1b64      	subs	r4, r4, r5
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	2600      	movs	r6, #0
 800032c:	42a6      	cmp	r6, r4
 800032e:	d109      	bne.n	8000344 <__libc_init_array+0x24>
 8000330:	4d0b      	ldr	r5, [pc, #44]	@ (8000360 <__libc_init_array+0x40>)
 8000332:	4c0c      	ldr	r4, [pc, #48]	@ (8000364 <__libc_init_array+0x44>)
 8000334:	f000 f818 	bl	8000368 <_init>
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	2600      	movs	r6, #0
 800033e:	42a6      	cmp	r6, r4
 8000340:	d105      	bne.n	800034e <__libc_init_array+0x2e>
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f855 3b04 	ldr.w	r3, [r5], #4
 8000348:	4798      	blx	r3
 800034a:	3601      	adds	r6, #1
 800034c:	e7ee      	b.n	800032c <__libc_init_array+0xc>
 800034e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000352:	4798      	blx	r3
 8000354:	3601      	adds	r6, #1
 8000356:	e7f2      	b.n	800033e <__libc_init_array+0x1e>
 8000358:	08000380 	.word	0x08000380
 800035c:	08000380 	.word	0x08000380
 8000360:	08000380 	.word	0x08000380
 8000364:	08000384 	.word	0x08000384

08000368 <_init>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

08000374 <_fini>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr
