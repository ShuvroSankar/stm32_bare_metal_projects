
7_uart_tx_moduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e38  08000e38  00001e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e4c  08000e4c  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e4c  08000e4c  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e4c  08000e4c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e4c  08000e4c  00001e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e50  08000e50  00001e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e54  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000eb0  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000eb0  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cf0  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000440  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000031c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e4  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a912  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b0d  00000000  00000000  0001dd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d9e  00000000  00000000  0001f813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a6c  00000000  00000000  000b05f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000b1060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e20 	.word	0x08000e20

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000e20 	.word	0x08000e20

08000204 <main>:
#include "uart.h"




int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    uart_tx_init();
 8000208:	f000 f8b6 	bl	8000378 <uart_tx_init>
    while(1){
        printf("How are you....\r\n");  // Transmit 'y' continuously
 800020c:	4801      	ldr	r0, [pc, #4]	@ (8000214 <main+0x10>)
 800020e:	f000 fa73 	bl	80006f8 <puts>
 8000212:	e7fb      	b.n	800020c <main+0x8>
 8000214:	08000e38 	.word	0x08000e38

08000218 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
 8000228:	e00a      	b.n	8000240 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800022a:	f3af 8000 	nop.w
 800022e:	4601      	mov	r1, r0
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1c5a      	adds	r2, r3, #1
 8000234:	60ba      	str	r2, [r7, #8]
 8000236:	b2ca      	uxtb	r2, r1
 8000238:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	3301      	adds	r3, #1
 800023e:	617b      	str	r3, [r7, #20]
 8000240:	697a      	ldr	r2, [r7, #20]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	429a      	cmp	r2, r3
 8000246:	dbf0      	blt.n	800022a <_read+0x12>
  }

  return len;
 8000248:	687b      	ldr	r3, [r7, #4]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3718      	adds	r7, #24
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b086      	sub	sp, #24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
 8000262:	e009      	b.n	8000278 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	60ba      	str	r2, [r7, #8]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f877 	bl	8000360 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	3301      	adds	r3, #1
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	dbf1      	blt.n	8000264 <_write+0x12>
  }
  return len;
 8000280:	687b      	ldr	r3, [r7, #4]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <_close>:

int _close(int file)
{
 800028a:	b480      	push	{r7}
 800028c:	b083      	sub	sp, #12
 800028e:	af00      	add	r7, sp, #0
 8000290:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002b2:	605a      	str	r2, [r3, #4]
  return 0;
 80002b4:	2300      	movs	r3, #0
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <_isatty>:

int _isatty(int file)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002ca:	2301      	movs	r3, #1
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002e4:	2300      	movs	r3, #0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002fc:	4a14      	ldr	r2, [pc, #80]	@ (8000350 <_sbrk+0x5c>)
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <_sbrk+0x60>)
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000308:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <_sbrk+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d102      	bne.n	8000316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <_sbrk+0x64>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <_sbrk+0x68>)
 8000314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <_sbrk+0x64>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	693a      	ldr	r2, [r7, #16]
 8000320:	429a      	cmp	r2, r3
 8000322:	d207      	bcs.n	8000334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000324:	f000 fb16 	bl	8000954 <__errno>
 8000328:	4603      	mov	r3, r0
 800032a:	220c      	movs	r2, #12
 800032c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800032e:	f04f 33ff 	mov.w	r3, #4294967295
 8000332:	e009      	b.n	8000348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <_sbrk+0x64>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800033a:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <_sbrk+0x64>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	4a05      	ldr	r2, [pc, #20]	@ (8000358 <_sbrk+0x64>)
 8000344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000346:	68fb      	ldr	r3, [r7, #12]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20020000 	.word	0x20020000
 8000354:	00000400 	.word	0x00000400
 8000358:	20000078 	.word	0x20000078
 800035c:	200001c8 	.word	0x200001c8

08000360 <__io_putchar>:
void uart_tx_init(void);
static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate);
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate);
void uart2_write(int ch);

int __io_putchar(int ch){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f000 f847 	bl	80003fc <uart2_write>
	return ch;
 800036e:	687b      	ldr	r3, [r7, #4]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <uart_tx_init>:



void uart_tx_init(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <uart_tx_init+0x74>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a1a      	ldr	r2, [pc, #104]	@ (80003ec <uart_tx_init+0x74>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<5);
 8000388:	4b19      	ldr	r3, [pc, #100]	@ (80003f0 <uart_tx_init+0x78>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a18      	ldr	r2, [pc, #96]	@ (80003f0 <uart_tx_init+0x78>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<4);
 8000394:	4b16      	ldr	r3, [pc, #88]	@ (80003f0 <uart_tx_init+0x78>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a15      	ldr	r2, [pc, #84]	@ (80003f0 <uart_tx_init+0x78>)
 800039a:	f023 0310 	bic.w	r3, r3, #16
 800039e:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 TX)
    GPIOA->AFR[0] &= ~(0xF << 8); // Clear bits 8-11 for PA2
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <uart_tx_init+0x78>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <uart_tx_init+0x78>)
 80003a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003aa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);  // AF7 is 0111
 80003ac:	4b10      	ldr	r3, [pc, #64]	@ (80003f0 <uart_tx_init+0x78>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a0f      	ldr	r2, [pc, #60]	@ (80003f0 <uart_tx_init+0x78>)
 80003b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80003b6:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= UART2EN;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <uart_tx_init+0x74>)
 80003ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003bc:	4a0b      	ldr	r2, [pc, #44]	@ (80003ec <uart_tx_init+0x74>)
 80003be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c2:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003c8:	490a      	ldr	r1, [pc, #40]	@ (80003f4 <uart_tx_init+0x7c>)
 80003ca:	480b      	ldr	r0, [pc, #44]	@ (80003f8 <uart_tx_init+0x80>)
 80003cc:	f000 f82e 	bl	800042c <uart_set_baudrate>

    // Enable Transmitter
    USART2->CR1 |= CR1_TE;
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <uart_tx_init+0x80>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a08      	ldr	r2, [pc, #32]	@ (80003f8 <uart_tx_init+0x80>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	60d3      	str	r3, [r2, #12]

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <uart_tx_init+0x80>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a05      	ldr	r2, [pc, #20]	@ (80003f8 <uart_tx_init+0x80>)
 80003e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003e6:	60d3      	str	r3, [r2, #12]
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	00f42400 	.word	0x00f42400
 80003f8:	40004400 	.word	0x40004400

080003fc <uart2_write>:

void uart2_write(int ch){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    // Wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 8000404:	bf00      	nop
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <uart2_write+0x2c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <uart2_write+0xa>

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a04      	ldr	r2, [pc, #16]	@ (8000428 <uart2_write+0x2c>)
 8000416:	b2db      	uxtb	r3, r3
 8000418:	6053      	str	r3, [r2, #4]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40004400 	.word	0x40004400

0800042c <uart_set_baudrate>:

// Set baud rate
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
    USARTx->BRR = calculate_uart_bd(periphCLK, baudrate);
 8000438:	6879      	ldr	r1, [r7, #4]
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	f000 f807 	bl	800044e <calculate_uart_bd>
 8000440:	4602      	mov	r2, r0
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	609a      	str	r2, [r3, #8]
}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <calculate_uart_bd>:

static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate){
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
    return ((periphCLK + (baudrate / 2U)) / baudrate);
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	085a      	lsrs	r2, r3, #1
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	441a      	add	r2, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	@ (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	@ (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	@ (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	@ (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	@ (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	@ (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fa5d 	bl	8000960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff fead 	bl	8000204 <main>

080004aa <LoopForever>:

LoopForever:
  b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004b8:	08000e54 	.word	0x08000e54
  ldr r2, =_sbss
 80004bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004c0:	200001c8 	.word	0x200001c8

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <std>:
 80004c8:	2300      	movs	r3, #0
 80004ca:	b510      	push	{r4, lr}
 80004cc:	4604      	mov	r4, r0
 80004ce:	e9c0 3300 	strd	r3, r3, [r0]
 80004d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004d6:	6083      	str	r3, [r0, #8]
 80004d8:	8181      	strh	r1, [r0, #12]
 80004da:	6643      	str	r3, [r0, #100]	@ 0x64
 80004dc:	81c2      	strh	r2, [r0, #14]
 80004de:	6183      	str	r3, [r0, #24]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2208      	movs	r2, #8
 80004e4:	305c      	adds	r0, #92	@ 0x5c
 80004e6:	f000 f9e7 	bl	80008b8 <memset>
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <std+0x58>)
 80004ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80004ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <std+0x5c>)
 80004f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <std+0x60>)
 80004f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <std+0x64>)
 80004f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <std+0x68>)
 80004fc:	6224      	str	r4, [r4, #32]
 80004fe:	429c      	cmp	r4, r3
 8000500:	d006      	beq.n	8000510 <std+0x48>
 8000502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000506:	4294      	cmp	r4, r2
 8000508:	d002      	beq.n	8000510 <std+0x48>
 800050a:	33d0      	adds	r3, #208	@ 0xd0
 800050c:	429c      	cmp	r4, r3
 800050e:	d105      	bne.n	800051c <std+0x54>
 8000510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000518:	f000 ba46 	b.w	80009a8 <__retarget_lock_init_recursive>
 800051c:	bd10      	pop	{r4, pc}
 800051e:	bf00      	nop
 8000520:	08000709 	.word	0x08000709
 8000524:	0800072b 	.word	0x0800072b
 8000528:	08000763 	.word	0x08000763
 800052c:	08000787 	.word	0x08000787
 8000530:	2000007c 	.word	0x2000007c

08000534 <stdio_exit_handler>:
 8000534:	4a02      	ldr	r2, [pc, #8]	@ (8000540 <stdio_exit_handler+0xc>)
 8000536:	4903      	ldr	r1, [pc, #12]	@ (8000544 <stdio_exit_handler+0x10>)
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <stdio_exit_handler+0x14>)
 800053a:	f000 b869 	b.w	8000610 <_fwalk_sglue>
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	08000ca9 	.word	0x08000ca9
 8000548:	20000010 	.word	0x20000010

0800054c <cleanup_stdio>:
 800054c:	6841      	ldr	r1, [r0, #4]
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <cleanup_stdio+0x34>)
 8000550:	4299      	cmp	r1, r3
 8000552:	b510      	push	{r4, lr}
 8000554:	4604      	mov	r4, r0
 8000556:	d001      	beq.n	800055c <cleanup_stdio+0x10>
 8000558:	f000 fba6 	bl	8000ca8 <_fflush_r>
 800055c:	68a1      	ldr	r1, [r4, #8]
 800055e:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <cleanup_stdio+0x38>)
 8000560:	4299      	cmp	r1, r3
 8000562:	d002      	beq.n	800056a <cleanup_stdio+0x1e>
 8000564:	4620      	mov	r0, r4
 8000566:	f000 fb9f 	bl	8000ca8 <_fflush_r>
 800056a:	68e1      	ldr	r1, [r4, #12]
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <cleanup_stdio+0x3c>)
 800056e:	4299      	cmp	r1, r3
 8000570:	d004      	beq.n	800057c <cleanup_stdio+0x30>
 8000572:	4620      	mov	r0, r4
 8000574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000578:	f000 bb96 	b.w	8000ca8 <_fflush_r>
 800057c:	bd10      	pop	{r4, pc}
 800057e:	bf00      	nop
 8000580:	2000007c 	.word	0x2000007c
 8000584:	200000e4 	.word	0x200000e4
 8000588:	2000014c 	.word	0x2000014c

0800058c <global_stdio_init.part.0>:
 800058c:	b510      	push	{r4, lr}
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <global_stdio_init.part.0+0x30>)
 8000590:	4c0b      	ldr	r4, [pc, #44]	@ (80005c0 <global_stdio_init.part.0+0x34>)
 8000592:	4a0c      	ldr	r2, [pc, #48]	@ (80005c4 <global_stdio_init.part.0+0x38>)
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	4620      	mov	r0, r4
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	f7ff ff94 	bl	80004c8 <std>
 80005a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80005a4:	2201      	movs	r2, #1
 80005a6:	2109      	movs	r1, #9
 80005a8:	f7ff ff8e 	bl	80004c8 <std>
 80005ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80005b0:	2202      	movs	r2, #2
 80005b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b6:	2112      	movs	r1, #18
 80005b8:	f7ff bf86 	b.w	80004c8 <std>
 80005bc:	200001b4 	.word	0x200001b4
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	08000535 	.word	0x08000535

080005c8 <__sfp_lock_acquire>:
 80005c8:	4801      	ldr	r0, [pc, #4]	@ (80005d0 <__sfp_lock_acquire+0x8>)
 80005ca:	f000 b9ee 	b.w	80009aa <__retarget_lock_acquire_recursive>
 80005ce:	bf00      	nop
 80005d0:	200001bd 	.word	0x200001bd

080005d4 <__sfp_lock_release>:
 80005d4:	4801      	ldr	r0, [pc, #4]	@ (80005dc <__sfp_lock_release+0x8>)
 80005d6:	f000 b9e9 	b.w	80009ac <__retarget_lock_release_recursive>
 80005da:	bf00      	nop
 80005dc:	200001bd 	.word	0x200001bd

080005e0 <__sinit>:
 80005e0:	b510      	push	{r4, lr}
 80005e2:	4604      	mov	r4, r0
 80005e4:	f7ff fff0 	bl	80005c8 <__sfp_lock_acquire>
 80005e8:	6a23      	ldr	r3, [r4, #32]
 80005ea:	b11b      	cbz	r3, 80005f4 <__sinit+0x14>
 80005ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f0:	f7ff bff0 	b.w	80005d4 <__sfp_lock_release>
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <__sinit+0x28>)
 80005f6:	6223      	str	r3, [r4, #32]
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <__sinit+0x2c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f5      	bne.n	80005ec <__sinit+0xc>
 8000600:	f7ff ffc4 	bl	800058c <global_stdio_init.part.0>
 8000604:	e7f2      	b.n	80005ec <__sinit+0xc>
 8000606:	bf00      	nop
 8000608:	0800054d 	.word	0x0800054d
 800060c:	200001b4 	.word	0x200001b4

08000610 <_fwalk_sglue>:
 8000610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000614:	4607      	mov	r7, r0
 8000616:	4688      	mov	r8, r1
 8000618:	4614      	mov	r4, r2
 800061a:	2600      	movs	r6, #0
 800061c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000620:	f1b9 0901 	subs.w	r9, r9, #1
 8000624:	d505      	bpl.n	8000632 <_fwalk_sglue+0x22>
 8000626:	6824      	ldr	r4, [r4, #0]
 8000628:	2c00      	cmp	r4, #0
 800062a:	d1f7      	bne.n	800061c <_fwalk_sglue+0xc>
 800062c:	4630      	mov	r0, r6
 800062e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000632:	89ab      	ldrh	r3, [r5, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d907      	bls.n	8000648 <_fwalk_sglue+0x38>
 8000638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800063c:	3301      	adds	r3, #1
 800063e:	d003      	beq.n	8000648 <_fwalk_sglue+0x38>
 8000640:	4629      	mov	r1, r5
 8000642:	4638      	mov	r0, r7
 8000644:	47c0      	blx	r8
 8000646:	4306      	orrs	r6, r0
 8000648:	3568      	adds	r5, #104	@ 0x68
 800064a:	e7e9      	b.n	8000620 <_fwalk_sglue+0x10>

0800064c <_puts_r>:
 800064c:	6a03      	ldr	r3, [r0, #32]
 800064e:	b570      	push	{r4, r5, r6, lr}
 8000650:	6884      	ldr	r4, [r0, #8]
 8000652:	4605      	mov	r5, r0
 8000654:	460e      	mov	r6, r1
 8000656:	b90b      	cbnz	r3, 800065c <_puts_r+0x10>
 8000658:	f7ff ffc2 	bl	80005e0 <__sinit>
 800065c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800065e:	07db      	lsls	r3, r3, #31
 8000660:	d405      	bmi.n	800066e <_puts_r+0x22>
 8000662:	89a3      	ldrh	r3, [r4, #12]
 8000664:	0598      	lsls	r0, r3, #22
 8000666:	d402      	bmi.n	800066e <_puts_r+0x22>
 8000668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800066a:	f000 f99e 	bl	80009aa <__retarget_lock_acquire_recursive>
 800066e:	89a3      	ldrh	r3, [r4, #12]
 8000670:	0719      	lsls	r1, r3, #28
 8000672:	d502      	bpl.n	800067a <_puts_r+0x2e>
 8000674:	6923      	ldr	r3, [r4, #16]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d135      	bne.n	80006e6 <_puts_r+0x9a>
 800067a:	4621      	mov	r1, r4
 800067c:	4628      	mov	r0, r5
 800067e:	f000 f8c5 	bl	800080c <__swsetup_r>
 8000682:	b380      	cbz	r0, 80006e6 <_puts_r+0x9a>
 8000684:	f04f 35ff 	mov.w	r5, #4294967295
 8000688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800068a:	07da      	lsls	r2, r3, #31
 800068c:	d405      	bmi.n	800069a <_puts_r+0x4e>
 800068e:	89a3      	ldrh	r3, [r4, #12]
 8000690:	059b      	lsls	r3, r3, #22
 8000692:	d402      	bmi.n	800069a <_puts_r+0x4e>
 8000694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000696:	f000 f989 	bl	80009ac <__retarget_lock_release_recursive>
 800069a:	4628      	mov	r0, r5
 800069c:	bd70      	pop	{r4, r5, r6, pc}
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da04      	bge.n	80006ac <_puts_r+0x60>
 80006a2:	69a2      	ldr	r2, [r4, #24]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dc17      	bgt.n	80006d8 <_puts_r+0x8c>
 80006a8:	290a      	cmp	r1, #10
 80006aa:	d015      	beq.n	80006d8 <_puts_r+0x8c>
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	6022      	str	r2, [r4, #0]
 80006b2:	7019      	strb	r1, [r3, #0]
 80006b4:	68a3      	ldr	r3, [r4, #8]
 80006b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006ba:	3b01      	subs	r3, #1
 80006bc:	60a3      	str	r3, [r4, #8]
 80006be:	2900      	cmp	r1, #0
 80006c0:	d1ed      	bne.n	800069e <_puts_r+0x52>
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da11      	bge.n	80006ea <_puts_r+0x9e>
 80006c6:	4622      	mov	r2, r4
 80006c8:	210a      	movs	r1, #10
 80006ca:	4628      	mov	r0, r5
 80006cc:	f000 f85f 	bl	800078e <__swbuf_r>
 80006d0:	3001      	adds	r0, #1
 80006d2:	d0d7      	beq.n	8000684 <_puts_r+0x38>
 80006d4:	250a      	movs	r5, #10
 80006d6:	e7d7      	b.n	8000688 <_puts_r+0x3c>
 80006d8:	4622      	mov	r2, r4
 80006da:	4628      	mov	r0, r5
 80006dc:	f000 f857 	bl	800078e <__swbuf_r>
 80006e0:	3001      	adds	r0, #1
 80006e2:	d1e7      	bne.n	80006b4 <_puts_r+0x68>
 80006e4:	e7ce      	b.n	8000684 <_puts_r+0x38>
 80006e6:	3e01      	subs	r6, #1
 80006e8:	e7e4      	b.n	80006b4 <_puts_r+0x68>
 80006ea:	6823      	ldr	r3, [r4, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	6022      	str	r2, [r4, #0]
 80006f0:	220a      	movs	r2, #10
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e7ee      	b.n	80006d4 <_puts_r+0x88>
	...

080006f8 <puts>:
 80006f8:	4b02      	ldr	r3, [pc, #8]	@ (8000704 <puts+0xc>)
 80006fa:	4601      	mov	r1, r0
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	f7ff bfa5 	b.w	800064c <_puts_r>
 8000702:	bf00      	nop
 8000704:	2000000c 	.word	0x2000000c

08000708 <__sread>:
 8000708:	b510      	push	{r4, lr}
 800070a:	460c      	mov	r4, r1
 800070c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000710:	f000 f8fc 	bl	800090c <_read_r>
 8000714:	2800      	cmp	r0, #0
 8000716:	bfab      	itete	ge
 8000718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800071a:	89a3      	ldrhlt	r3, [r4, #12]
 800071c:	181b      	addge	r3, r3, r0
 800071e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000722:	bfac      	ite	ge
 8000724:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000726:	81a3      	strhlt	r3, [r4, #12]
 8000728:	bd10      	pop	{r4, pc}

0800072a <__swrite>:
 800072a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800072e:	461f      	mov	r7, r3
 8000730:	898b      	ldrh	r3, [r1, #12]
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	4605      	mov	r5, r0
 8000736:	460c      	mov	r4, r1
 8000738:	4616      	mov	r6, r2
 800073a:	d505      	bpl.n	8000748 <__swrite+0x1e>
 800073c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000740:	2302      	movs	r3, #2
 8000742:	2200      	movs	r2, #0
 8000744:	f000 f8d0 	bl	80008e8 <_lseek_r>
 8000748:	89a3      	ldrh	r3, [r4, #12]
 800074a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800074e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000752:	81a3      	strh	r3, [r4, #12]
 8000754:	4632      	mov	r2, r6
 8000756:	463b      	mov	r3, r7
 8000758:	4628      	mov	r0, r5
 800075a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800075e:	f000 b8e7 	b.w	8000930 <_write_r>

08000762 <__sseek>:
 8000762:	b510      	push	{r4, lr}
 8000764:	460c      	mov	r4, r1
 8000766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800076a:	f000 f8bd 	bl	80008e8 <_lseek_r>
 800076e:	1c43      	adds	r3, r0, #1
 8000770:	89a3      	ldrh	r3, [r4, #12]
 8000772:	bf15      	itete	ne
 8000774:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800077a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800077e:	81a3      	strheq	r3, [r4, #12]
 8000780:	bf18      	it	ne
 8000782:	81a3      	strhne	r3, [r4, #12]
 8000784:	bd10      	pop	{r4, pc}

08000786 <__sclose>:
 8000786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800078a:	f000 b89d 	b.w	80008c8 <_close_r>

0800078e <__swbuf_r>:
 800078e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000790:	460e      	mov	r6, r1
 8000792:	4614      	mov	r4, r2
 8000794:	4605      	mov	r5, r0
 8000796:	b118      	cbz	r0, 80007a0 <__swbuf_r+0x12>
 8000798:	6a03      	ldr	r3, [r0, #32]
 800079a:	b90b      	cbnz	r3, 80007a0 <__swbuf_r+0x12>
 800079c:	f7ff ff20 	bl	80005e0 <__sinit>
 80007a0:	69a3      	ldr	r3, [r4, #24]
 80007a2:	60a3      	str	r3, [r4, #8]
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	071a      	lsls	r2, r3, #28
 80007a8:	d501      	bpl.n	80007ae <__swbuf_r+0x20>
 80007aa:	6923      	ldr	r3, [r4, #16]
 80007ac:	b943      	cbnz	r3, 80007c0 <__swbuf_r+0x32>
 80007ae:	4621      	mov	r1, r4
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 f82b 	bl	800080c <__swsetup_r>
 80007b6:	b118      	cbz	r0, 80007c0 <__swbuf_r+0x32>
 80007b8:	f04f 37ff 	mov.w	r7, #4294967295
 80007bc:	4638      	mov	r0, r7
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	6922      	ldr	r2, [r4, #16]
 80007c4:	1a98      	subs	r0, r3, r2
 80007c6:	6963      	ldr	r3, [r4, #20]
 80007c8:	b2f6      	uxtb	r6, r6
 80007ca:	4283      	cmp	r3, r0
 80007cc:	4637      	mov	r7, r6
 80007ce:	dc05      	bgt.n	80007dc <__swbuf_r+0x4e>
 80007d0:	4621      	mov	r1, r4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 fa68 	bl	8000ca8 <_fflush_r>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d1ed      	bne.n	80007b8 <__swbuf_r+0x2a>
 80007dc:	68a3      	ldr	r3, [r4, #8]
 80007de:	3b01      	subs	r3, #1
 80007e0:	60a3      	str	r3, [r4, #8]
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	701e      	strb	r6, [r3, #0]
 80007ea:	6962      	ldr	r2, [r4, #20]
 80007ec:	1c43      	adds	r3, r0, #1
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d004      	beq.n	80007fc <__swbuf_r+0x6e>
 80007f2:	89a3      	ldrh	r3, [r4, #12]
 80007f4:	07db      	lsls	r3, r3, #31
 80007f6:	d5e1      	bpl.n	80007bc <__swbuf_r+0x2e>
 80007f8:	2e0a      	cmp	r6, #10
 80007fa:	d1df      	bne.n	80007bc <__swbuf_r+0x2e>
 80007fc:	4621      	mov	r1, r4
 80007fe:	4628      	mov	r0, r5
 8000800:	f000 fa52 	bl	8000ca8 <_fflush_r>
 8000804:	2800      	cmp	r0, #0
 8000806:	d0d9      	beq.n	80007bc <__swbuf_r+0x2e>
 8000808:	e7d6      	b.n	80007b8 <__swbuf_r+0x2a>
	...

0800080c <__swsetup_r>:
 800080c:	b538      	push	{r3, r4, r5, lr}
 800080e:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <__swsetup_r+0xa8>)
 8000810:	4605      	mov	r5, r0
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	460c      	mov	r4, r1
 8000816:	b118      	cbz	r0, 8000820 <__swsetup_r+0x14>
 8000818:	6a03      	ldr	r3, [r0, #32]
 800081a:	b90b      	cbnz	r3, 8000820 <__swsetup_r+0x14>
 800081c:	f7ff fee0 	bl	80005e0 <__sinit>
 8000820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000824:	0719      	lsls	r1, r3, #28
 8000826:	d422      	bmi.n	800086e <__swsetup_r+0x62>
 8000828:	06da      	lsls	r2, r3, #27
 800082a:	d407      	bmi.n	800083c <__swsetup_r+0x30>
 800082c:	2209      	movs	r2, #9
 800082e:	602a      	str	r2, [r5, #0]
 8000830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000834:	81a3      	strh	r3, [r4, #12]
 8000836:	f04f 30ff 	mov.w	r0, #4294967295
 800083a:	e033      	b.n	80008a4 <__swsetup_r+0x98>
 800083c:	0758      	lsls	r0, r3, #29
 800083e:	d512      	bpl.n	8000866 <__swsetup_r+0x5a>
 8000840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000842:	b141      	cbz	r1, 8000856 <__swsetup_r+0x4a>
 8000844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000848:	4299      	cmp	r1, r3
 800084a:	d002      	beq.n	8000852 <__swsetup_r+0x46>
 800084c:	4628      	mov	r0, r5
 800084e:	f000 f8af 	bl	80009b0 <_free_r>
 8000852:	2300      	movs	r3, #0
 8000854:	6363      	str	r3, [r4, #52]	@ 0x34
 8000856:	89a3      	ldrh	r3, [r4, #12]
 8000858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800085c:	81a3      	strh	r3, [r4, #12]
 800085e:	2300      	movs	r3, #0
 8000860:	6063      	str	r3, [r4, #4]
 8000862:	6923      	ldr	r3, [r4, #16]
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	81a3      	strh	r3, [r4, #12]
 800086e:	6923      	ldr	r3, [r4, #16]
 8000870:	b94b      	cbnz	r3, 8000886 <__swsetup_r+0x7a>
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800087c:	d003      	beq.n	8000886 <__swsetup_r+0x7a>
 800087e:	4621      	mov	r1, r4
 8000880:	4628      	mov	r0, r5
 8000882:	f000 fa5f 	bl	8000d44 <__smakebuf_r>
 8000886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800088a:	f013 0201 	ands.w	r2, r3, #1
 800088e:	d00a      	beq.n	80008a6 <__swsetup_r+0x9a>
 8000890:	2200      	movs	r2, #0
 8000892:	60a2      	str	r2, [r4, #8]
 8000894:	6962      	ldr	r2, [r4, #20]
 8000896:	4252      	negs	r2, r2
 8000898:	61a2      	str	r2, [r4, #24]
 800089a:	6922      	ldr	r2, [r4, #16]
 800089c:	b942      	cbnz	r2, 80008b0 <__swsetup_r+0xa4>
 800089e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80008a2:	d1c5      	bne.n	8000830 <__swsetup_r+0x24>
 80008a4:	bd38      	pop	{r3, r4, r5, pc}
 80008a6:	0799      	lsls	r1, r3, #30
 80008a8:	bf58      	it	pl
 80008aa:	6962      	ldrpl	r2, [r4, #20]
 80008ac:	60a2      	str	r2, [r4, #8]
 80008ae:	e7f4      	b.n	800089a <__swsetup_r+0x8e>
 80008b0:	2000      	movs	r0, #0
 80008b2:	e7f7      	b.n	80008a4 <__swsetup_r+0x98>
 80008b4:	2000000c 	.word	0x2000000c

080008b8 <memset>:
 80008b8:	4402      	add	r2, r0
 80008ba:	4603      	mov	r3, r0
 80008bc:	4293      	cmp	r3, r2
 80008be:	d100      	bne.n	80008c2 <memset+0xa>
 80008c0:	4770      	bx	lr
 80008c2:	f803 1b01 	strb.w	r1, [r3], #1
 80008c6:	e7f9      	b.n	80008bc <memset+0x4>

080008c8 <_close_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4d06      	ldr	r5, [pc, #24]	@ (80008e4 <_close_r+0x1c>)
 80008cc:	2300      	movs	r3, #0
 80008ce:	4604      	mov	r4, r0
 80008d0:	4608      	mov	r0, r1
 80008d2:	602b      	str	r3, [r5, #0]
 80008d4:	f7ff fcd9 	bl	800028a <_close>
 80008d8:	1c43      	adds	r3, r0, #1
 80008da:	d102      	bne.n	80008e2 <_close_r+0x1a>
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	b103      	cbz	r3, 80008e2 <_close_r+0x1a>
 80008e0:	6023      	str	r3, [r4, #0]
 80008e2:	bd38      	pop	{r3, r4, r5, pc}
 80008e4:	200001b8 	.word	0x200001b8

080008e8 <_lseek_r>:
 80008e8:	b538      	push	{r3, r4, r5, lr}
 80008ea:	4d07      	ldr	r5, [pc, #28]	@ (8000908 <_lseek_r+0x20>)
 80008ec:	4604      	mov	r4, r0
 80008ee:	4608      	mov	r0, r1
 80008f0:	4611      	mov	r1, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	602a      	str	r2, [r5, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	f7ff fcee 	bl	80002d8 <_lseek>
 80008fc:	1c43      	adds	r3, r0, #1
 80008fe:	d102      	bne.n	8000906 <_lseek_r+0x1e>
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	b103      	cbz	r3, 8000906 <_lseek_r+0x1e>
 8000904:	6023      	str	r3, [r4, #0]
 8000906:	bd38      	pop	{r3, r4, r5, pc}
 8000908:	200001b8 	.word	0x200001b8

0800090c <_read_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4d07      	ldr	r5, [pc, #28]	@ (800092c <_read_r+0x20>)
 8000910:	4604      	mov	r4, r0
 8000912:	4608      	mov	r0, r1
 8000914:	4611      	mov	r1, r2
 8000916:	2200      	movs	r2, #0
 8000918:	602a      	str	r2, [r5, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	f7ff fc7c 	bl	8000218 <_read>
 8000920:	1c43      	adds	r3, r0, #1
 8000922:	d102      	bne.n	800092a <_read_r+0x1e>
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	b103      	cbz	r3, 800092a <_read_r+0x1e>
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	bd38      	pop	{r3, r4, r5, pc}
 800092c:	200001b8 	.word	0x200001b8

08000930 <_write_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4d07      	ldr	r5, [pc, #28]	@ (8000950 <_write_r+0x20>)
 8000934:	4604      	mov	r4, r0
 8000936:	4608      	mov	r0, r1
 8000938:	4611      	mov	r1, r2
 800093a:	2200      	movs	r2, #0
 800093c:	602a      	str	r2, [r5, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	f7ff fc87 	bl	8000252 <_write>
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	d102      	bne.n	800094e <_write_r+0x1e>
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	b103      	cbz	r3, 800094e <_write_r+0x1e>
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	bd38      	pop	{r3, r4, r5, pc}
 8000950:	200001b8 	.word	0x200001b8

08000954 <__errno>:
 8000954:	4b01      	ldr	r3, [pc, #4]	@ (800095c <__errno+0x8>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000000c 	.word	0x2000000c

08000960 <__libc_init_array>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	4d0d      	ldr	r5, [pc, #52]	@ (8000998 <__libc_init_array+0x38>)
 8000964:	4c0d      	ldr	r4, [pc, #52]	@ (800099c <__libc_init_array+0x3c>)
 8000966:	1b64      	subs	r4, r4, r5
 8000968:	10a4      	asrs	r4, r4, #2
 800096a:	2600      	movs	r6, #0
 800096c:	42a6      	cmp	r6, r4
 800096e:	d109      	bne.n	8000984 <__libc_init_array+0x24>
 8000970:	4d0b      	ldr	r5, [pc, #44]	@ (80009a0 <__libc_init_array+0x40>)
 8000972:	4c0c      	ldr	r4, [pc, #48]	@ (80009a4 <__libc_init_array+0x44>)
 8000974:	f000 fa54 	bl	8000e20 <_init>
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	2600      	movs	r6, #0
 800097e:	42a6      	cmp	r6, r4
 8000980:	d105      	bne.n	800098e <__libc_init_array+0x2e>
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f855 3b04 	ldr.w	r3, [r5], #4
 8000988:	4798      	blx	r3
 800098a:	3601      	adds	r6, #1
 800098c:	e7ee      	b.n	800096c <__libc_init_array+0xc>
 800098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000992:	4798      	blx	r3
 8000994:	3601      	adds	r6, #1
 8000996:	e7f2      	b.n	800097e <__libc_init_array+0x1e>
 8000998:	08000e4c 	.word	0x08000e4c
 800099c:	08000e4c 	.word	0x08000e4c
 80009a0:	08000e4c 	.word	0x08000e4c
 80009a4:	08000e50 	.word	0x08000e50

080009a8 <__retarget_lock_init_recursive>:
 80009a8:	4770      	bx	lr

080009aa <__retarget_lock_acquire_recursive>:
 80009aa:	4770      	bx	lr

080009ac <__retarget_lock_release_recursive>:
 80009ac:	4770      	bx	lr
	...

080009b0 <_free_r>:
 80009b0:	b538      	push	{r3, r4, r5, lr}
 80009b2:	4605      	mov	r5, r0
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d041      	beq.n	8000a3c <_free_r+0x8c>
 80009b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009bc:	1f0c      	subs	r4, r1, #4
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bfb8      	it	lt
 80009c2:	18e4      	addlt	r4, r4, r3
 80009c4:	f000 f8e0 	bl	8000b88 <__malloc_lock>
 80009c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a40 <_free_r+0x90>)
 80009ca:	6813      	ldr	r3, [r2, #0]
 80009cc:	b933      	cbnz	r3, 80009dc <_free_r+0x2c>
 80009ce:	6063      	str	r3, [r4, #4]
 80009d0:	6014      	str	r4, [r2, #0]
 80009d2:	4628      	mov	r0, r5
 80009d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009d8:	f000 b8dc 	b.w	8000b94 <__malloc_unlock>
 80009dc:	42a3      	cmp	r3, r4
 80009de:	d908      	bls.n	80009f2 <_free_r+0x42>
 80009e0:	6820      	ldr	r0, [r4, #0]
 80009e2:	1821      	adds	r1, r4, r0
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf01      	itttt	eq
 80009e8:	6819      	ldreq	r1, [r3, #0]
 80009ea:	685b      	ldreq	r3, [r3, #4]
 80009ec:	1809      	addeq	r1, r1, r0
 80009ee:	6021      	streq	r1, [r4, #0]
 80009f0:	e7ed      	b.n	80009ce <_free_r+0x1e>
 80009f2:	461a      	mov	r2, r3
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	b10b      	cbz	r3, 80009fc <_free_r+0x4c>
 80009f8:	42a3      	cmp	r3, r4
 80009fa:	d9fa      	bls.n	80009f2 <_free_r+0x42>
 80009fc:	6811      	ldr	r1, [r2, #0]
 80009fe:	1850      	adds	r0, r2, r1
 8000a00:	42a0      	cmp	r0, r4
 8000a02:	d10b      	bne.n	8000a1c <_free_r+0x6c>
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	4401      	add	r1, r0
 8000a08:	1850      	adds	r0, r2, r1
 8000a0a:	4283      	cmp	r3, r0
 8000a0c:	6011      	str	r1, [r2, #0]
 8000a0e:	d1e0      	bne.n	80009d2 <_free_r+0x22>
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	6053      	str	r3, [r2, #4]
 8000a16:	4408      	add	r0, r1
 8000a18:	6010      	str	r0, [r2, #0]
 8000a1a:	e7da      	b.n	80009d2 <_free_r+0x22>
 8000a1c:	d902      	bls.n	8000a24 <_free_r+0x74>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	602b      	str	r3, [r5, #0]
 8000a22:	e7d6      	b.n	80009d2 <_free_r+0x22>
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	1821      	adds	r1, r4, r0
 8000a28:	428b      	cmp	r3, r1
 8000a2a:	bf04      	itt	eq
 8000a2c:	6819      	ldreq	r1, [r3, #0]
 8000a2e:	685b      	ldreq	r3, [r3, #4]
 8000a30:	6063      	str	r3, [r4, #4]
 8000a32:	bf04      	itt	eq
 8000a34:	1809      	addeq	r1, r1, r0
 8000a36:	6021      	streq	r1, [r4, #0]
 8000a38:	6054      	str	r4, [r2, #4]
 8000a3a:	e7ca      	b.n	80009d2 <_free_r+0x22>
 8000a3c:	bd38      	pop	{r3, r4, r5, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001c4 	.word	0x200001c4

08000a44 <sbrk_aligned>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	4e0f      	ldr	r6, [pc, #60]	@ (8000a84 <sbrk_aligned+0x40>)
 8000a48:	460c      	mov	r4, r1
 8000a4a:	6831      	ldr	r1, [r6, #0]
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	b911      	cbnz	r1, 8000a56 <sbrk_aligned+0x12>
 8000a50:	f000 f9d6 	bl	8000e00 <_sbrk_r>
 8000a54:	6030      	str	r0, [r6, #0]
 8000a56:	4621      	mov	r1, r4
 8000a58:	4628      	mov	r0, r5
 8000a5a:	f000 f9d1 	bl	8000e00 <_sbrk_r>
 8000a5e:	1c43      	adds	r3, r0, #1
 8000a60:	d103      	bne.n	8000a6a <sbrk_aligned+0x26>
 8000a62:	f04f 34ff 	mov.w	r4, #4294967295
 8000a66:	4620      	mov	r0, r4
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	1cc4      	adds	r4, r0, #3
 8000a6c:	f024 0403 	bic.w	r4, r4, #3
 8000a70:	42a0      	cmp	r0, r4
 8000a72:	d0f8      	beq.n	8000a66 <sbrk_aligned+0x22>
 8000a74:	1a21      	subs	r1, r4, r0
 8000a76:	4628      	mov	r0, r5
 8000a78:	f000 f9c2 	bl	8000e00 <_sbrk_r>
 8000a7c:	3001      	adds	r0, #1
 8000a7e:	d1f2      	bne.n	8000a66 <sbrk_aligned+0x22>
 8000a80:	e7ef      	b.n	8000a62 <sbrk_aligned+0x1e>
 8000a82:	bf00      	nop
 8000a84:	200001c0 	.word	0x200001c0

08000a88 <_malloc_r>:
 8000a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a8c:	1ccd      	adds	r5, r1, #3
 8000a8e:	f025 0503 	bic.w	r5, r5, #3
 8000a92:	3508      	adds	r5, #8
 8000a94:	2d0c      	cmp	r5, #12
 8000a96:	bf38      	it	cc
 8000a98:	250c      	movcc	r5, #12
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	db01      	blt.n	8000aa4 <_malloc_r+0x1c>
 8000aa0:	42a9      	cmp	r1, r5
 8000aa2:	d904      	bls.n	8000aae <_malloc_r+0x26>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	6033      	str	r3, [r6, #0]
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b84 <_malloc_r+0xfc>
 8000ab2:	f000 f869 	bl	8000b88 <__malloc_lock>
 8000ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aba:	461c      	mov	r4, r3
 8000abc:	bb44      	cbnz	r4, 8000b10 <_malloc_r+0x88>
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4630      	mov	r0, r6
 8000ac2:	f7ff ffbf 	bl	8000a44 <sbrk_aligned>
 8000ac6:	1c43      	adds	r3, r0, #1
 8000ac8:	4604      	mov	r4, r0
 8000aca:	d158      	bne.n	8000b7e <_malloc_r+0xf6>
 8000acc:	f8d8 4000 	ldr.w	r4, [r8]
 8000ad0:	4627      	mov	r7, r4
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d143      	bne.n	8000b5e <_malloc_r+0xd6>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d04b      	beq.n	8000b72 <_malloc_r+0xea>
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	4639      	mov	r1, r7
 8000ade:	4630      	mov	r0, r6
 8000ae0:	eb04 0903 	add.w	r9, r4, r3
 8000ae4:	f000 f98c 	bl	8000e00 <_sbrk_r>
 8000ae8:	4581      	cmp	r9, r0
 8000aea:	d142      	bne.n	8000b72 <_malloc_r+0xea>
 8000aec:	6821      	ldr	r1, [r4, #0]
 8000aee:	1a6d      	subs	r5, r5, r1
 8000af0:	4629      	mov	r1, r5
 8000af2:	4630      	mov	r0, r6
 8000af4:	f7ff ffa6 	bl	8000a44 <sbrk_aligned>
 8000af8:	3001      	adds	r0, #1
 8000afa:	d03a      	beq.n	8000b72 <_malloc_r+0xea>
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	442b      	add	r3, r5
 8000b00:	6023      	str	r3, [r4, #0]
 8000b02:	f8d8 3000 	ldr.w	r3, [r8]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	bb62      	cbnz	r2, 8000b64 <_malloc_r+0xdc>
 8000b0a:	f8c8 7000 	str.w	r7, [r8]
 8000b0e:	e00f      	b.n	8000b30 <_malloc_r+0xa8>
 8000b10:	6822      	ldr	r2, [r4, #0]
 8000b12:	1b52      	subs	r2, r2, r5
 8000b14:	d420      	bmi.n	8000b58 <_malloc_r+0xd0>
 8000b16:	2a0b      	cmp	r2, #11
 8000b18:	d917      	bls.n	8000b4a <_malloc_r+0xc2>
 8000b1a:	1961      	adds	r1, r4, r5
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	6025      	str	r5, [r4, #0]
 8000b20:	bf18      	it	ne
 8000b22:	6059      	strne	r1, [r3, #4]
 8000b24:	6863      	ldr	r3, [r4, #4]
 8000b26:	bf08      	it	eq
 8000b28:	f8c8 1000 	streq.w	r1, [r8]
 8000b2c:	5162      	str	r2, [r4, r5]
 8000b2e:	604b      	str	r3, [r1, #4]
 8000b30:	4630      	mov	r0, r6
 8000b32:	f000 f82f 	bl	8000b94 <__malloc_unlock>
 8000b36:	f104 000b 	add.w	r0, r4, #11
 8000b3a:	1d23      	adds	r3, r4, #4
 8000b3c:	f020 0007 	bic.w	r0, r0, #7
 8000b40:	1ac2      	subs	r2, r0, r3
 8000b42:	bf1c      	itt	ne
 8000b44:	1a1b      	subne	r3, r3, r0
 8000b46:	50a3      	strne	r3, [r4, r2]
 8000b48:	e7af      	b.n	8000aaa <_malloc_r+0x22>
 8000b4a:	6862      	ldr	r2, [r4, #4]
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	bf0c      	ite	eq
 8000b50:	f8c8 2000 	streq.w	r2, [r8]
 8000b54:	605a      	strne	r2, [r3, #4]
 8000b56:	e7eb      	b.n	8000b30 <_malloc_r+0xa8>
 8000b58:	4623      	mov	r3, r4
 8000b5a:	6864      	ldr	r4, [r4, #4]
 8000b5c:	e7ae      	b.n	8000abc <_malloc_r+0x34>
 8000b5e:	463c      	mov	r4, r7
 8000b60:	687f      	ldr	r7, [r7, #4]
 8000b62:	e7b6      	b.n	8000ad2 <_malloc_r+0x4a>
 8000b64:	461a      	mov	r2, r3
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	42a3      	cmp	r3, r4
 8000b6a:	d1fb      	bne.n	8000b64 <_malloc_r+0xdc>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	6053      	str	r3, [r2, #4]
 8000b70:	e7de      	b.n	8000b30 <_malloc_r+0xa8>
 8000b72:	230c      	movs	r3, #12
 8000b74:	6033      	str	r3, [r6, #0]
 8000b76:	4630      	mov	r0, r6
 8000b78:	f000 f80c 	bl	8000b94 <__malloc_unlock>
 8000b7c:	e794      	b.n	8000aa8 <_malloc_r+0x20>
 8000b7e:	6005      	str	r5, [r0, #0]
 8000b80:	e7d6      	b.n	8000b30 <_malloc_r+0xa8>
 8000b82:	bf00      	nop
 8000b84:	200001c4 	.word	0x200001c4

08000b88 <__malloc_lock>:
 8000b88:	4801      	ldr	r0, [pc, #4]	@ (8000b90 <__malloc_lock+0x8>)
 8000b8a:	f7ff bf0e 	b.w	80009aa <__retarget_lock_acquire_recursive>
 8000b8e:	bf00      	nop
 8000b90:	200001bc 	.word	0x200001bc

08000b94 <__malloc_unlock>:
 8000b94:	4801      	ldr	r0, [pc, #4]	@ (8000b9c <__malloc_unlock+0x8>)
 8000b96:	f7ff bf09 	b.w	80009ac <__retarget_lock_release_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	200001bc 	.word	0x200001bc

08000ba0 <__sflush_r>:
 8000ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ba8:	0716      	lsls	r6, r2, #28
 8000baa:	4605      	mov	r5, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	d454      	bmi.n	8000c5a <__sflush_r+0xba>
 8000bb0:	684b      	ldr	r3, [r1, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dc02      	bgt.n	8000bbc <__sflush_r+0x1c>
 8000bb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	dd48      	ble.n	8000c4e <__sflush_r+0xae>
 8000bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d045      	beq.n	8000c4e <__sflush_r+0xae>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000bc8:	682f      	ldr	r7, [r5, #0]
 8000bca:	6a21      	ldr	r1, [r4, #32]
 8000bcc:	602b      	str	r3, [r5, #0]
 8000bce:	d030      	beq.n	8000c32 <__sflush_r+0x92>
 8000bd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	0759      	lsls	r1, r3, #29
 8000bd6:	d505      	bpl.n	8000be4 <__sflush_r+0x44>
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	1ad2      	subs	r2, r2, r3
 8000bdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000bde:	b10b      	cbz	r3, 8000be4 <__sflush_r+0x44>
 8000be0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000be2:	1ad2      	subs	r2, r2, r3
 8000be4:	2300      	movs	r3, #0
 8000be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000be8:	6a21      	ldr	r1, [r4, #32]
 8000bea:	4628      	mov	r0, r5
 8000bec:	47b0      	blx	r6
 8000bee:	1c43      	adds	r3, r0, #1
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	d106      	bne.n	8000c02 <__sflush_r+0x62>
 8000bf4:	6829      	ldr	r1, [r5, #0]
 8000bf6:	291d      	cmp	r1, #29
 8000bf8:	d82b      	bhi.n	8000c52 <__sflush_r+0xb2>
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <__sflush_r+0x104>)
 8000bfc:	40ca      	lsrs	r2, r1
 8000bfe:	07d6      	lsls	r6, r2, #31
 8000c00:	d527      	bpl.n	8000c52 <__sflush_r+0xb2>
 8000c02:	2200      	movs	r2, #0
 8000c04:	6062      	str	r2, [r4, #4]
 8000c06:	04d9      	lsls	r1, r3, #19
 8000c08:	6922      	ldr	r2, [r4, #16]
 8000c0a:	6022      	str	r2, [r4, #0]
 8000c0c:	d504      	bpl.n	8000c18 <__sflush_r+0x78>
 8000c0e:	1c42      	adds	r2, r0, #1
 8000c10:	d101      	bne.n	8000c16 <__sflush_r+0x76>
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	b903      	cbnz	r3, 8000c18 <__sflush_r+0x78>
 8000c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c1a:	602f      	str	r7, [r5, #0]
 8000c1c:	b1b9      	cbz	r1, 8000c4e <__sflush_r+0xae>
 8000c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d002      	beq.n	8000c2c <__sflush_r+0x8c>
 8000c26:	4628      	mov	r0, r5
 8000c28:	f7ff fec2 	bl	80009b0 <_free_r>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c30:	e00d      	b.n	8000c4e <__sflush_r+0xae>
 8000c32:	2301      	movs	r3, #1
 8000c34:	4628      	mov	r0, r5
 8000c36:	47b0      	blx	r6
 8000c38:	4602      	mov	r2, r0
 8000c3a:	1c50      	adds	r0, r2, #1
 8000c3c:	d1c9      	bne.n	8000bd2 <__sflush_r+0x32>
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0c6      	beq.n	8000bd2 <__sflush_r+0x32>
 8000c44:	2b1d      	cmp	r3, #29
 8000c46:	d001      	beq.n	8000c4c <__sflush_r+0xac>
 8000c48:	2b16      	cmp	r3, #22
 8000c4a:	d11e      	bne.n	8000c8a <__sflush_r+0xea>
 8000c4c:	602f      	str	r7, [r5, #0]
 8000c4e:	2000      	movs	r0, #0
 8000c50:	e022      	b.n	8000c98 <__sflush_r+0xf8>
 8000c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	e01b      	b.n	8000c92 <__sflush_r+0xf2>
 8000c5a:	690f      	ldr	r7, [r1, #16]
 8000c5c:	2f00      	cmp	r7, #0
 8000c5e:	d0f6      	beq.n	8000c4e <__sflush_r+0xae>
 8000c60:	0793      	lsls	r3, r2, #30
 8000c62:	680e      	ldr	r6, [r1, #0]
 8000c64:	bf08      	it	eq
 8000c66:	694b      	ldreq	r3, [r1, #20]
 8000c68:	600f      	str	r7, [r1, #0]
 8000c6a:	bf18      	it	ne
 8000c6c:	2300      	movne	r3, #0
 8000c6e:	eba6 0807 	sub.w	r8, r6, r7
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	f1b8 0f00 	cmp.w	r8, #0
 8000c78:	dde9      	ble.n	8000c4e <__sflush_r+0xae>
 8000c7a:	6a21      	ldr	r1, [r4, #32]
 8000c7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000c7e:	4643      	mov	r3, r8
 8000c80:	463a      	mov	r2, r7
 8000c82:	4628      	mov	r0, r5
 8000c84:	47b0      	blx	r6
 8000c86:	2800      	cmp	r0, #0
 8000c88:	dc08      	bgt.n	8000c9c <__sflush_r+0xfc>
 8000c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c92:	81a3      	strh	r3, [r4, #12]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9c:	4407      	add	r7, r0
 8000c9e:	eba8 0800 	sub.w	r8, r8, r0
 8000ca2:	e7e7      	b.n	8000c74 <__sflush_r+0xd4>
 8000ca4:	20400001 	.word	0x20400001

08000ca8 <_fflush_r>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	690b      	ldr	r3, [r1, #16]
 8000cac:	4605      	mov	r5, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	b913      	cbnz	r3, 8000cb8 <_fflush_r+0x10>
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	bd38      	pop	{r3, r4, r5, pc}
 8000cb8:	b118      	cbz	r0, 8000cc2 <_fflush_r+0x1a>
 8000cba:	6a03      	ldr	r3, [r0, #32]
 8000cbc:	b90b      	cbnz	r3, 8000cc2 <_fflush_r+0x1a>
 8000cbe:	f7ff fc8f 	bl	80005e0 <__sinit>
 8000cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f3      	beq.n	8000cb2 <_fflush_r+0xa>
 8000cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000ccc:	07d0      	lsls	r0, r2, #31
 8000cce:	d404      	bmi.n	8000cda <_fflush_r+0x32>
 8000cd0:	0599      	lsls	r1, r3, #22
 8000cd2:	d402      	bmi.n	8000cda <_fflush_r+0x32>
 8000cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cd6:	f7ff fe68 	bl	80009aa <__retarget_lock_acquire_recursive>
 8000cda:	4628      	mov	r0, r5
 8000cdc:	4621      	mov	r1, r4
 8000cde:	f7ff ff5f 	bl	8000ba0 <__sflush_r>
 8000ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ce4:	07da      	lsls	r2, r3, #31
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	d4e4      	bmi.n	8000cb4 <_fflush_r+0xc>
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	059b      	lsls	r3, r3, #22
 8000cee:	d4e1      	bmi.n	8000cb4 <_fflush_r+0xc>
 8000cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cf2:	f7ff fe5b 	bl	80009ac <__retarget_lock_release_recursive>
 8000cf6:	e7dd      	b.n	8000cb4 <_fflush_r+0xc>

08000cf8 <__swhatbuf_r>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d00:	2900      	cmp	r1, #0
 8000d02:	b096      	sub	sp, #88	@ 0x58
 8000d04:	4615      	mov	r5, r2
 8000d06:	461e      	mov	r6, r3
 8000d08:	da0d      	bge.n	8000d26 <__swhatbuf_r+0x2e>
 8000d0a:	89a3      	ldrh	r3, [r4, #12]
 8000d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d10:	f04f 0100 	mov.w	r1, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2340      	movne	r3, #64	@ 0x40
 8000d18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	6031      	str	r1, [r6, #0]
 8000d20:	602b      	str	r3, [r5, #0]
 8000d22:	b016      	add	sp, #88	@ 0x58
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	466a      	mov	r2, sp
 8000d28:	f000 f848 	bl	8000dbc <_fstat_r>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	dbec      	blt.n	8000d0a <__swhatbuf_r+0x12>
 8000d30:	9901      	ldr	r1, [sp, #4]
 8000d32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d3a:	4259      	negs	r1, r3
 8000d3c:	4159      	adcs	r1, r3
 8000d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d42:	e7eb      	b.n	8000d1c <__swhatbuf_r+0x24>

08000d44 <__smakebuf_r>:
 8000d44:	898b      	ldrh	r3, [r1, #12]
 8000d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d48:	079d      	lsls	r5, r3, #30
 8000d4a:	4606      	mov	r6, r0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	d507      	bpl.n	8000d60 <__smakebuf_r+0x1c>
 8000d50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d54:	6023      	str	r3, [r4, #0]
 8000d56:	6123      	str	r3, [r4, #16]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	6163      	str	r3, [r4, #20]
 8000d5c:	b003      	add	sp, #12
 8000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d60:	ab01      	add	r3, sp, #4
 8000d62:	466a      	mov	r2, sp
 8000d64:	f7ff ffc8 	bl	8000cf8 <__swhatbuf_r>
 8000d68:	9f00      	ldr	r7, [sp, #0]
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f7ff fe8a 	bl	8000a88 <_malloc_r>
 8000d74:	b948      	cbnz	r0, 8000d8a <__smakebuf_r+0x46>
 8000d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d7a:	059a      	lsls	r2, r3, #22
 8000d7c:	d4ee      	bmi.n	8000d5c <__smakebuf_r+0x18>
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	81a3      	strh	r3, [r4, #12]
 8000d88:	e7e2      	b.n	8000d50 <__smakebuf_r+0xc>
 8000d8a:	89a3      	ldrh	r3, [r4, #12]
 8000d8c:	6020      	str	r0, [r4, #0]
 8000d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d92:	81a3      	strh	r3, [r4, #12]
 8000d94:	9b01      	ldr	r3, [sp, #4]
 8000d96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d9a:	b15b      	cbz	r3, 8000db4 <__smakebuf_r+0x70>
 8000d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000da0:	4630      	mov	r0, r6
 8000da2:	f000 f81d 	bl	8000de0 <_isatty_r>
 8000da6:	b128      	cbz	r0, 8000db4 <__smakebuf_r+0x70>
 8000da8:	89a3      	ldrh	r3, [r4, #12]
 8000daa:	f023 0303 	bic.w	r3, r3, #3
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	81a3      	strh	r3, [r4, #12]
 8000db4:	89a3      	ldrh	r3, [r4, #12]
 8000db6:	431d      	orrs	r5, r3
 8000db8:	81a5      	strh	r5, [r4, #12]
 8000dba:	e7cf      	b.n	8000d5c <__smakebuf_r+0x18>

08000dbc <_fstat_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	@ (8000ddc <_fstat_r+0x20>)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	602b      	str	r3, [r5, #0]
 8000dca:	f7ff fa6a 	bl	80002a2 <_fstat>
 8000dce:	1c43      	adds	r3, r0, #1
 8000dd0:	d102      	bne.n	8000dd8 <_fstat_r+0x1c>
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	b103      	cbz	r3, 8000dd8 <_fstat_r+0x1c>
 8000dd6:	6023      	str	r3, [r4, #0]
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001b8 	.word	0x200001b8

08000de0 <_isatty_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d06      	ldr	r5, [pc, #24]	@ (8000dfc <_isatty_r+0x1c>)
 8000de4:	2300      	movs	r3, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	602b      	str	r3, [r5, #0]
 8000dec:	f7ff fa69 	bl	80002c2 <_isatty>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_isatty_r+0x1a>
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_isatty_r+0x1a>
 8000df8:	6023      	str	r3, [r4, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	200001b8 	.word	0x200001b8

08000e00 <_sbrk_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d06      	ldr	r5, [pc, #24]	@ (8000e1c <_sbrk_r+0x1c>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	602b      	str	r3, [r5, #0]
 8000e0c:	f7ff fa72 	bl	80002f4 <_sbrk>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	d102      	bne.n	8000e1a <_sbrk_r+0x1a>
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	b103      	cbz	r3, 8000e1a <_sbrk_r+0x1a>
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	200001b8 	.word	0x200001b8

08000e20 <_init>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr

08000e2c <_fini>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr
