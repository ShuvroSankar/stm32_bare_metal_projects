
14_SystTck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d10  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000ed4  08000ed4  00001ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ee8  08000ee8  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ee8  08000ee8  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ee8  08000ee8  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee8  08000ee8  00001ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000eec  08000eec  00001eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000ef0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f4c  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f4c  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001083  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000059c  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000036b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f7  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002078  00000000  00000000  00003917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002092  00000000  00000000  0000598f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e55  00000000  00000000  00007a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa4  00000000  00000000  000988bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00099360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ebc 	.word	0x08000ebc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000ebc 	.word	0x08000ebc

08000204 <main>:
#include "systick.h"

#define GPIOAEN			(1U<<0)
#define LED_PIN			(1U<<5)

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
//	Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN	;
 8000208:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <main+0x4c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <main+0x4c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
//	Set LED pin as output
	GPIOA->MODER |= (1U<<10);
 8000214:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <main+0x50>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0e      	ldr	r2, [pc, #56]	@ (8000254 <main+0x50>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <main+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <main+0x50>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]
    uart_tx_init();
 800022c:	f000 f8f2 	bl	8000414 <uart_tx_init>


    while(1){

        printf("A second passed \r\n");
 8000230:	4809      	ldr	r0, [pc, #36]	@ (8000258 <main+0x54>)
 8000232:	f000 faaf 	bl	8000794 <puts>
        GPIOA->ODR |= LED_PIN;
 8000236:	4b07      	ldr	r3, [pc, #28]	@ (8000254 <main+0x50>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a06      	ldr	r2, [pc, #24]	@ (8000254 <main+0x50>)
 800023c:	f043 0320 	orr.w	r3, r3, #32
 8000240:	6153      	str	r3, [r2, #20]
        systicDelayMs(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000246:	f000 f8ad 	bl	80003a4 <systicDelayMs>
        printf("A second passed \r\n");
 800024a:	bf00      	nop
 800024c:	e7f0      	b.n	8000230 <main+0x2c>
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000
 8000258:	08000ed4 	.word	0x08000ed4

0800025c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
 800026c:	e00a      	b.n	8000284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800026e:	f3af 8000 	nop.w
 8000272:	4601      	mov	r1, r0
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	1c5a      	adds	r2, r3, #1
 8000278:	60ba      	str	r2, [r7, #8]
 800027a:	b2ca      	uxtb	r2, r1
 800027c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	3301      	adds	r3, #1
 8000282:	617b      	str	r3, [r7, #20]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	429a      	cmp	r2, r3
 800028a:	dbf0      	blt.n	800026e <_read+0x12>
  }

  return len;
 800028c:	687b      	ldr	r3, [r7, #4]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b086      	sub	sp, #24
 800029a:	af00      	add	r7, sp, #0
 800029c:	60f8      	str	r0, [r7, #12]
 800029e:	60b9      	str	r1, [r7, #8]
 80002a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e009      	b.n	80002bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	60ba      	str	r2, [r7, #8]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 f8a3 	bl	80003fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	dbf1      	blt.n	80002a8 <_write+0x12>
  }
  return len;
 80002c4:	687b      	ldr	r3, [r7, #4]
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <_close>:

int _close(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002da:	4618      	mov	r0, r3
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b083      	sub	sp, #12
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002f6:	605a      	str	r2, [r3, #4]
  return 0;
 80002f8:	2300      	movs	r3, #0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <_isatty>:

int _isatty(int file)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800030e:	2301      	movs	r3, #1
}
 8000310:	4618      	mov	r0, r3
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	60f8      	str	r0, [r7, #12]
 8000324:	60b9      	str	r1, [r7, #8]
 8000326:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000328:	2300      	movs	r3, #0
}
 800032a:	4618      	mov	r0, r3
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
	...

08000338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000340:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <_sbrk+0x5c>)
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <_sbrk+0x60>)
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <_sbrk+0x64>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000354:	4b11      	ldr	r3, [pc, #68]	@ (800039c <_sbrk+0x64>)
 8000356:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <_sbrk+0x68>)
 8000358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800035a:	4b10      	ldr	r3, [pc, #64]	@ (800039c <_sbrk+0x64>)
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	693a      	ldr	r2, [r7, #16]
 8000364:	429a      	cmp	r2, r3
 8000366:	d207      	bcs.n	8000378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000368:	f000 fb42 	bl	80009f0 <__errno>
 800036c:	4603      	mov	r3, r0
 800036e:	220c      	movs	r2, #12
 8000370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000372:	f04f 33ff 	mov.w	r3, #4294967295
 8000376:	e009      	b.n	800038c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <_sbrk+0x64>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800037e:	4b07      	ldr	r3, [pc, #28]	@ (800039c <_sbrk+0x64>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	4a05      	ldr	r2, [pc, #20]	@ (800039c <_sbrk+0x64>)
 8000388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800038a:	68fb      	ldr	r3, [r7, #12]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20020000 	.word	0x20020000
 8000398:	00000400 	.word	0x00000400
 800039c:	20000078 	.word	0x20000078
 80003a0:	200001c8 	.word	0x200001c8

080003a4 <systicDelayMs>:
#define SYSTICK_LOAD_VAL		16000
#define CTRL_ENABLE				(1U<<0)
#define CTRL_CLKSRC				(1U<<12)
#define CTRL_COUNTFLAG			(1U<<16)

void systicDelayMs(int delay){
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
//	Reload with the number of clock per milisecond
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <systicDelayMs+0x54>)
 80003ae:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80003b2:	605a      	str	r2, [r3, #4]
//	Clear systick current value register
	SysTick->VAL = 0;
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <systicDelayMs+0x54>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	609a      	str	r2, [r3, #8]
//	Enable systick and select internal clk source
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC ;
 80003ba:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <systicDelayMs+0x54>)
 80003bc:	f241 0201 	movw	r2, #4097	@ 0x1001
 80003c0:	601a      	str	r2, [r3, #0]

	for (int i=0; i<delay; i++){
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e009      	b.n	80003dc <systicDelayMs+0x38>
//		Wait untill the countflag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){}
 80003c8:	bf00      	nop
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <systicDelayMs+0x54>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f9      	beq.n	80003ca <systicDelayMs+0x26>
	for (int i=0; i<delay; i++){
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf1      	blt.n	80003c8 <systicDelayMs+0x24>
	}
	SysTick->CTRL = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <systicDelayMs+0x54>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]



}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010

080003fc <__io_putchar>:
void uart_tx_init(void);
static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate);
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate);
void uart2_write(int ch);

int __io_putchar(int ch){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f000 f847 	bl	8000498 <uart2_write>
	return ch;
 800040a:	687b      	ldr	r3, [r7, #4]
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <uart_tx_init>:



void uart_tx_init(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <uart_tx_init+0x74>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a1a      	ldr	r2, [pc, #104]	@ (8000488 <uart_tx_init+0x74>)
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<5);
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <uart_tx_init+0x78>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a18      	ldr	r2, [pc, #96]	@ (800048c <uart_tx_init+0x78>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<4);
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <uart_tx_init+0x78>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a15      	ldr	r2, [pc, #84]	@ (800048c <uart_tx_init+0x78>)
 8000436:	f023 0310 	bic.w	r3, r3, #16
 800043a:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 TX)
    GPIOA->AFR[0] &= ~(0xF << 8); // Clear bits 8-11 for PA2
 800043c:	4b13      	ldr	r3, [pc, #76]	@ (800048c <uart_tx_init+0x78>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a12      	ldr	r2, [pc, #72]	@ (800048c <uart_tx_init+0x78>)
 8000442:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000446:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);  // AF7 is 0111
 8000448:	4b10      	ldr	r3, [pc, #64]	@ (800048c <uart_tx_init+0x78>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a0f      	ldr	r2, [pc, #60]	@ (800048c <uart_tx_init+0x78>)
 800044e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000452:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= UART2EN;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <uart_tx_init+0x74>)
 8000456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000458:	4a0b      	ldr	r2, [pc, #44]	@ (8000488 <uart_tx_init+0x74>)
 800045a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800045e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000464:	490a      	ldr	r1, [pc, #40]	@ (8000490 <uart_tx_init+0x7c>)
 8000466:	480b      	ldr	r0, [pc, #44]	@ (8000494 <uart_tx_init+0x80>)
 8000468:	f000 f82e 	bl	80004c8 <uart_set_baudrate>

    // Enable Transmitter
    USART2->CR1 |= CR1_TE;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <uart_tx_init+0x80>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <uart_tx_init+0x80>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	60d3      	str	r3, [r2, #12]

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <uart_tx_init+0x80>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <uart_tx_init+0x80>)
 800047e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40023800 	.word	0x40023800
 800048c:	40020000 	.word	0x40020000
 8000490:	00f42400 	.word	0x00f42400
 8000494:	40004400 	.word	0x40004400

08000498 <uart2_write>:

void uart2_write(int ch){
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    // Wait until transmit data register is empty
    while (!(USART2->SR & SR_TXE)) {}
 80004a0:	bf00      	nop
 80004a2:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <uart2_write+0x2c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f9      	beq.n	80004a2 <uart2_write+0xa>

    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <uart2_write+0x2c>)
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	6053      	str	r3, [r2, #4]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40004400 	.word	0x40004400

080004c8 <uart_set_baudrate>:

// Set baud rate
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
    USARTx->BRR = calculate_uart_bd(periphCLK, baudrate);
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	68b8      	ldr	r0, [r7, #8]
 80004d8:	f000 f807 	bl	80004ea <calculate_uart_bd>
 80004dc:	4602      	mov	r2, r0
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	609a      	str	r2, [r3, #8]
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <calculate_uart_bd>:

static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate){
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
    return ((periphCLK + (baudrate / 2U)) / baudrate);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	085a      	lsrs	r2, r3, #1
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	441a      	add	r2, r3
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	@ (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000514:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	@ (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	@ (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 fa5d 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fe5f 	bl	8000204 <main>

08000546 <LoopForever>:

LoopForever:
  b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000554:	08000ef0 	.word	0x08000ef0
  ldr r2, =_sbss
 8000558:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800055c:	200001c8 	.word	0x200001c8

08000560 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC_IRQHandler>
	...

08000564 <std>:
 8000564:	2300      	movs	r3, #0
 8000566:	b510      	push	{r4, lr}
 8000568:	4604      	mov	r4, r0
 800056a:	e9c0 3300 	strd	r3, r3, [r0]
 800056e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000572:	6083      	str	r3, [r0, #8]
 8000574:	8181      	strh	r1, [r0, #12]
 8000576:	6643      	str	r3, [r0, #100]	@ 0x64
 8000578:	81c2      	strh	r2, [r0, #14]
 800057a:	6183      	str	r3, [r0, #24]
 800057c:	4619      	mov	r1, r3
 800057e:	2208      	movs	r2, #8
 8000580:	305c      	adds	r0, #92	@ 0x5c
 8000582:	f000 f9e7 	bl	8000954 <memset>
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <std+0x58>)
 8000588:	6263      	str	r3, [r4, #36]	@ 0x24
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <std+0x5c>)
 800058c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <std+0x60>)
 8000590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <std+0x64>)
 8000594:	6323      	str	r3, [r4, #48]	@ 0x30
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <std+0x68>)
 8000598:	6224      	str	r4, [r4, #32]
 800059a:	429c      	cmp	r4, r3
 800059c:	d006      	beq.n	80005ac <std+0x48>
 800059e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005a2:	4294      	cmp	r4, r2
 80005a4:	d002      	beq.n	80005ac <std+0x48>
 80005a6:	33d0      	adds	r3, #208	@ 0xd0
 80005a8:	429c      	cmp	r4, r3
 80005aa:	d105      	bne.n	80005b8 <std+0x54>
 80005ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b4:	f000 ba46 	b.w	8000a44 <__retarget_lock_init_recursive>
 80005b8:	bd10      	pop	{r4, pc}
 80005ba:	bf00      	nop
 80005bc:	080007a5 	.word	0x080007a5
 80005c0:	080007c7 	.word	0x080007c7
 80005c4:	080007ff 	.word	0x080007ff
 80005c8:	08000823 	.word	0x08000823
 80005cc:	2000007c 	.word	0x2000007c

080005d0 <stdio_exit_handler>:
 80005d0:	4a02      	ldr	r2, [pc, #8]	@ (80005dc <stdio_exit_handler+0xc>)
 80005d2:	4903      	ldr	r1, [pc, #12]	@ (80005e0 <stdio_exit_handler+0x10>)
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <stdio_exit_handler+0x14>)
 80005d6:	f000 b869 	b.w	80006ac <_fwalk_sglue>
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	08000d45 	.word	0x08000d45
 80005e4:	20000010 	.word	0x20000010

080005e8 <cleanup_stdio>:
 80005e8:	6841      	ldr	r1, [r0, #4]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <cleanup_stdio+0x34>)
 80005ec:	4299      	cmp	r1, r3
 80005ee:	b510      	push	{r4, lr}
 80005f0:	4604      	mov	r4, r0
 80005f2:	d001      	beq.n	80005f8 <cleanup_stdio+0x10>
 80005f4:	f000 fba6 	bl	8000d44 <_fflush_r>
 80005f8:	68a1      	ldr	r1, [r4, #8]
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <cleanup_stdio+0x38>)
 80005fc:	4299      	cmp	r1, r3
 80005fe:	d002      	beq.n	8000606 <cleanup_stdio+0x1e>
 8000600:	4620      	mov	r0, r4
 8000602:	f000 fb9f 	bl	8000d44 <_fflush_r>
 8000606:	68e1      	ldr	r1, [r4, #12]
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <cleanup_stdio+0x3c>)
 800060a:	4299      	cmp	r1, r3
 800060c:	d004      	beq.n	8000618 <cleanup_stdio+0x30>
 800060e:	4620      	mov	r0, r4
 8000610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000614:	f000 bb96 	b.w	8000d44 <_fflush_r>
 8000618:	bd10      	pop	{r4, pc}
 800061a:	bf00      	nop
 800061c:	2000007c 	.word	0x2000007c
 8000620:	200000e4 	.word	0x200000e4
 8000624:	2000014c 	.word	0x2000014c

08000628 <global_stdio_init.part.0>:
 8000628:	b510      	push	{r4, lr}
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <global_stdio_init.part.0+0x30>)
 800062c:	4c0b      	ldr	r4, [pc, #44]	@ (800065c <global_stdio_init.part.0+0x34>)
 800062e:	4a0c      	ldr	r2, [pc, #48]	@ (8000660 <global_stdio_init.part.0+0x38>)
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4620      	mov	r0, r4
 8000634:	2200      	movs	r2, #0
 8000636:	2104      	movs	r1, #4
 8000638:	f7ff ff94 	bl	8000564 <std>
 800063c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000640:	2201      	movs	r2, #1
 8000642:	2109      	movs	r1, #9
 8000644:	f7ff ff8e 	bl	8000564 <std>
 8000648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800064c:	2202      	movs	r2, #2
 800064e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000652:	2112      	movs	r1, #18
 8000654:	f7ff bf86 	b.w	8000564 <std>
 8000658:	200001b4 	.word	0x200001b4
 800065c:	2000007c 	.word	0x2000007c
 8000660:	080005d1 	.word	0x080005d1

08000664 <__sfp_lock_acquire>:
 8000664:	4801      	ldr	r0, [pc, #4]	@ (800066c <__sfp_lock_acquire+0x8>)
 8000666:	f000 b9ee 	b.w	8000a46 <__retarget_lock_acquire_recursive>
 800066a:	bf00      	nop
 800066c:	200001bd 	.word	0x200001bd

08000670 <__sfp_lock_release>:
 8000670:	4801      	ldr	r0, [pc, #4]	@ (8000678 <__sfp_lock_release+0x8>)
 8000672:	f000 b9e9 	b.w	8000a48 <__retarget_lock_release_recursive>
 8000676:	bf00      	nop
 8000678:	200001bd 	.word	0x200001bd

0800067c <__sinit>:
 800067c:	b510      	push	{r4, lr}
 800067e:	4604      	mov	r4, r0
 8000680:	f7ff fff0 	bl	8000664 <__sfp_lock_acquire>
 8000684:	6a23      	ldr	r3, [r4, #32]
 8000686:	b11b      	cbz	r3, 8000690 <__sinit+0x14>
 8000688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068c:	f7ff bff0 	b.w	8000670 <__sfp_lock_release>
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <__sinit+0x28>)
 8000692:	6223      	str	r3, [r4, #32]
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <__sinit+0x2c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1f5      	bne.n	8000688 <__sinit+0xc>
 800069c:	f7ff ffc4 	bl	8000628 <global_stdio_init.part.0>
 80006a0:	e7f2      	b.n	8000688 <__sinit+0xc>
 80006a2:	bf00      	nop
 80006a4:	080005e9 	.word	0x080005e9
 80006a8:	200001b4 	.word	0x200001b4

080006ac <_fwalk_sglue>:
 80006ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006b0:	4607      	mov	r7, r0
 80006b2:	4688      	mov	r8, r1
 80006b4:	4614      	mov	r4, r2
 80006b6:	2600      	movs	r6, #0
 80006b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006bc:	f1b9 0901 	subs.w	r9, r9, #1
 80006c0:	d505      	bpl.n	80006ce <_fwalk_sglue+0x22>
 80006c2:	6824      	ldr	r4, [r4, #0]
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d1f7      	bne.n	80006b8 <_fwalk_sglue+0xc>
 80006c8:	4630      	mov	r0, r6
 80006ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006ce:	89ab      	ldrh	r3, [r5, #12]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d907      	bls.n	80006e4 <_fwalk_sglue+0x38>
 80006d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d8:	3301      	adds	r3, #1
 80006da:	d003      	beq.n	80006e4 <_fwalk_sglue+0x38>
 80006dc:	4629      	mov	r1, r5
 80006de:	4638      	mov	r0, r7
 80006e0:	47c0      	blx	r8
 80006e2:	4306      	orrs	r6, r0
 80006e4:	3568      	adds	r5, #104	@ 0x68
 80006e6:	e7e9      	b.n	80006bc <_fwalk_sglue+0x10>

080006e8 <_puts_r>:
 80006e8:	6a03      	ldr	r3, [r0, #32]
 80006ea:	b570      	push	{r4, r5, r6, lr}
 80006ec:	6884      	ldr	r4, [r0, #8]
 80006ee:	4605      	mov	r5, r0
 80006f0:	460e      	mov	r6, r1
 80006f2:	b90b      	cbnz	r3, 80006f8 <_puts_r+0x10>
 80006f4:	f7ff ffc2 	bl	800067c <__sinit>
 80006f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006fa:	07db      	lsls	r3, r3, #31
 80006fc:	d405      	bmi.n	800070a <_puts_r+0x22>
 80006fe:	89a3      	ldrh	r3, [r4, #12]
 8000700:	0598      	lsls	r0, r3, #22
 8000702:	d402      	bmi.n	800070a <_puts_r+0x22>
 8000704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000706:	f000 f99e 	bl	8000a46 <__retarget_lock_acquire_recursive>
 800070a:	89a3      	ldrh	r3, [r4, #12]
 800070c:	0719      	lsls	r1, r3, #28
 800070e:	d502      	bpl.n	8000716 <_puts_r+0x2e>
 8000710:	6923      	ldr	r3, [r4, #16]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d135      	bne.n	8000782 <_puts_r+0x9a>
 8000716:	4621      	mov	r1, r4
 8000718:	4628      	mov	r0, r5
 800071a:	f000 f8c5 	bl	80008a8 <__swsetup_r>
 800071e:	b380      	cbz	r0, 8000782 <_puts_r+0x9a>
 8000720:	f04f 35ff 	mov.w	r5, #4294967295
 8000724:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000726:	07da      	lsls	r2, r3, #31
 8000728:	d405      	bmi.n	8000736 <_puts_r+0x4e>
 800072a:	89a3      	ldrh	r3, [r4, #12]
 800072c:	059b      	lsls	r3, r3, #22
 800072e:	d402      	bmi.n	8000736 <_puts_r+0x4e>
 8000730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000732:	f000 f989 	bl	8000a48 <__retarget_lock_release_recursive>
 8000736:	4628      	mov	r0, r5
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	2b00      	cmp	r3, #0
 800073c:	da04      	bge.n	8000748 <_puts_r+0x60>
 800073e:	69a2      	ldr	r2, [r4, #24]
 8000740:	429a      	cmp	r2, r3
 8000742:	dc17      	bgt.n	8000774 <_puts_r+0x8c>
 8000744:	290a      	cmp	r1, #10
 8000746:	d015      	beq.n	8000774 <_puts_r+0x8c>
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	6022      	str	r2, [r4, #0]
 800074e:	7019      	strb	r1, [r3, #0]
 8000750:	68a3      	ldr	r3, [r4, #8]
 8000752:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000756:	3b01      	subs	r3, #1
 8000758:	60a3      	str	r3, [r4, #8]
 800075a:	2900      	cmp	r1, #0
 800075c:	d1ed      	bne.n	800073a <_puts_r+0x52>
 800075e:	2b00      	cmp	r3, #0
 8000760:	da11      	bge.n	8000786 <_puts_r+0x9e>
 8000762:	4622      	mov	r2, r4
 8000764:	210a      	movs	r1, #10
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f85f 	bl	800082a <__swbuf_r>
 800076c:	3001      	adds	r0, #1
 800076e:	d0d7      	beq.n	8000720 <_puts_r+0x38>
 8000770:	250a      	movs	r5, #10
 8000772:	e7d7      	b.n	8000724 <_puts_r+0x3c>
 8000774:	4622      	mov	r2, r4
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f857 	bl	800082a <__swbuf_r>
 800077c:	3001      	adds	r0, #1
 800077e:	d1e7      	bne.n	8000750 <_puts_r+0x68>
 8000780:	e7ce      	b.n	8000720 <_puts_r+0x38>
 8000782:	3e01      	subs	r6, #1
 8000784:	e7e4      	b.n	8000750 <_puts_r+0x68>
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	6022      	str	r2, [r4, #0]
 800078c:	220a      	movs	r2, #10
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e7ee      	b.n	8000770 <_puts_r+0x88>
	...

08000794 <puts>:
 8000794:	4b02      	ldr	r3, [pc, #8]	@ (80007a0 <puts+0xc>)
 8000796:	4601      	mov	r1, r0
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	f7ff bfa5 	b.w	80006e8 <_puts_r>
 800079e:	bf00      	nop
 80007a0:	2000000c 	.word	0x2000000c

080007a4 <__sread>:
 80007a4:	b510      	push	{r4, lr}
 80007a6:	460c      	mov	r4, r1
 80007a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ac:	f000 f8fc 	bl	80009a8 <_read_r>
 80007b0:	2800      	cmp	r0, #0
 80007b2:	bfab      	itete	ge
 80007b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007b6:	89a3      	ldrhlt	r3, [r4, #12]
 80007b8:	181b      	addge	r3, r3, r0
 80007ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007be:	bfac      	ite	ge
 80007c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007c2:	81a3      	strhlt	r3, [r4, #12]
 80007c4:	bd10      	pop	{r4, pc}

080007c6 <__swrite>:
 80007c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ca:	461f      	mov	r7, r3
 80007cc:	898b      	ldrh	r3, [r1, #12]
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	4605      	mov	r5, r0
 80007d2:	460c      	mov	r4, r1
 80007d4:	4616      	mov	r6, r2
 80007d6:	d505      	bpl.n	80007e4 <__swrite+0x1e>
 80007d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007dc:	2302      	movs	r3, #2
 80007de:	2200      	movs	r2, #0
 80007e0:	f000 f8d0 	bl	8000984 <_lseek_r>
 80007e4:	89a3      	ldrh	r3, [r4, #12]
 80007e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ee:	81a3      	strh	r3, [r4, #12]
 80007f0:	4632      	mov	r2, r6
 80007f2:	463b      	mov	r3, r7
 80007f4:	4628      	mov	r0, r5
 80007f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007fa:	f000 b8e7 	b.w	80009cc <_write_r>

080007fe <__sseek>:
 80007fe:	b510      	push	{r4, lr}
 8000800:	460c      	mov	r4, r1
 8000802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000806:	f000 f8bd 	bl	8000984 <_lseek_r>
 800080a:	1c43      	adds	r3, r0, #1
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	bf15      	itete	ne
 8000810:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800081a:	81a3      	strheq	r3, [r4, #12]
 800081c:	bf18      	it	ne
 800081e:	81a3      	strhne	r3, [r4, #12]
 8000820:	bd10      	pop	{r4, pc}

08000822 <__sclose>:
 8000822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000826:	f000 b89d 	b.w	8000964 <_close_r>

0800082a <__swbuf_r>:
 800082a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082c:	460e      	mov	r6, r1
 800082e:	4614      	mov	r4, r2
 8000830:	4605      	mov	r5, r0
 8000832:	b118      	cbz	r0, 800083c <__swbuf_r+0x12>
 8000834:	6a03      	ldr	r3, [r0, #32]
 8000836:	b90b      	cbnz	r3, 800083c <__swbuf_r+0x12>
 8000838:	f7ff ff20 	bl	800067c <__sinit>
 800083c:	69a3      	ldr	r3, [r4, #24]
 800083e:	60a3      	str	r3, [r4, #8]
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	071a      	lsls	r2, r3, #28
 8000844:	d501      	bpl.n	800084a <__swbuf_r+0x20>
 8000846:	6923      	ldr	r3, [r4, #16]
 8000848:	b943      	cbnz	r3, 800085c <__swbuf_r+0x32>
 800084a:	4621      	mov	r1, r4
 800084c:	4628      	mov	r0, r5
 800084e:	f000 f82b 	bl	80008a8 <__swsetup_r>
 8000852:	b118      	cbz	r0, 800085c <__swbuf_r+0x32>
 8000854:	f04f 37ff 	mov.w	r7, #4294967295
 8000858:	4638      	mov	r0, r7
 800085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	6922      	ldr	r2, [r4, #16]
 8000860:	1a98      	subs	r0, r3, r2
 8000862:	6963      	ldr	r3, [r4, #20]
 8000864:	b2f6      	uxtb	r6, r6
 8000866:	4283      	cmp	r3, r0
 8000868:	4637      	mov	r7, r6
 800086a:	dc05      	bgt.n	8000878 <__swbuf_r+0x4e>
 800086c:	4621      	mov	r1, r4
 800086e:	4628      	mov	r0, r5
 8000870:	f000 fa68 	bl	8000d44 <_fflush_r>
 8000874:	2800      	cmp	r0, #0
 8000876:	d1ed      	bne.n	8000854 <__swbuf_r+0x2a>
 8000878:	68a3      	ldr	r3, [r4, #8]
 800087a:	3b01      	subs	r3, #1
 800087c:	60a3      	str	r3, [r4, #8]
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	6022      	str	r2, [r4, #0]
 8000884:	701e      	strb	r6, [r3, #0]
 8000886:	6962      	ldr	r2, [r4, #20]
 8000888:	1c43      	adds	r3, r0, #1
 800088a:	429a      	cmp	r2, r3
 800088c:	d004      	beq.n	8000898 <__swbuf_r+0x6e>
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	07db      	lsls	r3, r3, #31
 8000892:	d5e1      	bpl.n	8000858 <__swbuf_r+0x2e>
 8000894:	2e0a      	cmp	r6, #10
 8000896:	d1df      	bne.n	8000858 <__swbuf_r+0x2e>
 8000898:	4621      	mov	r1, r4
 800089a:	4628      	mov	r0, r5
 800089c:	f000 fa52 	bl	8000d44 <_fflush_r>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d0d9      	beq.n	8000858 <__swbuf_r+0x2e>
 80008a4:	e7d6      	b.n	8000854 <__swbuf_r+0x2a>
	...

080008a8 <__swsetup_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <__swsetup_r+0xa8>)
 80008ac:	4605      	mov	r5, r0
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	460c      	mov	r4, r1
 80008b2:	b118      	cbz	r0, 80008bc <__swsetup_r+0x14>
 80008b4:	6a03      	ldr	r3, [r0, #32]
 80008b6:	b90b      	cbnz	r3, 80008bc <__swsetup_r+0x14>
 80008b8:	f7ff fee0 	bl	800067c <__sinit>
 80008bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008c0:	0719      	lsls	r1, r3, #28
 80008c2:	d422      	bmi.n	800090a <__swsetup_r+0x62>
 80008c4:	06da      	lsls	r2, r3, #27
 80008c6:	d407      	bmi.n	80008d8 <__swsetup_r+0x30>
 80008c8:	2209      	movs	r2, #9
 80008ca:	602a      	str	r2, [r5, #0]
 80008cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d0:	81a3      	strh	r3, [r4, #12]
 80008d2:	f04f 30ff 	mov.w	r0, #4294967295
 80008d6:	e033      	b.n	8000940 <__swsetup_r+0x98>
 80008d8:	0758      	lsls	r0, r3, #29
 80008da:	d512      	bpl.n	8000902 <__swsetup_r+0x5a>
 80008dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008de:	b141      	cbz	r1, 80008f2 <__swsetup_r+0x4a>
 80008e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008e4:	4299      	cmp	r1, r3
 80008e6:	d002      	beq.n	80008ee <__swsetup_r+0x46>
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 f8af 	bl	8000a4c <_free_r>
 80008ee:	2300      	movs	r3, #0
 80008f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80008f2:	89a3      	ldrh	r3, [r4, #12]
 80008f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008f8:	81a3      	strh	r3, [r4, #12]
 80008fa:	2300      	movs	r3, #0
 80008fc:	6063      	str	r3, [r4, #4]
 80008fe:	6923      	ldr	r3, [r4, #16]
 8000900:	6023      	str	r3, [r4, #0]
 8000902:	89a3      	ldrh	r3, [r4, #12]
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	81a3      	strh	r3, [r4, #12]
 800090a:	6923      	ldr	r3, [r4, #16]
 800090c:	b94b      	cbnz	r3, 8000922 <__swsetup_r+0x7a>
 800090e:	89a3      	ldrh	r3, [r4, #12]
 8000910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000918:	d003      	beq.n	8000922 <__swsetup_r+0x7a>
 800091a:	4621      	mov	r1, r4
 800091c:	4628      	mov	r0, r5
 800091e:	f000 fa5f 	bl	8000de0 <__smakebuf_r>
 8000922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000926:	f013 0201 	ands.w	r2, r3, #1
 800092a:	d00a      	beq.n	8000942 <__swsetup_r+0x9a>
 800092c:	2200      	movs	r2, #0
 800092e:	60a2      	str	r2, [r4, #8]
 8000930:	6962      	ldr	r2, [r4, #20]
 8000932:	4252      	negs	r2, r2
 8000934:	61a2      	str	r2, [r4, #24]
 8000936:	6922      	ldr	r2, [r4, #16]
 8000938:	b942      	cbnz	r2, 800094c <__swsetup_r+0xa4>
 800093a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800093e:	d1c5      	bne.n	80008cc <__swsetup_r+0x24>
 8000940:	bd38      	pop	{r3, r4, r5, pc}
 8000942:	0799      	lsls	r1, r3, #30
 8000944:	bf58      	it	pl
 8000946:	6962      	ldrpl	r2, [r4, #20]
 8000948:	60a2      	str	r2, [r4, #8]
 800094a:	e7f4      	b.n	8000936 <__swsetup_r+0x8e>
 800094c:	2000      	movs	r0, #0
 800094e:	e7f7      	b.n	8000940 <__swsetup_r+0x98>
 8000950:	2000000c 	.word	0x2000000c

08000954 <memset>:
 8000954:	4402      	add	r2, r0
 8000956:	4603      	mov	r3, r0
 8000958:	4293      	cmp	r3, r2
 800095a:	d100      	bne.n	800095e <memset+0xa>
 800095c:	4770      	bx	lr
 800095e:	f803 1b01 	strb.w	r1, [r3], #1
 8000962:	e7f9      	b.n	8000958 <memset+0x4>

08000964 <_close_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	4d06      	ldr	r5, [pc, #24]	@ (8000980 <_close_r+0x1c>)
 8000968:	2300      	movs	r3, #0
 800096a:	4604      	mov	r4, r0
 800096c:	4608      	mov	r0, r1
 800096e:	602b      	str	r3, [r5, #0]
 8000970:	f7ff fcad 	bl	80002ce <_close>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	d102      	bne.n	800097e <_close_r+0x1a>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	b103      	cbz	r3, 800097e <_close_r+0x1a>
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	bd38      	pop	{r3, r4, r5, pc}
 8000980:	200001b8 	.word	0x200001b8

08000984 <_lseek_r>:
 8000984:	b538      	push	{r3, r4, r5, lr}
 8000986:	4d07      	ldr	r5, [pc, #28]	@ (80009a4 <_lseek_r+0x20>)
 8000988:	4604      	mov	r4, r0
 800098a:	4608      	mov	r0, r1
 800098c:	4611      	mov	r1, r2
 800098e:	2200      	movs	r2, #0
 8000990:	602a      	str	r2, [r5, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	f7ff fcc2 	bl	800031c <_lseek>
 8000998:	1c43      	adds	r3, r0, #1
 800099a:	d102      	bne.n	80009a2 <_lseek_r+0x1e>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b103      	cbz	r3, 80009a2 <_lseek_r+0x1e>
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	bd38      	pop	{r3, r4, r5, pc}
 80009a4:	200001b8 	.word	0x200001b8

080009a8 <_read_r>:
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	4d07      	ldr	r5, [pc, #28]	@ (80009c8 <_read_r+0x20>)
 80009ac:	4604      	mov	r4, r0
 80009ae:	4608      	mov	r0, r1
 80009b0:	4611      	mov	r1, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	602a      	str	r2, [r5, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	f7ff fc50 	bl	800025c <_read>
 80009bc:	1c43      	adds	r3, r0, #1
 80009be:	d102      	bne.n	80009c6 <_read_r+0x1e>
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	b103      	cbz	r3, 80009c6 <_read_r+0x1e>
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	bd38      	pop	{r3, r4, r5, pc}
 80009c8:	200001b8 	.word	0x200001b8

080009cc <_write_r>:
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4d07      	ldr	r5, [pc, #28]	@ (80009ec <_write_r+0x20>)
 80009d0:	4604      	mov	r4, r0
 80009d2:	4608      	mov	r0, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	2200      	movs	r2, #0
 80009d8:	602a      	str	r2, [r5, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	f7ff fc5b 	bl	8000296 <_write>
 80009e0:	1c43      	adds	r3, r0, #1
 80009e2:	d102      	bne.n	80009ea <_write_r+0x1e>
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	b103      	cbz	r3, 80009ea <_write_r+0x1e>
 80009e8:	6023      	str	r3, [r4, #0]
 80009ea:	bd38      	pop	{r3, r4, r5, pc}
 80009ec:	200001b8 	.word	0x200001b8

080009f0 <__errno>:
 80009f0:	4b01      	ldr	r3, [pc, #4]	@ (80009f8 <__errno+0x8>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	@ (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 fa54 	bl	8000ebc <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000ee8 	.word	0x08000ee8
 8000a38:	08000ee8 	.word	0x08000ee8
 8000a3c:	08000ee8 	.word	0x08000ee8
 8000a40:	08000eec 	.word	0x08000eec

08000a44 <__retarget_lock_init_recursive>:
 8000a44:	4770      	bx	lr

08000a46 <__retarget_lock_acquire_recursive>:
 8000a46:	4770      	bx	lr

08000a48 <__retarget_lock_release_recursive>:
 8000a48:	4770      	bx	lr
	...

08000a4c <_free_r>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4605      	mov	r5, r0
 8000a50:	2900      	cmp	r1, #0
 8000a52:	d041      	beq.n	8000ad8 <_free_r+0x8c>
 8000a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a58:	1f0c      	subs	r4, r1, #4
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bfb8      	it	lt
 8000a5e:	18e4      	addlt	r4, r4, r3
 8000a60:	f000 f8e0 	bl	8000c24 <__malloc_lock>
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <_free_r+0x90>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	b933      	cbnz	r3, 8000a78 <_free_r+0x2c>
 8000a6a:	6063      	str	r3, [r4, #4]
 8000a6c:	6014      	str	r4, [r2, #0]
 8000a6e:	4628      	mov	r0, r5
 8000a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a74:	f000 b8dc 	b.w	8000c30 <__malloc_unlock>
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	d908      	bls.n	8000a8e <_free_r+0x42>
 8000a7c:	6820      	ldr	r0, [r4, #0]
 8000a7e:	1821      	adds	r1, r4, r0
 8000a80:	428b      	cmp	r3, r1
 8000a82:	bf01      	itttt	eq
 8000a84:	6819      	ldreq	r1, [r3, #0]
 8000a86:	685b      	ldreq	r3, [r3, #4]
 8000a88:	1809      	addeq	r1, r1, r0
 8000a8a:	6021      	streq	r1, [r4, #0]
 8000a8c:	e7ed      	b.n	8000a6a <_free_r+0x1e>
 8000a8e:	461a      	mov	r2, r3
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	b10b      	cbz	r3, 8000a98 <_free_r+0x4c>
 8000a94:	42a3      	cmp	r3, r4
 8000a96:	d9fa      	bls.n	8000a8e <_free_r+0x42>
 8000a98:	6811      	ldr	r1, [r2, #0]
 8000a9a:	1850      	adds	r0, r2, r1
 8000a9c:	42a0      	cmp	r0, r4
 8000a9e:	d10b      	bne.n	8000ab8 <_free_r+0x6c>
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	4401      	add	r1, r0
 8000aa4:	1850      	adds	r0, r2, r1
 8000aa6:	4283      	cmp	r3, r0
 8000aa8:	6011      	str	r1, [r2, #0]
 8000aaa:	d1e0      	bne.n	8000a6e <_free_r+0x22>
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	6053      	str	r3, [r2, #4]
 8000ab2:	4408      	add	r0, r1
 8000ab4:	6010      	str	r0, [r2, #0]
 8000ab6:	e7da      	b.n	8000a6e <_free_r+0x22>
 8000ab8:	d902      	bls.n	8000ac0 <_free_r+0x74>
 8000aba:	230c      	movs	r3, #12
 8000abc:	602b      	str	r3, [r5, #0]
 8000abe:	e7d6      	b.n	8000a6e <_free_r+0x22>
 8000ac0:	6820      	ldr	r0, [r4, #0]
 8000ac2:	1821      	adds	r1, r4, r0
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf04      	itt	eq
 8000ac8:	6819      	ldreq	r1, [r3, #0]
 8000aca:	685b      	ldreq	r3, [r3, #4]
 8000acc:	6063      	str	r3, [r4, #4]
 8000ace:	bf04      	itt	eq
 8000ad0:	1809      	addeq	r1, r1, r0
 8000ad2:	6021      	streq	r1, [r4, #0]
 8000ad4:	6054      	str	r4, [r2, #4]
 8000ad6:	e7ca      	b.n	8000a6e <_free_r+0x22>
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
 8000ada:	bf00      	nop
 8000adc:	200001c4 	.word	0x200001c4

08000ae0 <sbrk_aligned>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8000b20 <sbrk_aligned+0x40>)
 8000ae4:	460c      	mov	r4, r1
 8000ae6:	6831      	ldr	r1, [r6, #0]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	b911      	cbnz	r1, 8000af2 <sbrk_aligned+0x12>
 8000aec:	f000 f9d6 	bl	8000e9c <_sbrk_r>
 8000af0:	6030      	str	r0, [r6, #0]
 8000af2:	4621      	mov	r1, r4
 8000af4:	4628      	mov	r0, r5
 8000af6:	f000 f9d1 	bl	8000e9c <_sbrk_r>
 8000afa:	1c43      	adds	r3, r0, #1
 8000afc:	d103      	bne.n	8000b06 <sbrk_aligned+0x26>
 8000afe:	f04f 34ff 	mov.w	r4, #4294967295
 8000b02:	4620      	mov	r0, r4
 8000b04:	bd70      	pop	{r4, r5, r6, pc}
 8000b06:	1cc4      	adds	r4, r0, #3
 8000b08:	f024 0403 	bic.w	r4, r4, #3
 8000b0c:	42a0      	cmp	r0, r4
 8000b0e:	d0f8      	beq.n	8000b02 <sbrk_aligned+0x22>
 8000b10:	1a21      	subs	r1, r4, r0
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 f9c2 	bl	8000e9c <_sbrk_r>
 8000b18:	3001      	adds	r0, #1
 8000b1a:	d1f2      	bne.n	8000b02 <sbrk_aligned+0x22>
 8000b1c:	e7ef      	b.n	8000afe <sbrk_aligned+0x1e>
 8000b1e:	bf00      	nop
 8000b20:	200001c0 	.word	0x200001c0

08000b24 <_malloc_r>:
 8000b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b28:	1ccd      	adds	r5, r1, #3
 8000b2a:	f025 0503 	bic.w	r5, r5, #3
 8000b2e:	3508      	adds	r5, #8
 8000b30:	2d0c      	cmp	r5, #12
 8000b32:	bf38      	it	cc
 8000b34:	250c      	movcc	r5, #12
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	4606      	mov	r6, r0
 8000b3a:	db01      	blt.n	8000b40 <_malloc_r+0x1c>
 8000b3c:	42a9      	cmp	r1, r5
 8000b3e:	d904      	bls.n	8000b4a <_malloc_r+0x26>
 8000b40:	230c      	movs	r3, #12
 8000b42:	6033      	str	r3, [r6, #0]
 8000b44:	2000      	movs	r0, #0
 8000b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c20 <_malloc_r+0xfc>
 8000b4e:	f000 f869 	bl	8000c24 <__malloc_lock>
 8000b52:	f8d8 3000 	ldr.w	r3, [r8]
 8000b56:	461c      	mov	r4, r3
 8000b58:	bb44      	cbnz	r4, 8000bac <_malloc_r+0x88>
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f7ff ffbf 	bl	8000ae0 <sbrk_aligned>
 8000b62:	1c43      	adds	r3, r0, #1
 8000b64:	4604      	mov	r4, r0
 8000b66:	d158      	bne.n	8000c1a <_malloc_r+0xf6>
 8000b68:	f8d8 4000 	ldr.w	r4, [r8]
 8000b6c:	4627      	mov	r7, r4
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d143      	bne.n	8000bfa <_malloc_r+0xd6>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d04b      	beq.n	8000c0e <_malloc_r+0xea>
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	4639      	mov	r1, r7
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	eb04 0903 	add.w	r9, r4, r3
 8000b80:	f000 f98c 	bl	8000e9c <_sbrk_r>
 8000b84:	4581      	cmp	r9, r0
 8000b86:	d142      	bne.n	8000c0e <_malloc_r+0xea>
 8000b88:	6821      	ldr	r1, [r4, #0]
 8000b8a:	1a6d      	subs	r5, r5, r1
 8000b8c:	4629      	mov	r1, r5
 8000b8e:	4630      	mov	r0, r6
 8000b90:	f7ff ffa6 	bl	8000ae0 <sbrk_aligned>
 8000b94:	3001      	adds	r0, #1
 8000b96:	d03a      	beq.n	8000c0e <_malloc_r+0xea>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	442b      	add	r3, r5
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	bb62      	cbnz	r2, 8000c00 <_malloc_r+0xdc>
 8000ba6:	f8c8 7000 	str.w	r7, [r8]
 8000baa:	e00f      	b.n	8000bcc <_malloc_r+0xa8>
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	1b52      	subs	r2, r2, r5
 8000bb0:	d420      	bmi.n	8000bf4 <_malloc_r+0xd0>
 8000bb2:	2a0b      	cmp	r2, #11
 8000bb4:	d917      	bls.n	8000be6 <_malloc_r+0xc2>
 8000bb6:	1961      	adds	r1, r4, r5
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	6025      	str	r5, [r4, #0]
 8000bbc:	bf18      	it	ne
 8000bbe:	6059      	strne	r1, [r3, #4]
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	bf08      	it	eq
 8000bc4:	f8c8 1000 	streq.w	r1, [r8]
 8000bc8:	5162      	str	r2, [r4, r5]
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f000 f82f 	bl	8000c30 <__malloc_unlock>
 8000bd2:	f104 000b 	add.w	r0, r4, #11
 8000bd6:	1d23      	adds	r3, r4, #4
 8000bd8:	f020 0007 	bic.w	r0, r0, #7
 8000bdc:	1ac2      	subs	r2, r0, r3
 8000bde:	bf1c      	itt	ne
 8000be0:	1a1b      	subne	r3, r3, r0
 8000be2:	50a3      	strne	r3, [r4, r2]
 8000be4:	e7af      	b.n	8000b46 <_malloc_r+0x22>
 8000be6:	6862      	ldr	r2, [r4, #4]
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	bf0c      	ite	eq
 8000bec:	f8c8 2000 	streq.w	r2, [r8]
 8000bf0:	605a      	strne	r2, [r3, #4]
 8000bf2:	e7eb      	b.n	8000bcc <_malloc_r+0xa8>
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	6864      	ldr	r4, [r4, #4]
 8000bf8:	e7ae      	b.n	8000b58 <_malloc_r+0x34>
 8000bfa:	463c      	mov	r4, r7
 8000bfc:	687f      	ldr	r7, [r7, #4]
 8000bfe:	e7b6      	b.n	8000b6e <_malloc_r+0x4a>
 8000c00:	461a      	mov	r2, r3
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	42a3      	cmp	r3, r4
 8000c06:	d1fb      	bne.n	8000c00 <_malloc_r+0xdc>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	6053      	str	r3, [r2, #4]
 8000c0c:	e7de      	b.n	8000bcc <_malloc_r+0xa8>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6033      	str	r3, [r6, #0]
 8000c12:	4630      	mov	r0, r6
 8000c14:	f000 f80c 	bl	8000c30 <__malloc_unlock>
 8000c18:	e794      	b.n	8000b44 <_malloc_r+0x20>
 8000c1a:	6005      	str	r5, [r0, #0]
 8000c1c:	e7d6      	b.n	8000bcc <_malloc_r+0xa8>
 8000c1e:	bf00      	nop
 8000c20:	200001c4 	.word	0x200001c4

08000c24 <__malloc_lock>:
 8000c24:	4801      	ldr	r0, [pc, #4]	@ (8000c2c <__malloc_lock+0x8>)
 8000c26:	f7ff bf0e 	b.w	8000a46 <__retarget_lock_acquire_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200001bc 	.word	0x200001bc

08000c30 <__malloc_unlock>:
 8000c30:	4801      	ldr	r0, [pc, #4]	@ (8000c38 <__malloc_unlock+0x8>)
 8000c32:	f7ff bf09 	b.w	8000a48 <__retarget_lock_release_recursive>
 8000c36:	bf00      	nop
 8000c38:	200001bc 	.word	0x200001bc

08000c3c <__sflush_r>:
 8000c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	0716      	lsls	r6, r2, #28
 8000c46:	4605      	mov	r5, r0
 8000c48:	460c      	mov	r4, r1
 8000c4a:	d454      	bmi.n	8000cf6 <__sflush_r+0xba>
 8000c4c:	684b      	ldr	r3, [r1, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dc02      	bgt.n	8000c58 <__sflush_r+0x1c>
 8000c52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dd48      	ble.n	8000cea <__sflush_r+0xae>
 8000c58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d045      	beq.n	8000cea <__sflush_r+0xae>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c64:	682f      	ldr	r7, [r5, #0]
 8000c66:	6a21      	ldr	r1, [r4, #32]
 8000c68:	602b      	str	r3, [r5, #0]
 8000c6a:	d030      	beq.n	8000cce <__sflush_r+0x92>
 8000c6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c6e:	89a3      	ldrh	r3, [r4, #12]
 8000c70:	0759      	lsls	r1, r3, #29
 8000c72:	d505      	bpl.n	8000c80 <__sflush_r+0x44>
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	1ad2      	subs	r2, r2, r3
 8000c78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c7a:	b10b      	cbz	r3, 8000c80 <__sflush_r+0x44>
 8000c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c84:	6a21      	ldr	r1, [r4, #32]
 8000c86:	4628      	mov	r0, r5
 8000c88:	47b0      	blx	r6
 8000c8a:	1c43      	adds	r3, r0, #1
 8000c8c:	89a3      	ldrh	r3, [r4, #12]
 8000c8e:	d106      	bne.n	8000c9e <__sflush_r+0x62>
 8000c90:	6829      	ldr	r1, [r5, #0]
 8000c92:	291d      	cmp	r1, #29
 8000c94:	d82b      	bhi.n	8000cee <__sflush_r+0xb2>
 8000c96:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <__sflush_r+0x104>)
 8000c98:	40ca      	lsrs	r2, r1
 8000c9a:	07d6      	lsls	r6, r2, #31
 8000c9c:	d527      	bpl.n	8000cee <__sflush_r+0xb2>
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	6062      	str	r2, [r4, #4]
 8000ca2:	04d9      	lsls	r1, r3, #19
 8000ca4:	6922      	ldr	r2, [r4, #16]
 8000ca6:	6022      	str	r2, [r4, #0]
 8000ca8:	d504      	bpl.n	8000cb4 <__sflush_r+0x78>
 8000caa:	1c42      	adds	r2, r0, #1
 8000cac:	d101      	bne.n	8000cb2 <__sflush_r+0x76>
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	b903      	cbnz	r3, 8000cb4 <__sflush_r+0x78>
 8000cb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8000cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cb6:	602f      	str	r7, [r5, #0]
 8000cb8:	b1b9      	cbz	r1, 8000cea <__sflush_r+0xae>
 8000cba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	d002      	beq.n	8000cc8 <__sflush_r+0x8c>
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff fec2 	bl	8000a4c <_free_r>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ccc:	e00d      	b.n	8000cea <__sflush_r+0xae>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	47b0      	blx	r6
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	1c50      	adds	r0, r2, #1
 8000cd8:	d1c9      	bne.n	8000c6e <__sflush_r+0x32>
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0c6      	beq.n	8000c6e <__sflush_r+0x32>
 8000ce0:	2b1d      	cmp	r3, #29
 8000ce2:	d001      	beq.n	8000ce8 <__sflush_r+0xac>
 8000ce4:	2b16      	cmp	r3, #22
 8000ce6:	d11e      	bne.n	8000d26 <__sflush_r+0xea>
 8000ce8:	602f      	str	r7, [r5, #0]
 8000cea:	2000      	movs	r0, #0
 8000cec:	e022      	b.n	8000d34 <__sflush_r+0xf8>
 8000cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	e01b      	b.n	8000d2e <__sflush_r+0xf2>
 8000cf6:	690f      	ldr	r7, [r1, #16]
 8000cf8:	2f00      	cmp	r7, #0
 8000cfa:	d0f6      	beq.n	8000cea <__sflush_r+0xae>
 8000cfc:	0793      	lsls	r3, r2, #30
 8000cfe:	680e      	ldr	r6, [r1, #0]
 8000d00:	bf08      	it	eq
 8000d02:	694b      	ldreq	r3, [r1, #20]
 8000d04:	600f      	str	r7, [r1, #0]
 8000d06:	bf18      	it	ne
 8000d08:	2300      	movne	r3, #0
 8000d0a:	eba6 0807 	sub.w	r8, r6, r7
 8000d0e:	608b      	str	r3, [r1, #8]
 8000d10:	f1b8 0f00 	cmp.w	r8, #0
 8000d14:	dde9      	ble.n	8000cea <__sflush_r+0xae>
 8000d16:	6a21      	ldr	r1, [r4, #32]
 8000d18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	463a      	mov	r2, r7
 8000d1e:	4628      	mov	r0, r5
 8000d20:	47b0      	blx	r6
 8000d22:	2800      	cmp	r0, #0
 8000d24:	dc08      	bgt.n	8000d38 <__sflush_r+0xfc>
 8000d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2e:	81a3      	strh	r3, [r4, #12]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d38:	4407      	add	r7, r0
 8000d3a:	eba8 0800 	sub.w	r8, r8, r0
 8000d3e:	e7e7      	b.n	8000d10 <__sflush_r+0xd4>
 8000d40:	20400001 	.word	0x20400001

08000d44 <_fflush_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	4605      	mov	r5, r0
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	b913      	cbnz	r3, 8000d54 <_fflush_r+0x10>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	4628      	mov	r0, r5
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	b118      	cbz	r0, 8000d5e <_fflush_r+0x1a>
 8000d56:	6a03      	ldr	r3, [r0, #32]
 8000d58:	b90b      	cbnz	r3, 8000d5e <_fflush_r+0x1a>
 8000d5a:	f7ff fc8f 	bl	800067c <__sinit>
 8000d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f3      	beq.n	8000d4e <_fflush_r+0xa>
 8000d66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d68:	07d0      	lsls	r0, r2, #31
 8000d6a:	d404      	bmi.n	8000d76 <_fflush_r+0x32>
 8000d6c:	0599      	lsls	r1, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_fflush_r+0x32>
 8000d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d72:	f7ff fe68 	bl	8000a46 <__retarget_lock_acquire_recursive>
 8000d76:	4628      	mov	r0, r5
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff ff5f 	bl	8000c3c <__sflush_r>
 8000d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d80:	07da      	lsls	r2, r3, #31
 8000d82:	4605      	mov	r5, r0
 8000d84:	d4e4      	bmi.n	8000d50 <_fflush_r+0xc>
 8000d86:	89a3      	ldrh	r3, [r4, #12]
 8000d88:	059b      	lsls	r3, r3, #22
 8000d8a:	d4e1      	bmi.n	8000d50 <_fflush_r+0xc>
 8000d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d8e:	f7ff fe5b 	bl	8000a48 <__retarget_lock_release_recursive>
 8000d92:	e7dd      	b.n	8000d50 <_fflush_r+0xc>

08000d94 <__swhatbuf_r>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	460c      	mov	r4, r1
 8000d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	b096      	sub	sp, #88	@ 0x58
 8000da0:	4615      	mov	r5, r2
 8000da2:	461e      	mov	r6, r3
 8000da4:	da0d      	bge.n	8000dc2 <__swhatbuf_r+0x2e>
 8000da6:	89a3      	ldrh	r3, [r4, #12]
 8000da8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000dac:	f04f 0100 	mov.w	r1, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2340      	movne	r3, #64	@ 0x40
 8000db4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000db8:	2000      	movs	r0, #0
 8000dba:	6031      	str	r1, [r6, #0]
 8000dbc:	602b      	str	r3, [r5, #0]
 8000dbe:	b016      	add	sp, #88	@ 0x58
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	466a      	mov	r2, sp
 8000dc4:	f000 f848 	bl	8000e58 <_fstat_r>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	dbec      	blt.n	8000da6 <__swhatbuf_r+0x12>
 8000dcc:	9901      	ldr	r1, [sp, #4]
 8000dce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000dd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000dd6:	4259      	negs	r1, r3
 8000dd8:	4159      	adcs	r1, r3
 8000dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dde:	e7eb      	b.n	8000db8 <__swhatbuf_r+0x24>

08000de0 <__smakebuf_r>:
 8000de0:	898b      	ldrh	r3, [r1, #12]
 8000de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000de4:	079d      	lsls	r5, r3, #30
 8000de6:	4606      	mov	r6, r0
 8000de8:	460c      	mov	r4, r1
 8000dea:	d507      	bpl.n	8000dfc <__smakebuf_r+0x1c>
 8000dec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	6123      	str	r3, [r4, #16]
 8000df4:	2301      	movs	r3, #1
 8000df6:	6163      	str	r3, [r4, #20]
 8000df8:	b003      	add	sp, #12
 8000dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfc:	ab01      	add	r3, sp, #4
 8000dfe:	466a      	mov	r2, sp
 8000e00:	f7ff ffc8 	bl	8000d94 <__swhatbuf_r>
 8000e04:	9f00      	ldr	r7, [sp, #0]
 8000e06:	4605      	mov	r5, r0
 8000e08:	4639      	mov	r1, r7
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f7ff fe8a 	bl	8000b24 <_malloc_r>
 8000e10:	b948      	cbnz	r0, 8000e26 <__smakebuf_r+0x46>
 8000e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e16:	059a      	lsls	r2, r3, #22
 8000e18:	d4ee      	bmi.n	8000df8 <__smakebuf_r+0x18>
 8000e1a:	f023 0303 	bic.w	r3, r3, #3
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	81a3      	strh	r3, [r4, #12]
 8000e24:	e7e2      	b.n	8000dec <__smakebuf_r+0xc>
 8000e26:	89a3      	ldrh	r3, [r4, #12]
 8000e28:	6020      	str	r0, [r4, #0]
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e2e:	81a3      	strh	r3, [r4, #12]
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e36:	b15b      	cbz	r3, 8000e50 <__smakebuf_r+0x70>
 8000e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f000 f81d 	bl	8000e7c <_isatty_r>
 8000e42:	b128      	cbz	r0, 8000e50 <__smakebuf_r+0x70>
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	81a3      	strh	r3, [r4, #12]
 8000e50:	89a3      	ldrh	r3, [r4, #12]
 8000e52:	431d      	orrs	r5, r3
 8000e54:	81a5      	strh	r5, [r4, #12]
 8000e56:	e7cf      	b.n	8000df8 <__smakebuf_r+0x18>

08000e58 <_fstat_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d07      	ldr	r5, [pc, #28]	@ (8000e78 <_fstat_r+0x20>)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	f7ff fa3e 	bl	80002e6 <_fstat>
 8000e6a:	1c43      	adds	r3, r0, #1
 8000e6c:	d102      	bne.n	8000e74 <_fstat_r+0x1c>
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	b103      	cbz	r3, 8000e74 <_fstat_r+0x1c>
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	bd38      	pop	{r3, r4, r5, pc}
 8000e76:	bf00      	nop
 8000e78:	200001b8 	.word	0x200001b8

08000e7c <_isatty_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	4d06      	ldr	r5, [pc, #24]	@ (8000e98 <_isatty_r+0x1c>)
 8000e80:	2300      	movs	r3, #0
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff fa3d 	bl	8000306 <_isatty>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_isatty_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_isatty_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	200001b8 	.word	0x200001b8

08000e9c <_sbrk_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4d06      	ldr	r5, [pc, #24]	@ (8000eb8 <_sbrk_r+0x1c>)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	f7ff fa46 	bl	8000338 <_sbrk>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_sbrk_r+0x1a>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_sbrk_r+0x1a>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	200001b8 	.word	0x200001b8

08000ebc <_init>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr

08000ec8 <_fini>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr
