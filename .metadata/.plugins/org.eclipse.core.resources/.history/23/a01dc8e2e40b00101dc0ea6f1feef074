#include<stm32f4xx.h>

#define GPIOAEN			(1U<<0)
#define UART2ENR		(1U<<17)
#define CR1_TE			(1U<<3)
#define SYS_FREQ		16000000
#define APBQ_CLK		SYS_FREQ
#define UART_BAUDRATE	115200


void uart_tx_init(void);
static uint16_t calculate_uart_bd(uint32_t periphCLK, uint32_t baurdrate);
void uart_set_baurdrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baurdrate);

int main(){

}

void uart_tx_init(void){
//	Configure GPIOA for kuart comunication
//	unable clock
RCC->AHB1ENR |= GPIOAEN;
//pa2 to alternate function mode
GPIOA->MODER |= (1U<<5);
GPIOA->MODER &=~(1U<<4);
//alternate function to tx mode
GPIOA->AFR[0] |= (1u<<8);
GPIOA->AFR[0] |= (1u<<9);
GPIOA->AFR[0] |= (1u<<10);
GPIOA->AFR[0] &=~(1u<<11);

//  configure uart2 mode
//unable clock access to uart2
RCC->APB1ENR |= UART2ENR;
//set braudrate
////	Configure baurdrate
	uart_set_baudrate(USART2,APBQ_CLK, UART_BAURDRATE);
////	Configure the transfer direction
	USART2->CR1 = CR1_TE;

}



//set baundrate
void uart_set_baurdrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baurdrate){
	USARTx->BRR = calculate_uart_bd(periphCLK, baurdrate);
}

static uint16_t calculate_uart_bd(uint32_t periphCLK, uint32_t baurdrate){
	return ((periphCLK+(baurdrate/2U))/baurdrate);

}






















//#include <stdint.h>
//#include "stm32f4xx.h"
//
//
//#define GPIOAEN      (1U<<0)
//#define UART2EN       (1U<<17)
//#define CR1_TE		 (1U<3)
//#define CR1_UE		 (1U<13)
//#define SR_TXE		 (1U<7)
//#define SYS_FREQ      16000000
//#define APBQ_CLK      SYS_FREQ
//
//#define UART_BAURDRATE 115200
//
//static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t Baudrate);
//static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);
//
//void uart2_tx_init(void);
//void uart2_write(int ch);
//
//int main(void)
//{
//	uart2_tx_init();
//	while(1)
//	{
//		uart2_write('y');
//	}
//
//}
//
//void uart2_tx_init(void)
//{
//	/**********Configure uart gpio pin*********/
////	Enable clock access to gpioa
//	RCC->AHB1ENR |= GPIOAEN;
////	Set PA2 mode to alternate function mode
//	GPIOA->MODER &=~(1U<<4);
//	GPIOA->MODER |=(1U<<5);
//
////	Set PA2 alternate function type to UART_TX (AF7)
//	GPIOA->AFR[0] |= (1U<<8);
//	GPIOA->AFR[0] |= (1U<<9);
//	GPIOA->AFR[0] |= (1U<<10);
//	GPIOA->AFR[0] &=~(1U<<8);
//	/**********Configure  uart module***********/
////	Enable clock access to uart2
//	RCC->AHB1ENR |= UART2EN;
////	Configure baurdrate
//	uart_set_baudrate(USART2,APBQ_CLK, UART_BAURDRATE);
////	Configure the transfer direction
//	USART2->CR1 = CR1_TE;
////	Enable uart module
//	USART2->CR1 |= CR1_UE;
//
//
//}
//void uart2_write(int ch)
//{
////	Make sure the transmit data register is empty
//	while(!(USART2->SR & SR_TXE))
//	{
//
//	}
////	Write to transmit data register
//
//	USART2->DR = (ch & 0xFF);
//}
//static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t Baudrate)
//{
//	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
//}
//
//static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
//{
//	return ((PeriphClk + (Baudrate/2U))/Baudrate);
//}
//
//
//
//
//
