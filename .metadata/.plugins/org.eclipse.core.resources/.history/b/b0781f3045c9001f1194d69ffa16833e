#include "stm32f4xx.h"


#define GPIOAEN      (1U<<0)
#define UART2EN       (1U<<17)

static void uart_set_baudrate(UART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t Baudrate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);

int main(void)
{

	while(1)
	{

	}

}

void uart2_tx_init(void)
{
	/**********Configure uart gpio pin*********/
//	Enable clock access to gpioa
	RCC->AHB1ENR |= GPIOAEN;
//	Set PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
	GPIOA->MODER |=(1U<<5);

//	Set PA2 alternate function type to UART_TX (AF7)
	GPIOA->AFR[0] |= (1U<<8);
	GPIOA->AFR[0] |= (1U<<9);
	GPIOA->AFR[0] |= (1U<<10);
	GPIOA->AFR[0] &=~(1U<<8);
	/**********Configure  uart module***********/
//	Enable clock access to uart2
	RCC->AHB1ENR |= UART2EN;
//	Configure baurdrate
//	Configure the transfer direction
//	Enable uart module


}
static void uart_set_baudrate(UART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t Baudrate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
	return ((PeriphClk + (Baudrate/2U))/Baudrate);
}





