#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"


#define GPIOAEN        (1U << 0)
#define UART2EN        (1U << 17)
#define DHT22_PIN      (1U << 5)

char buffer[50];

void TIM2_Init(void);
void Delay_us(uint16_t us);
void USART_Print(char *str);
uint8_t Read_DHT22_Byte(void);

int main(void) {
    uart_tx_init();
    TIM2_Init();

    // Enable GPIOA clock
    RCC->AHB1ENR |= GPIOAEN;

    // Configure PA5 (DHT22 data pin)
    GPIOA->MODER |= (1 << 10);     // PA5 as output
    GPIOA->OTYPER &= ~(1 << 5);    // Push-pull (not open-drain)
    GPIOA->PUPDR &= ~(3 << 10);    // Disable internal pull-up

    // Send start signal
    GPIOA->ODR &= ~DHT22_PIN;      // Pull low
    Delay_us(1000);                // 1 ms
    GPIOA->ODR |= DHT22_PIN;       // Release bus
    GPIOA->MODER &= ~(3 << 10);    // Switch PA5 to input
    Delay_us(30);                  // Wait 30 µs

    // Wait for DHT22 response (with timeout)
    uint32_t timeout = 1000000;
    while ((GPIOA->IDR & DHT22_PIN) && timeout--); // Wait until low
    if (!timeout) {
        USART_Print("Sensor error!\r\n");
        return 1;
    }
    timeout = 1000000;
    while (!(GPIOA->IDR & DHT22_PIN) && timeout--); // Wait until high

    // Read data
    uint8_t data[5];
    for (int i = 0; i < 5; i++) data[i] = Read_DHT22_Byte();

    // Validate checksum
    if (data[4] != (data[0] + data[1] + data[2] + data[3])) {
        USART_Print("Checksum error!\r\n");
        return 1;
    }

    // Calculate values
    int humidity = data[0] << 8 | data[1]; // e.g., 625 = 62.5%
    int temperature = data[2] << 8 | data[3]; // e.g., 234 = 23.4°C

    // Print data
    sprintf(buffer, "Temp: %d.%dC, Humidity: %d.%d%%\r\n",
            temperature / 10, temperature % 10,
            humidity / 10, humidity % 10);
    while(1);
}

// Timer2 Initialization
void TIM2_Init(void) {
    RCC->APB1ENR |= (1U << 0);  // Enable TIM2 clock
    TIM2->PSC = 16 - 1;         // 16 MHz / 16 = 1 MHz (1 µs/tick)
    TIM2->ARR = 0xFFFF;
    TIM2->CR1 |= (1 << 0);      // Enable timer
}

// Microsecond delay
void Delay_us(uint16_t us) {
    TIM2->CNT = 0;
    while (TIM2->CNT < us);
}

// Send string via USART2
void USART_Print(char *str) {
    while (*str) {
        while (!(USART2->SR & USART_SR_TXE));
        USART2->DR = *str++;
    }
}

// Read a byte from DHT22
uint8_t Read_DHT22_Byte(void) {
    uint8_t data = 0;
    for (int i = 0; i < 8; i++) {
        while (!(GPIOA->IDR & DHT22_PIN)); // Wait for high
        Delay_us(50); // Wait 50 µs to read bit value
        if (GPIOA->IDR & DHT22_PIN) data |= (1 << (7 - i));
        while (GPIOA->IDR & DHT22_PIN);    // Wait for low
    }
    return data;
}
