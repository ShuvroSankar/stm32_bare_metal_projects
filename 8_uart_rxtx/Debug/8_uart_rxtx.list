
8_uart_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0000144c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000444  08000444  0000144c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800044c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800044c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000799  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000284  00000000  00000000  00001c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000065  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019760  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000db9  00000000  00000000  0001b6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecd5  00000000  00000000  0001c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab18b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000ab1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ab328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800042c 	.word	0x0800042c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800042c 	.word	0x0800042c

08000204 <main>:
#define LED_PIN			PIN5
char key;



int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
//	enable clock access
	RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <main+0x5c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a14      	ldr	r2, [pc, #80]	@ (8000260 <main+0x5c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
//	activate led pin
	GPIOA->MODER |= (1U<<10);
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <main+0x60>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <main+0x60>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000220:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <main+0x60>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0f      	ldr	r2, [pc, #60]	@ (8000264 <main+0x60>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]

    uart_rxtx_init();
 800022c:	f000 f81e 	bl	800026c <uart_rxtx_init>
    while(1){
    	key = uart2_read();
 8000230:	f000 f876 	bl	8000320 <uart2_read>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b0b      	ldr	r3, [pc, #44]	@ (8000268 <main+0x64>)
 800023a:	701a      	strb	r2, [r3, #0]
    	if(key == '1'){
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <main+0x64>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b31      	cmp	r3, #49	@ 0x31
 8000242:	d106      	bne.n	8000252 <main+0x4e>
    		GPIOA->ODR |= LED_PIN;
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <main+0x60>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a06      	ldr	r2, [pc, #24]	@ (8000264 <main+0x60>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
 8000250:	e7ee      	b.n	8000230 <main+0x2c>
    	}else{
    		GPIOA->ODR &= ~LED_PIN;
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <main+0x60>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a03      	ldr	r2, [pc, #12]	@ (8000264 <main+0x60>)
 8000258:	f023 0320 	bic.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
    	key = uart2_read();
 800025e:	e7e7      	b.n	8000230 <main+0x2c>
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000
 8000268:	2000001c 	.word	0x2000001c

0800026c <uart_rxtx_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void uart_rxtx_init(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000270:	4b27      	ldr	r3, [pc, #156]	@ (8000310 <uart_rxtx_init+0xa4>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a26      	ldr	r2, [pc, #152]	@ (8000310 <uart_rxtx_init+0xa4>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<5);
 800027c:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <uart_rxtx_init+0xa8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a24      	ldr	r2, [pc, #144]	@ (8000314 <uart_rxtx_init+0xa8>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<4);
 8000288:	4b22      	ldr	r3, [pc, #136]	@ (8000314 <uart_rxtx_init+0xa8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a21      	ldr	r2, [pc, #132]	@ (8000314 <uart_rxtx_init+0xa8>)
 800028e:	f023 0310 	bic.w	r3, r3, #16
 8000292:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 TX)
    GPIOA->AFR[0] &= ~(0xF << 8); // Clear bits 8-11 for PA2
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <uart_rxtx_init+0xa8>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a1e      	ldr	r2, [pc, #120]	@ (8000314 <uart_rxtx_init+0xa8>)
 800029a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800029e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);  // AF7 is 0111
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002aa:	6213      	str	r3, [r2, #32]

    // Set PA3 mode to Alternate Function (AF)
    GPIOA->MODER |= (1U<<7);
 80002ac:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a18      	ldr	r2, [pc, #96]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U<<6);
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a15      	ldr	r2, [pc, #84]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80002c2:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function to AF7 (USART2 RX)
    GPIOA->AFR[0] &= ~(0xF << 12); // Clear bits 8-15 for PA2
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a12      	ldr	r2, [pc, #72]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002ce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);  // AF7 is 0111
 80002d0:	4b10      	ldr	r3, [pc, #64]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000314 <uart_rxtx_init+0xa8>)
 80002d6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80002da:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= UART2EN;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <uart_rxtx_init+0xa4>)
 80002de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000310 <uart_rxtx_init+0xa4>)
 80002e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e6:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002ec:	490a      	ldr	r1, [pc, #40]	@ (8000318 <uart_rxtx_init+0xac>)
 80002ee:	480b      	ldr	r0, [pc, #44]	@ (800031c <uart_rxtx_init+0xb0>)
 80002f0:	f000 f82a 	bl	8000348 <uart_set_baudrate>

    // Configure transfer direction
    USART2->CR1 |= CR1_TE | CR1_RE;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <uart_rxtx_init+0xb0>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a08      	ldr	r2, [pc, #32]	@ (800031c <uart_rxtx_init+0xb0>)
 80002fa:	f043 030c 	orr.w	r3, r3, #12
 80002fe:	60d3      	str	r3, [r2, #12]

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <uart_rxtx_init+0xb0>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a05      	ldr	r2, [pc, #20]	@ (800031c <uart_rxtx_init+0xb0>)
 8000306:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40023800 	.word	0x40023800
 8000314:	40020000 	.word	0x40020000
 8000318:	00f42400 	.word	0x00f42400
 800031c:	40004400 	.word	0x40004400

08000320 <uart2_read>:

    // Enable UART Module
    USART2->CR1 |= CR1_UE;
}

char uart2_read(void){
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    // Make sure receive data register is not empty
    while (!(USART2->SR & SR_RNXE)) {}
 8000324:	bf00      	nop
 8000326:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <uart2_read+0x24>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 0320 	and.w	r3, r3, #32
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <uart2_read+0x6>

    // read data
    return USART2->DR;
 8000332:	4b04      	ldr	r3, [pc, #16]	@ (8000344 <uart2_read+0x24>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	b2db      	uxtb	r3, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40004400 	.word	0x40004400

08000348 <uart_set_baudrate>:
    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
}

// Set baud rate
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t periphCLK, uint32_t baudrate){
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
    USARTx->BRR = calculate_uart_bd(periphCLK, baudrate);
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	68b8      	ldr	r0, [r7, #8]
 8000358:	f000 f807 	bl	800036a <calculate_uart_bd>
 800035c:	4602      	mov	r2, r0
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	609a      	str	r2, [r3, #8]
}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <calculate_uart_bd>:

static uint32_t calculate_uart_bd(uint32_t periphCLK, uint32_t baudrate){
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
    return ((periphCLK + (baudrate / 2U)) / baudrate);
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	085a      	lsrs	r2, r3, #1
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	441a      	add	r2, r3
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
	...

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff1f 	bl	8000204 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
